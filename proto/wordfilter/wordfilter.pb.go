// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wordfilter.proto

package wordfilter // import "j7go/proto/wordfilter"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "go.7yes.com/j7f/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 查询校正敏感词请求体
type QueryRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 待检查语句
	Words                string   `protobuf:"bytes,2,opt,name=words,proto3" json:"words,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_wordfilter_a9e5e2a528c137b7, []int{0}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (dst *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(dst, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *QueryRequest) GetWords() string {
	if m != nil {
		return m.Words
	}
	return ""
}

// 查询校正敏感词响应体
type QueryReply struct {
	// 公共响应状态
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 校正后文本
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// 查询出的敏感词
	Keywords             []string `protobuf:"bytes,3,rep,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryReply) Reset()         { *m = QueryReply{} }
func (m *QueryReply) String() string { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()    {}
func (*QueryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_wordfilter_a9e5e2a528c137b7, []int{1}
}
func (m *QueryReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryReply.Unmarshal(m, b)
}
func (m *QueryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryReply.Marshal(b, m, deterministic)
}
func (dst *QueryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReply.Merge(dst, src)
}
func (m *QueryReply) XXX_Size() int {
	return xxx_messageInfo_QueryReply.Size(m)
}
func (m *QueryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReply proto.InternalMessageInfo

func (m *QueryReply) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueryReply) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *QueryReply) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

// 获取敏感词列表请求体
type BlackWordsRequest struct {
	// 公共请求头
	Header               *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BlackWordsRequest) Reset()         { *m = BlackWordsRequest{} }
func (m *BlackWordsRequest) String() string { return proto.CompactTextString(m) }
func (*BlackWordsRequest) ProtoMessage()    {}
func (*BlackWordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_wordfilter_a9e5e2a528c137b7, []int{2}
}
func (m *BlackWordsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlackWordsRequest.Unmarshal(m, b)
}
func (m *BlackWordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlackWordsRequest.Marshal(b, m, deterministic)
}
func (dst *BlackWordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlackWordsRequest.Merge(dst, src)
}
func (m *BlackWordsRequest) XXX_Size() int {
	return xxx_messageInfo_BlackWordsRequest.Size(m)
}
func (m *BlackWordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlackWordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlackWordsRequest proto.InternalMessageInfo

func (m *BlackWordsRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 获取敏感词列表响应体
type BlackWordsReply struct {
	// 公共响应状态
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 敏感词库
	Keywords             []string `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlackWordsReply) Reset()         { *m = BlackWordsReply{} }
func (m *BlackWordsReply) String() string { return proto.CompactTextString(m) }
func (*BlackWordsReply) ProtoMessage()    {}
func (*BlackWordsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_wordfilter_a9e5e2a528c137b7, []int{3}
}
func (m *BlackWordsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlackWordsReply.Unmarshal(m, b)
}
func (m *BlackWordsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlackWordsReply.Marshal(b, m, deterministic)
}
func (dst *BlackWordsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlackWordsReply.Merge(dst, src)
}
func (m *BlackWordsReply) XXX_Size() int {
	return xxx_messageInfo_BlackWordsReply.Size(m)
}
func (m *BlackWordsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlackWordsReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlackWordsReply proto.InternalMessageInfo

func (m *BlackWordsReply) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BlackWordsReply) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

// 重新加载敏感词库请求体
type ReloadRequest struct {
	// 公共请求头
	Header               *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReloadRequest) Reset()         { *m = ReloadRequest{} }
func (m *ReloadRequest) String() string { return proto.CompactTextString(m) }
func (*ReloadRequest) ProtoMessage()    {}
func (*ReloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_wordfilter_a9e5e2a528c137b7, []int{4}
}
func (m *ReloadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReloadRequest.Unmarshal(m, b)
}
func (m *ReloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReloadRequest.Marshal(b, m, deterministic)
}
func (dst *ReloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadRequest.Merge(dst, src)
}
func (m *ReloadRequest) XXX_Size() int {
	return xxx_messageInfo_ReloadRequest.Size(m)
}
func (m *ReloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadRequest proto.InternalMessageInfo

func (m *ReloadRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 重新加载敏感词库响应体
type ReloadReply struct {
	// 公共响应状态
	Status               *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReloadReply) Reset()         { *m = ReloadReply{} }
func (m *ReloadReply) String() string { return proto.CompactTextString(m) }
func (*ReloadReply) ProtoMessage()    {}
func (*ReloadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_wordfilter_a9e5e2a528c137b7, []int{5}
}
func (m *ReloadReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReloadReply.Unmarshal(m, b)
}
func (m *ReloadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReloadReply.Marshal(b, m, deterministic)
}
func (dst *ReloadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadReply.Merge(dst, src)
}
func (m *ReloadReply) XXX_Size() int {
	return xxx_messageInfo_ReloadReply.Size(m)
}
func (m *ReloadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadReply proto.InternalMessageInfo

func (m *ReloadReply) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "utoProto.wordfilter.QueryRequest")
	proto.RegisterType((*QueryReply)(nil), "utoProto.wordfilter.QueryReply")
	proto.RegisterType((*BlackWordsRequest)(nil), "utoProto.wordfilter.BlackWordsRequest")
	proto.RegisterType((*BlackWordsReply)(nil), "utoProto.wordfilter.BlackWordsReply")
	proto.RegisterType((*ReloadRequest)(nil), "utoProto.wordfilter.ReloadRequest")
	proto.RegisterType((*ReloadReply)(nil), "utoProto.wordfilter.ReloadReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WordfilterClient is the client API for Wordfilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WordfilterClient interface {
	Query(ctx context.Context, opts ...grpc.CallOption) (Wordfilter_QueryClient, error)
	BlackWords(ctx context.Context, opts ...grpc.CallOption) (Wordfilter_BlackWordsClient, error)
	Reload(ctx context.Context, opts ...grpc.CallOption) (Wordfilter_ReloadClient, error)
}

type wordfilterClient struct {
	cc *grpc.ClientConn
}

func NewWordfilterClient(cc *grpc.ClientConn) WordfilterClient {
	return &wordfilterClient{cc}
}

func (c *wordfilterClient) Query(ctx context.Context, opts ...grpc.CallOption) (Wordfilter_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wordfilter_serviceDesc.Streams[0], "/utoProto.wordfilter.Wordfilter/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &wordfilterQueryClient{stream}
	return x, nil
}

type Wordfilter_QueryClient interface {
	Send(*QueryRequest) error
	Recv() (*QueryReply, error)
	grpc.ClientStream
}

type wordfilterQueryClient struct {
	grpc.ClientStream
}

func (x *wordfilterQueryClient) Send(m *QueryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wordfilterQueryClient) Recv() (*QueryReply, error) {
	m := new(QueryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wordfilterClient) BlackWords(ctx context.Context, opts ...grpc.CallOption) (Wordfilter_BlackWordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wordfilter_serviceDesc.Streams[1], "/utoProto.wordfilter.Wordfilter/BlackWords", opts...)
	if err != nil {
		return nil, err
	}
	x := &wordfilterBlackWordsClient{stream}
	return x, nil
}

type Wordfilter_BlackWordsClient interface {
	Send(*BlackWordsRequest) error
	Recv() (*BlackWordsReply, error)
	grpc.ClientStream
}

type wordfilterBlackWordsClient struct {
	grpc.ClientStream
}

func (x *wordfilterBlackWordsClient) Send(m *BlackWordsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wordfilterBlackWordsClient) Recv() (*BlackWordsReply, error) {
	m := new(BlackWordsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wordfilterClient) Reload(ctx context.Context, opts ...grpc.CallOption) (Wordfilter_ReloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Wordfilter_serviceDesc.Streams[2], "/utoProto.wordfilter.Wordfilter/Reload", opts...)
	if err != nil {
		return nil, err
	}
	x := &wordfilterReloadClient{stream}
	return x, nil
}

type Wordfilter_ReloadClient interface {
	Send(*ReloadRequest) error
	Recv() (*ReloadReply, error)
	grpc.ClientStream
}

type wordfilterReloadClient struct {
	grpc.ClientStream
}

func (x *wordfilterReloadClient) Send(m *ReloadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wordfilterReloadClient) Recv() (*ReloadReply, error) {
	m := new(ReloadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WordfilterServer is the server API for Wordfilter service.
type WordfilterServer interface {
	Query(Wordfilter_QueryServer) error
	BlackWords(Wordfilter_BlackWordsServer) error
	Reload(Wordfilter_ReloadServer) error
}

func RegisterWordfilterServer(s *grpc.Server, srv WordfilterServer) {
	s.RegisterService(&_Wordfilter_serviceDesc, srv)
}

func _Wordfilter_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WordfilterServer).Query(&wordfilterQueryServer{stream})
}

type Wordfilter_QueryServer interface {
	Send(*QueryReply) error
	Recv() (*QueryRequest, error)
	grpc.ServerStream
}

type wordfilterQueryServer struct {
	grpc.ServerStream
}

func (x *wordfilterQueryServer) Send(m *QueryReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wordfilterQueryServer) Recv() (*QueryRequest, error) {
	m := new(QueryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wordfilter_BlackWords_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WordfilterServer).BlackWords(&wordfilterBlackWordsServer{stream})
}

type Wordfilter_BlackWordsServer interface {
	Send(*BlackWordsReply) error
	Recv() (*BlackWordsRequest, error)
	grpc.ServerStream
}

type wordfilterBlackWordsServer struct {
	grpc.ServerStream
}

func (x *wordfilterBlackWordsServer) Send(m *BlackWordsReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wordfilterBlackWordsServer) Recv() (*BlackWordsRequest, error) {
	m := new(BlackWordsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wordfilter_Reload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WordfilterServer).Reload(&wordfilterReloadServer{stream})
}

type Wordfilter_ReloadServer interface {
	Send(*ReloadReply) error
	Recv() (*ReloadRequest, error)
	grpc.ServerStream
}

type wordfilterReloadServer struct {
	grpc.ServerStream
}

func (x *wordfilterReloadServer) Send(m *ReloadReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wordfilterReloadServer) Recv() (*ReloadRequest, error) {
	m := new(ReloadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Wordfilter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "utoProto.wordfilter.Wordfilter",
	HandlerType: (*WordfilterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _Wordfilter_Query_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BlackWords",
			Handler:       _Wordfilter_BlackWords_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Reload",
			Handler:       _Wordfilter_Reload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wordfilter.proto",
}

func init() { proto.RegisterFile("wordfilter.proto", fileDescriptor_wordfilter_a9e5e2a528c137b7) }

var fileDescriptor_wordfilter_a9e5e2a528c137b7 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x4f, 0xc2, 0x30,
	0x14, 0xc7, 0xb3, 0x21, 0x8b, 0x3c, 0x30, 0x6a, 0x21, 0x86, 0xec, 0xe2, 0x5c, 0x8c, 0xd9, 0x41,
	0x3b, 0x83, 0x27, 0x63, 0x38, 0x88, 0x17, 0x6f, 0x4a, 0x8d, 0x21, 0x31, 0x6a, 0x32, 0x58, 0x45,
	0x42, 0xa1, 0xb8, 0x76, 0xd1, 0x7d, 0x0c, 0xbf, 0x96, 0x9f, 0xca, 0xac, 0x2b, 0x0c, 0x95, 0x60,
	0xb2, 0x03, 0xe1, 0xbd, 0xbc, 0xff, 0xfb, 0xf5, 0xdf, 0xf7, 0x3a, 0xd8, 0x79, 0xe7, 0x51, 0xf8,
	0x32, 0x62, 0x92, 0x46, 0x78, 0x16, 0x71, 0xc9, 0x51, 0x3d, 0x96, 0xfc, 0x36, 0x8d, 0x70, 0x5e,
	0xb2, 0x6b, 0x03, 0x3e, 0x99, 0xf0, 0x69, 0x26, 0x71, 0x09, 0xd4, 0xba, 0x31, 0x8d, 0x12, 0x42,
	0xdf, 0x62, 0x2a, 0x24, 0x3a, 0x06, 0xeb, 0x95, 0x06, 0x21, 0x8d, 0x9a, 0x86, 0x63, 0x78, 0xd5,
	0x56, 0x03, 0x6b, 0xf9, 0x95, 0xfa, 0xbb, 0x56, 0x35, 0xa2, 0x35, 0xa8, 0x01, 0xe5, 0x94, 0x2c,
	0x9a, 0xa6, 0x63, 0x78, 0x15, 0x92, 0x25, 0x2e, 0x03, 0xd0, 0xcc, 0x19, 0x4b, 0x10, 0x06, 0x4b,
	0xc8, 0x40, 0xc6, 0x42, 0x13, 0xf7, 0xe6, 0xc4, 0x4e, 0x2c, 0x46, 0x53, 0x2a, 0xc4, 0x9d, 0xaa,
	0x12, 0xad, 0x42, 0x08, 0x36, 0x24, 0xfd, 0x90, 0x1a, 0xa9, 0x62, 0x64, 0xc3, 0xe6, 0x98, 0x26,
	0xd9, 0x51, 0x25, 0xa7, 0xe4, 0x55, 0xc8, 0x22, 0x77, 0x2f, 0x61, 0xb7, 0xc3, 0x82, 0xc1, 0xb8,
	0x97, 0x66, 0x85, 0xae, 0xe1, 0x3e, 0xc1, 0xf6, 0x32, 0xa2, 0x88, 0xeb, 0x65, 0x87, 0xe6, 0x2f,
	0x87, 0x6d, 0xd8, 0x22, 0x94, 0xf1, 0x20, 0x2c, 0xe6, 0xae, 0x0d, 0xd5, 0x79, 0x7b, 0x01, 0x67,
	0xad, 0x4f, 0x13, 0xa0, 0xb7, 0x58, 0x3f, 0xba, 0x81, 0xb2, 0x5a, 0x0e, 0x3a, 0xc0, 0x2b, 0x5e,
	0x07, 0x5e, 0x7e, 0x0c, 0xf6, 0xfe, 0x3a, 0xc9, 0x8c, 0x25, 0x9e, 0x71, 0x6a, 0xa0, 0x67, 0x80,
	0x7c, 0x78, 0xe8, 0x68, 0x65, 0xcb, 0x9f, 0x05, 0xd9, 0x87, 0xff, 0xea, 0xe6, 0x7c, 0x02, 0x56,
	0x76, 0x7d, 0xe4, 0xae, 0xec, 0xf9, 0x31, 0x5a, 0xdb, 0x59, 0xab, 0xd1, 0xcc, 0x4e, 0xf7, 0xe1,
	0x7c, 0x38, 0x92, 0x2c, 0xe8, 0x63, 0x21, 0x93, 0x10, 0x0f, 0xa6, 0x7e, 0x2c, 0x79, 0xfa, 0x3b,
	0x11, 0xe1, 0xd8, 0x1f, 0x72, 0x5f, 0x7d, 0x1c, 0x7e, 0x4e, 0xb8, 0xc8, 0xc3, 0x2f, 0xb3, 0x7e,
	0xaf, 0x8f, 0x78, 0xcc, 0xe7, 0xda, 0xb7, 0x54, 0xcb, 0xd9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd9, 0xae, 0xef, 0xc6, 0x86, 0x03, 0x00, 0x00,
}
