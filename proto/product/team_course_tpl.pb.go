// Code generated by protoc-gen-go. DO NOT EDIT.
// source: team_course_tpl.proto

package product // import "j7go/proto/product"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "go.7yes.com/j7f/proto/common"
import images "j7go/proto/images"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 新增团体课请求体
type CourseTplRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 课程ID 仅更新时使用
	CourseId uint32 `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// 品牌ID 仅新增使用
	BrandId uint32 `protobuf:"varint,3,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// 门店ID 仅新增使用
	ShopId uint32 `protobuf:"varint,4,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// 课程名 仅新增使用
	CourseName string `protobuf:"bytes,5,opt,name=course_name,json=courseName,proto3" json:"course_name,omitempty"`
	// 课程类别
	CourseCategory uint32 `protobuf:"varint,6,opt,name=course_category,json=courseCategory,proto3" json:"course_category,omitempty"`
	// 训练目标
	TrainAim []uint32 `protobuf:"varint,7,rep,packed,name=train_aim,json=trainAim,proto3" json:"train_aim,omitempty"`
	// 课程时长
	Duration uint32 `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	// 时长单位
	TimeUnit uint32 `protobuf:"varint,9,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	// 建议售价
	Price uint32 `protobuf:"varint,10,opt,name=price,proto3" json:"price,omitempty"`
	// 课程图片
	CourseImg *images.Image `protobuf:"bytes,11,opt,name=course_img,json=courseImg,proto3" json:"course_img,omitempty"`
	// 课程描述
	Description string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// 训练强度
	StrengthLevel uint32 `protobuf:"varint,13,opt,name=strength_level,json=strengthLevel,proto3" json:"strength_level,omitempty"`
	// 消耗卡路里
	Calories uint32 `protobuf:"varint,14,opt,name=calories,proto3" json:"calories,omitempty"`
	// 发布渠道 1品牌 2门店
	PublishChannel PublishChannel `protobuf:"varint,15,opt,name=publish_channel,json=publishChannel,proto3,enum=product.PublishChannel" json:"publish_channel,omitempty"`
	// 是否有效 0 无效 1有效
	IsAvailable common.IsAvailable `protobuf:"varint,16,opt,name=is_available,json=isAvailable,proto3,enum=common.IsAvailable" json:"is_available,omitempty"`
	// 操作人ID
	OperatorId           uint32   `protobuf:"varint,17,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CourseTplRequest) Reset()         { *m = CourseTplRequest{} }
func (m *CourseTplRequest) String() string { return proto.CompactTextString(m) }
func (*CourseTplRequest) ProtoMessage()    {}
func (*CourseTplRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_team_course_tpl_aadb439e5ace7063, []int{0}
}
func (m *CourseTplRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CourseTplRequest.Unmarshal(m, b)
}
func (m *CourseTplRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CourseTplRequest.Marshal(b, m, deterministic)
}
func (dst *CourseTplRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CourseTplRequest.Merge(dst, src)
}
func (m *CourseTplRequest) XXX_Size() int {
	return xxx_messageInfo_CourseTplRequest.Size(m)
}
func (m *CourseTplRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CourseTplRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CourseTplRequest proto.InternalMessageInfo

func (m *CourseTplRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CourseTplRequest) GetCourseId() uint32 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *CourseTplRequest) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *CourseTplRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *CourseTplRequest) GetCourseName() string {
	if m != nil {
		return m.CourseName
	}
	return ""
}

func (m *CourseTplRequest) GetCourseCategory() uint32 {
	if m != nil {
		return m.CourseCategory
	}
	return 0
}

func (m *CourseTplRequest) GetTrainAim() []uint32 {
	if m != nil {
		return m.TrainAim
	}
	return nil
}

func (m *CourseTplRequest) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CourseTplRequest) GetTimeUnit() uint32 {
	if m != nil {
		return m.TimeUnit
	}
	return 0
}

func (m *CourseTplRequest) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CourseTplRequest) GetCourseImg() *images.Image {
	if m != nil {
		return m.CourseImg
	}
	return nil
}

func (m *CourseTplRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CourseTplRequest) GetStrengthLevel() uint32 {
	if m != nil {
		return m.StrengthLevel
	}
	return 0
}

func (m *CourseTplRequest) GetCalories() uint32 {
	if m != nil {
		return m.Calories
	}
	return 0
}

func (m *CourseTplRequest) GetPublishChannel() PublishChannel {
	if m != nil {
		return m.PublishChannel
	}
	return PublishChannel_PUBLISH_CHANNEL_INIT
}

func (m *CourseTplRequest) GetIsAvailable() common.IsAvailable {
	if m != nil {
		return m.IsAvailable
	}
	return common.IsAvailable_UNAVAILABLE
}

func (m *CourseTplRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

type CourseTplResponse struct {
	// 公共返回域
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 团体课ID
	CourseId             uint32   `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CourseTplResponse) Reset()         { *m = CourseTplResponse{} }
func (m *CourseTplResponse) String() string { return proto.CompactTextString(m) }
func (*CourseTplResponse) ProtoMessage()    {}
func (*CourseTplResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_team_course_tpl_aadb439e5ace7063, []int{1}
}
func (m *CourseTplResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CourseTplResponse.Unmarshal(m, b)
}
func (m *CourseTplResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CourseTplResponse.Marshal(b, m, deterministic)
}
func (dst *CourseTplResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CourseTplResponse.Merge(dst, src)
}
func (m *CourseTplResponse) XXX_Size() int {
	return xxx_messageInfo_CourseTplResponse.Size(m)
}
func (m *CourseTplResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CourseTplResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CourseTplResponse proto.InternalMessageInfo

func (m *CourseTplResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CourseTplResponse) GetCourseId() uint32 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

type GetCourseTplResponse struct {
	// 公共返回域
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 课程ID
	CourseId uint32 `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// 课程名
	CourseName string `protobuf:"bytes,3,opt,name=course_name,json=courseName,proto3" json:"course_name,omitempty"`
	// 课程类别
	CourseCategoryId uint32 `protobuf:"varint,4,opt,name=course_category_id,json=courseCategoryId,proto3" json:"course_category_id,omitempty"`
	// 课程类别名称
	CourseCategoryName string `protobuf:"bytes,5,opt,name=course_category_name,json=courseCategoryName,proto3" json:"course_category_name,omitempty"`
	// 训练目标
	TrainAimList []*Tag `protobuf:"bytes,6,rep,name=train_aim_list,json=trainAimList,proto3" json:"train_aim_list,omitempty"`
	// 课程时长
	Duration uint32 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// 时长单位
	TimeUnit uint32 `protobuf:"varint,8,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	// 建议售价
	Price uint32 `protobuf:"varint,9,opt,name=price,proto3" json:"price,omitempty"`
	// 课程图片
	CourseImg *images.Image `protobuf:"bytes,10,opt,name=course_img,json=courseImg,proto3" json:"course_img,omitempty"`
	// 课程描述
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// 训练强度
	StrengthLevel uint32 `protobuf:"varint,12,opt,name=strength_level,json=strengthLevel,proto3" json:"strength_level,omitempty"`
	// 消耗卡路里
	Calories uint32 `protobuf:"varint,13,opt,name=calories,proto3" json:"calories,omitempty"`
	// 是否有效 0 无效 1有效
	IsAvailable common.IsAvailable `protobuf:"varint,14,opt,name=is_available,json=isAvailable,proto3,enum=common.IsAvailable" json:"is_available,omitempty"`
	// 支持门店类型 1-全部门店 2-指定门店
	ShopSetting uint32 `protobuf:"varint,15,opt,name=shop_setting,json=shopSetting,proto3" json:"shop_setting,omitempty"`
	// 支持门店列表
	SupportShopList      []*SupportShop `protobuf:"bytes,16,rep,name=support_shop_list,json=supportShopList,proto3" json:"support_shop_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetCourseTplResponse) Reset()         { *m = GetCourseTplResponse{} }
func (m *GetCourseTplResponse) String() string { return proto.CompactTextString(m) }
func (*GetCourseTplResponse) ProtoMessage()    {}
func (*GetCourseTplResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_team_course_tpl_aadb439e5ace7063, []int{2}
}
func (m *GetCourseTplResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCourseTplResponse.Unmarshal(m, b)
}
func (m *GetCourseTplResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCourseTplResponse.Marshal(b, m, deterministic)
}
func (dst *GetCourseTplResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCourseTplResponse.Merge(dst, src)
}
func (m *GetCourseTplResponse) XXX_Size() int {
	return xxx_messageInfo_GetCourseTplResponse.Size(m)
}
func (m *GetCourseTplResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCourseTplResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCourseTplResponse proto.InternalMessageInfo

func (m *GetCourseTplResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetCourseTplResponse) GetCourseId() uint32 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *GetCourseTplResponse) GetCourseName() string {
	if m != nil {
		return m.CourseName
	}
	return ""
}

func (m *GetCourseTplResponse) GetCourseCategoryId() uint32 {
	if m != nil {
		return m.CourseCategoryId
	}
	return 0
}

func (m *GetCourseTplResponse) GetCourseCategoryName() string {
	if m != nil {
		return m.CourseCategoryName
	}
	return ""
}

func (m *GetCourseTplResponse) GetTrainAimList() []*Tag {
	if m != nil {
		return m.TrainAimList
	}
	return nil
}

func (m *GetCourseTplResponse) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GetCourseTplResponse) GetTimeUnit() uint32 {
	if m != nil {
		return m.TimeUnit
	}
	return 0
}

func (m *GetCourseTplResponse) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *GetCourseTplResponse) GetCourseImg() *images.Image {
	if m != nil {
		return m.CourseImg
	}
	return nil
}

func (m *GetCourseTplResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetCourseTplResponse) GetStrengthLevel() uint32 {
	if m != nil {
		return m.StrengthLevel
	}
	return 0
}

func (m *GetCourseTplResponse) GetCalories() uint32 {
	if m != nil {
		return m.Calories
	}
	return 0
}

func (m *GetCourseTplResponse) GetIsAvailable() common.IsAvailable {
	if m != nil {
		return m.IsAvailable
	}
	return common.IsAvailable_UNAVAILABLE
}

func (m *GetCourseTplResponse) GetShopSetting() uint32 {
	if m != nil {
		return m.ShopSetting
	}
	return 0
}

func (m *GetCourseTplResponse) GetSupportShopList() []*SupportShop {
	if m != nil {
		return m.SupportShopList
	}
	return nil
}

func init() {
	proto.RegisterType((*CourseTplRequest)(nil), "product.CourseTplRequest")
	proto.RegisterType((*CourseTplResponse)(nil), "product.CourseTplResponse")
	proto.RegisterType((*GetCourseTplResponse)(nil), "product.GetCourseTplResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TeamCourseSrvClient is the client API for TeamCourseSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamCourseSrvClient interface {
	// 新增团体课
	AddCourse(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_AddCourseClient, error)
	// 编辑团体课
	EditCourse(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_EditCourseClient, error)
	// 设置课程支持门店
	SetCourseShops(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_SetCourseShopsClient, error)
	// 团体课详情
	GetCourseInfo(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_GetCourseInfoClient, error)
	// 转入品牌团体课
	IntoBrandCourse(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_IntoBrandCourseClient, error)
	// 删除团体课
	DelCourse(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_DelCourseClient, error)
	// 团体课置为无效
	SetCourseInvalid(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_SetCourseInvalidClient, error)
	// 团体课置为有效
	SetCourseValid(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_SetCourseValidClient, error)
}

type teamCourseSrvClient struct {
	cc *grpc.ClientConn
}

func NewTeamCourseSrvClient(cc *grpc.ClientConn) TeamCourseSrvClient {
	return &teamCourseSrvClient{cc}
}

func (c *teamCourseSrvClient) AddCourse(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_AddCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamCourseSrv_serviceDesc.Streams[0], "/product.TeamCourseSrv/AddCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamCourseSrvAddCourseClient{stream}
	return x, nil
}

type TeamCourseSrv_AddCourseClient interface {
	Send(*CourseTplRequest) error
	Recv() (*CourseTplResponse, error)
	grpc.ClientStream
}

type teamCourseSrvAddCourseClient struct {
	grpc.ClientStream
}

func (x *teamCourseSrvAddCourseClient) Send(m *CourseTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamCourseSrvAddCourseClient) Recv() (*CourseTplResponse, error) {
	m := new(CourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamCourseSrvClient) EditCourse(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_EditCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamCourseSrv_serviceDesc.Streams[1], "/product.TeamCourseSrv/EditCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamCourseSrvEditCourseClient{stream}
	return x, nil
}

type TeamCourseSrv_EditCourseClient interface {
	Send(*CourseTplRequest) error
	Recv() (*CourseTplResponse, error)
	grpc.ClientStream
}

type teamCourseSrvEditCourseClient struct {
	grpc.ClientStream
}

func (x *teamCourseSrvEditCourseClient) Send(m *CourseTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamCourseSrvEditCourseClient) Recv() (*CourseTplResponse, error) {
	m := new(CourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamCourseSrvClient) SetCourseShops(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_SetCourseShopsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamCourseSrv_serviceDesc.Streams[2], "/product.TeamCourseSrv/SetCourseShops", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamCourseSrvSetCourseShopsClient{stream}
	return x, nil
}

type TeamCourseSrv_SetCourseShopsClient interface {
	Send(*SetCourseShopsRequest) error
	Recv() (*CourseTplResponse, error)
	grpc.ClientStream
}

type teamCourseSrvSetCourseShopsClient struct {
	grpc.ClientStream
}

func (x *teamCourseSrvSetCourseShopsClient) Send(m *SetCourseShopsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamCourseSrvSetCourseShopsClient) Recv() (*CourseTplResponse, error) {
	m := new(CourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamCourseSrvClient) GetCourseInfo(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_GetCourseInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamCourseSrv_serviceDesc.Streams[3], "/product.TeamCourseSrv/GetCourseInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamCourseSrvGetCourseInfoClient{stream}
	return x, nil
}

type TeamCourseSrv_GetCourseInfoClient interface {
	Send(*SetCourseStateRequest) error
	Recv() (*GetCourseTplResponse, error)
	grpc.ClientStream
}

type teamCourseSrvGetCourseInfoClient struct {
	grpc.ClientStream
}

func (x *teamCourseSrvGetCourseInfoClient) Send(m *SetCourseStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamCourseSrvGetCourseInfoClient) Recv() (*GetCourseTplResponse, error) {
	m := new(GetCourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamCourseSrvClient) IntoBrandCourse(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_IntoBrandCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamCourseSrv_serviceDesc.Streams[4], "/product.TeamCourseSrv/IntoBrandCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamCourseSrvIntoBrandCourseClient{stream}
	return x, nil
}

type TeamCourseSrv_IntoBrandCourseClient interface {
	Send(*SetCourseShopsRequest) error
	Recv() (*CourseTplResponse, error)
	grpc.ClientStream
}

type teamCourseSrvIntoBrandCourseClient struct {
	grpc.ClientStream
}

func (x *teamCourseSrvIntoBrandCourseClient) Send(m *SetCourseShopsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamCourseSrvIntoBrandCourseClient) Recv() (*CourseTplResponse, error) {
	m := new(CourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamCourseSrvClient) DelCourse(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_DelCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamCourseSrv_serviceDesc.Streams[5], "/product.TeamCourseSrv/DelCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamCourseSrvDelCourseClient{stream}
	return x, nil
}

type TeamCourseSrv_DelCourseClient interface {
	Send(*SetCourseStateRequest) error
	Recv() (*CourseTplResponse, error)
	grpc.ClientStream
}

type teamCourseSrvDelCourseClient struct {
	grpc.ClientStream
}

func (x *teamCourseSrvDelCourseClient) Send(m *SetCourseStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamCourseSrvDelCourseClient) Recv() (*CourseTplResponse, error) {
	m := new(CourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamCourseSrvClient) SetCourseInvalid(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_SetCourseInvalidClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamCourseSrv_serviceDesc.Streams[6], "/product.TeamCourseSrv/SetCourseInvalid", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamCourseSrvSetCourseInvalidClient{stream}
	return x, nil
}

type TeamCourseSrv_SetCourseInvalidClient interface {
	Send(*SetCourseStateRequest) error
	Recv() (*CourseTplResponse, error)
	grpc.ClientStream
}

type teamCourseSrvSetCourseInvalidClient struct {
	grpc.ClientStream
}

func (x *teamCourseSrvSetCourseInvalidClient) Send(m *SetCourseStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamCourseSrvSetCourseInvalidClient) Recv() (*CourseTplResponse, error) {
	m := new(CourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamCourseSrvClient) SetCourseValid(ctx context.Context, opts ...grpc.CallOption) (TeamCourseSrv_SetCourseValidClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TeamCourseSrv_serviceDesc.Streams[7], "/product.TeamCourseSrv/SetCourseValid", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamCourseSrvSetCourseValidClient{stream}
	return x, nil
}

type TeamCourseSrv_SetCourseValidClient interface {
	Send(*SetCourseStateRequest) error
	Recv() (*CourseTplResponse, error)
	grpc.ClientStream
}

type teamCourseSrvSetCourseValidClient struct {
	grpc.ClientStream
}

func (x *teamCourseSrvSetCourseValidClient) Send(m *SetCourseStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamCourseSrvSetCourseValidClient) Recv() (*CourseTplResponse, error) {
	m := new(CourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TeamCourseSrvServer is the server API for TeamCourseSrv service.
type TeamCourseSrvServer interface {
	// 新增团体课
	AddCourse(TeamCourseSrv_AddCourseServer) error
	// 编辑团体课
	EditCourse(TeamCourseSrv_EditCourseServer) error
	// 设置课程支持门店
	SetCourseShops(TeamCourseSrv_SetCourseShopsServer) error
	// 团体课详情
	GetCourseInfo(TeamCourseSrv_GetCourseInfoServer) error
	// 转入品牌团体课
	IntoBrandCourse(TeamCourseSrv_IntoBrandCourseServer) error
	// 删除团体课
	DelCourse(TeamCourseSrv_DelCourseServer) error
	// 团体课置为无效
	SetCourseInvalid(TeamCourseSrv_SetCourseInvalidServer) error
	// 团体课置为有效
	SetCourseValid(TeamCourseSrv_SetCourseValidServer) error
}

func RegisterTeamCourseSrvServer(s *grpc.Server, srv TeamCourseSrvServer) {
	s.RegisterService(&_TeamCourseSrv_serviceDesc, srv)
}

func _TeamCourseSrv_AddCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamCourseSrvServer).AddCourse(&teamCourseSrvAddCourseServer{stream})
}

type TeamCourseSrv_AddCourseServer interface {
	Send(*CourseTplResponse) error
	Recv() (*CourseTplRequest, error)
	grpc.ServerStream
}

type teamCourseSrvAddCourseServer struct {
	grpc.ServerStream
}

func (x *teamCourseSrvAddCourseServer) Send(m *CourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamCourseSrvAddCourseServer) Recv() (*CourseTplRequest, error) {
	m := new(CourseTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TeamCourseSrv_EditCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamCourseSrvServer).EditCourse(&teamCourseSrvEditCourseServer{stream})
}

type TeamCourseSrv_EditCourseServer interface {
	Send(*CourseTplResponse) error
	Recv() (*CourseTplRequest, error)
	grpc.ServerStream
}

type teamCourseSrvEditCourseServer struct {
	grpc.ServerStream
}

func (x *teamCourseSrvEditCourseServer) Send(m *CourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamCourseSrvEditCourseServer) Recv() (*CourseTplRequest, error) {
	m := new(CourseTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TeamCourseSrv_SetCourseShops_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamCourseSrvServer).SetCourseShops(&teamCourseSrvSetCourseShopsServer{stream})
}

type TeamCourseSrv_SetCourseShopsServer interface {
	Send(*CourseTplResponse) error
	Recv() (*SetCourseShopsRequest, error)
	grpc.ServerStream
}

type teamCourseSrvSetCourseShopsServer struct {
	grpc.ServerStream
}

func (x *teamCourseSrvSetCourseShopsServer) Send(m *CourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamCourseSrvSetCourseShopsServer) Recv() (*SetCourseShopsRequest, error) {
	m := new(SetCourseShopsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TeamCourseSrv_GetCourseInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamCourseSrvServer).GetCourseInfo(&teamCourseSrvGetCourseInfoServer{stream})
}

type TeamCourseSrv_GetCourseInfoServer interface {
	Send(*GetCourseTplResponse) error
	Recv() (*SetCourseStateRequest, error)
	grpc.ServerStream
}

type teamCourseSrvGetCourseInfoServer struct {
	grpc.ServerStream
}

func (x *teamCourseSrvGetCourseInfoServer) Send(m *GetCourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamCourseSrvGetCourseInfoServer) Recv() (*SetCourseStateRequest, error) {
	m := new(SetCourseStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TeamCourseSrv_IntoBrandCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamCourseSrvServer).IntoBrandCourse(&teamCourseSrvIntoBrandCourseServer{stream})
}

type TeamCourseSrv_IntoBrandCourseServer interface {
	Send(*CourseTplResponse) error
	Recv() (*SetCourseShopsRequest, error)
	grpc.ServerStream
}

type teamCourseSrvIntoBrandCourseServer struct {
	grpc.ServerStream
}

func (x *teamCourseSrvIntoBrandCourseServer) Send(m *CourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamCourseSrvIntoBrandCourseServer) Recv() (*SetCourseShopsRequest, error) {
	m := new(SetCourseShopsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TeamCourseSrv_DelCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamCourseSrvServer).DelCourse(&teamCourseSrvDelCourseServer{stream})
}

type TeamCourseSrv_DelCourseServer interface {
	Send(*CourseTplResponse) error
	Recv() (*SetCourseStateRequest, error)
	grpc.ServerStream
}

type teamCourseSrvDelCourseServer struct {
	grpc.ServerStream
}

func (x *teamCourseSrvDelCourseServer) Send(m *CourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamCourseSrvDelCourseServer) Recv() (*SetCourseStateRequest, error) {
	m := new(SetCourseStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TeamCourseSrv_SetCourseInvalid_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamCourseSrvServer).SetCourseInvalid(&teamCourseSrvSetCourseInvalidServer{stream})
}

type TeamCourseSrv_SetCourseInvalidServer interface {
	Send(*CourseTplResponse) error
	Recv() (*SetCourseStateRequest, error)
	grpc.ServerStream
}

type teamCourseSrvSetCourseInvalidServer struct {
	grpc.ServerStream
}

func (x *teamCourseSrvSetCourseInvalidServer) Send(m *CourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamCourseSrvSetCourseInvalidServer) Recv() (*SetCourseStateRequest, error) {
	m := new(SetCourseStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TeamCourseSrv_SetCourseValid_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamCourseSrvServer).SetCourseValid(&teamCourseSrvSetCourseValidServer{stream})
}

type TeamCourseSrv_SetCourseValidServer interface {
	Send(*CourseTplResponse) error
	Recv() (*SetCourseStateRequest, error)
	grpc.ServerStream
}

type teamCourseSrvSetCourseValidServer struct {
	grpc.ServerStream
}

func (x *teamCourseSrvSetCourseValidServer) Send(m *CourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamCourseSrvSetCourseValidServer) Recv() (*SetCourseStateRequest, error) {
	m := new(SetCourseStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TeamCourseSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.TeamCourseSrv",
	HandlerType: (*TeamCourseSrvServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddCourse",
			Handler:       _TeamCourseSrv_AddCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EditCourse",
			Handler:       _TeamCourseSrv_EditCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetCourseShops",
			Handler:       _TeamCourseSrv_SetCourseShops_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCourseInfo",
			Handler:       _TeamCourseSrv_GetCourseInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "IntoBrandCourse",
			Handler:       _TeamCourseSrv_IntoBrandCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DelCourse",
			Handler:       _TeamCourseSrv_DelCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetCourseInvalid",
			Handler:       _TeamCourseSrv_SetCourseInvalid_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetCourseValid",
			Handler:       _TeamCourseSrv_SetCourseValid_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "team_course_tpl.proto",
}

func init() {
	proto.RegisterFile("team_course_tpl.proto", fileDescriptor_team_course_tpl_aadb439e5ace7063)
}

var fileDescriptor_team_course_tpl_aadb439e5ace7063 = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5d, 0x6f, 0x23, 0x35,
	0x14, 0x55, 0xb6, 0xdb, 0x7c, 0xdc, 0x64, 0x26, 0xa9, 0x09, 0xec, 0x34, 0x08, 0x08, 0x95, 0x10,
	0x79, 0x28, 0xe9, 0x2a, 0x2b, 0xf1, 0xc2, 0xcb, 0xb6, 0x05, 0x76, 0x47, 0xac, 0x50, 0x99, 0x74,
	0x79, 0x40, 0x48, 0x83, 0x33, 0x36, 0x13, 0x8b, 0x19, 0x7b, 0xb0, 0x3d, 0x91, 0xf6, 0x3f, 0xf0,
	0xce, 0x7f, 0xe2, 0xff, 0xf0, 0x8e, 0xec, 0xf1, 0xe4, 0x6b, 0xbb, 0x6d, 0x51, 0xe1, 0xa1, 0xb2,
	0xee, 0x39, 0xd7, 0xc7, 0xf7, 0x5e, 0x1f, 0x4f, 0x03, 0xef, 0x6b, 0x8a, 0xf3, 0x38, 0x11, 0xa5,
	0x54, 0x34, 0xd6, 0x45, 0x36, 0x2d, 0xa4, 0xd0, 0x02, 0xb5, 0x0a, 0x29, 0x48, 0x99, 0xe8, 0x51,
	0x2f, 0x11, 0x79, 0x2e, 0x78, 0x05, 0x8f, 0x7a, 0x2c, 0xc7, 0x29, 0x55, 0x2e, 0x3a, 0x2e, 0xa8,
	0x54, 0x82, 0xe3, 0xec, 0xad, 0xfd, 0x23, 0xcf, 0xed, 0xaf, 0xc2, 0x93, 0xbf, 0x1f, 0xc3, 0xe0,
	0xd2, 0xe6, 0x5c, 0x17, 0x59, 0x44, 0x7f, 0x2f, 0xa9, 0xd2, 0xe8, 0x14, 0x9a, 0x4b, 0x8a, 0x09,
	0x95, 0x41, 0x63, 0xdc, 0x98, 0x74, 0x67, 0xc3, 0xa9, 0x3b, 0xeb, 0xd2, 0x2e, 0x2f, 0x2d, 0x17,
	0xb9, 0x1c, 0xf4, 0x21, 0x74, 0xdc, 0x29, 0x8c, 0x04, 0x8f, 0xc6, 0x8d, 0x89, 0x17, 0xb5, 0x2b,
	0x20, 0x24, 0xe8, 0x18, 0xda, 0x0b, 0x89, 0x39, 0x31, 0xdc, 0x81, 0xe5, 0x5a, 0x36, 0x0e, 0x09,
	0x7a, 0x02, 0x2d, 0xb5, 0x14, 0x85, 0x61, 0x1e, 0x5b, 0xa6, 0x69, 0xc2, 0x90, 0xa0, 0x4f, 0xa0,
	0xeb, 0x04, 0x39, 0xce, 0x69, 0x70, 0x38, 0x6e, 0x4c, 0x3a, 0x11, 0x54, 0xd0, 0xf7, 0x38, 0xa7,
	0xe8, 0x73, 0xe8, 0xbb, 0x84, 0x04, 0x6b, 0x9a, 0x0a, 0xf9, 0x26, 0x68, 0x5a, 0x05, 0xbf, 0x82,
	0x2f, 0x1d, 0x6a, 0x4a, 0xd3, 0x12, 0x33, 0x1e, 0x63, 0x96, 0x07, 0xad, 0xf1, 0x81, 0x29, 0xcd,
	0x02, 0xe7, 0x2c, 0x47, 0x23, 0x68, 0x93, 0x52, 0x62, 0xcd, 0x04, 0x0f, 0xda, 0x55, 0xd9, 0x75,
	0x6c, 0x37, 0xb2, 0x9c, 0xc6, 0x25, 0x67, 0x3a, 0xe8, 0x54, 0xa4, 0x01, 0x5e, 0x73, 0xa6, 0xd1,
	0x10, 0x0e, 0x0b, 0xc9, 0x12, 0x1a, 0x80, 0x25, 0xaa, 0x00, 0x9d, 0x02, 0xd4, 0x63, 0xc8, 0xd3,
	0xa0, 0x6b, 0x07, 0xe7, 0x4d, 0xdd, 0xb5, 0x84, 0x66, 0x89, 0xdc, 0x9c, 0xc2, 0x3c, 0x45, 0x63,
	0xe8, 0x12, 0xaa, 0x12, 0xc9, 0x0a, 0x7b, 0x7e, 0xcf, 0xf6, 0xb8, 0x0d, 0xa1, 0xcf, 0xc0, 0x57,
	0x5a, 0x52, 0x9e, 0xea, 0x65, 0x9c, 0xd1, 0x15, 0xcd, 0x02, 0xcf, 0x1e, 0xe7, 0xd5, 0xe8, 0x2b,
	0x03, 0x9a, 0x2e, 0x12, 0x9c, 0x09, 0xc9, 0xa8, 0x0a, 0x7c, 0x37, 0x7c, 0x17, 0xa3, 0xe7, 0xd0,
	0x2f, 0xca, 0x45, 0xc6, 0xd4, 0x32, 0x4e, 0x96, 0x98, 0x73, 0x9a, 0x05, 0xfd, 0x71, 0x63, 0xe2,
	0xcf, 0x9e, 0x4c, 0x6b, 0x17, 0x5c, 0x55, 0xfc, 0x65, 0x45, 0x47, 0x7e, 0xb1, 0x13, 0xa3, 0x2f,
	0xa1, 0xc7, 0x54, 0x8c, 0x57, 0x98, 0x65, 0x78, 0x91, 0xd1, 0x60, 0x60, 0xb7, 0xbf, 0x57, 0xfb,
	0x21, 0x54, 0xe7, 0x35, 0x15, 0x75, 0xd9, 0x26, 0x30, 0x57, 0x28, 0x0a, 0x2a, 0xb1, 0x16, 0xd2,
	0xdc, 0xef, 0x91, 0x2d, 0x0c, 0x6a, 0x28, 0x24, 0x27, 0xbf, 0xc0, 0xd1, 0x96, 0xed, 0x54, 0x21,
	0xb8, 0xa2, 0x68, 0x0a, 0x4d, 0xa5, 0xb1, 0x2e, 0x95, 0xf3, 0xdd, 0x07, 0xf5, 0x39, 0x17, 0xa5,
	0x62, 0x9c, 0x2a, 0x35, 0xb7, 0x6c, 0xe4, 0xb2, 0x6e, 0x75, 0xde, 0xc9, 0x9f, 0x87, 0x30, 0x7c,
	0x41, 0xf5, 0xff, 0x7b, 0xca, 0xbe, 0x57, 0x0f, 0xde, 0xf2, 0xea, 0x29, 0xa0, 0x3d, 0xaf, 0x6e,
	0x0c, 0x3f, 0xd8, 0xb5, 0x6b, 0x48, 0xd0, 0x53, 0x18, 0xee, 0x67, 0x6f, 0xbd, 0x01, 0xb4, 0x9b,
	0x6f, 0xf5, 0x67, 0xe0, 0xaf, 0x2d, 0x1e, 0x67, 0x4c, 0xe9, 0xa0, 0x39, 0x3e, 0x98, 0x74, 0x67,
	0xbd, 0xf5, 0x15, 0x5f, 0xe3, 0x34, 0xea, 0xd5, 0xae, 0x7f, 0xc5, 0x94, 0xde, 0x71, 0x7e, 0xeb,
	0x36, 0xe7, 0xb7, 0xdf, 0xe5, 0xfc, 0xce, 0xbb, 0x9d, 0x0f, 0xff, 0xce, 0xf9, 0xdd, 0xfb, 0x38,
	0xbf, 0x77, 0x97, 0xf3, 0xbd, 0x3d, 0xe7, 0xef, 0xfb, 0xd6, 0xbf, 0xa7, 0x6f, 0x3f, 0x85, 0x9e,
	0xfd, 0x26, 0x29, 0xaa, 0x35, 0xe3, 0xa9, 0x7d, 0x2e, 0x5e, 0xd4, 0x35, 0xd8, 0xbc, 0x82, 0xd0,
	0x73, 0x38, 0x52, 0x65, 0x51, 0x08, 0xa9, 0x63, 0x9b, 0x6a, 0x67, 0x3e, 0xb0, 0x33, 0x1f, 0xae,
	0x67, 0x3e, 0xaf, 0x32, 0xe6, 0x4b, 0x51, 0x44, 0x7d, 0xb5, 0x09, 0xcc, 0xf8, 0x67, 0x7f, 0x1c,
	0x82, 0x77, 0x4d, 0x71, 0x5e, 0x59, 0x73, 0x2e, 0x57, 0xe8, 0x5b, 0xe8, 0x9c, 0x13, 0x52, 0xc5,
	0xe8, 0x78, 0xad, 0xb2, 0xff, 0x61, 0x1e, 0x8d, 0x6e, 0xa2, 0x2a, 0x5b, 0x4f, 0x1a, 0x4f, 0x1b,
	0xe8, 0x05, 0xc0, 0x37, 0x84, 0xe9, 0x87, 0x0b, 0x5d, 0x81, 0x3f, 0xaf, 0xdf, 0x8e, 0xa9, 0x5b,
	0xa1, 0x8f, 0x37, 0xbd, 0xed, 0x10, 0xf7, 0x55, 0x8c, 0xc0, 0x5b, 0xbf, 0xc6, 0x90, 0xff, 0x2a,
	0x6e, 0x14, 0xd4, 0x58, 0xd3, 0x5a, 0xf0, 0xa3, 0x35, 0x7f, 0xd3, 0x2b, 0xb6, 0x9a, 0x3f, 0x40,
	0x3f, 0xe4, 0x5a, 0x5c, 0x98, 0x7f, 0x28, 0xae, 0xe7, 0x87, 0x96, 0xf9, 0x1d, 0x74, 0xbe, 0xa6,
	0xd9, 0x2d, 0x62, 0xdb, 0x25, 0xde, 0xdd, 0xf3, 0x60, 0xbe, 0xe9, 0x79, 0x85, 0x33, 0x46, 0x1e,
	0xac, 0xb9, 0x7d, 0x33, 0x3f, 0xfe, 0x17, 0x8a, 0x17, 0x2f, 0x7f, 0x7a, 0x96, 0x32, 0x9d, 0xe1,
	0xc5, 0x54, 0xe9, 0x37, 0x64, 0x9a, 0xf0, 0xb3, 0x52, 0x0b, 0xf3, 0xf7, 0x85, 0x22, 0xbf, 0x9d,
	0xa5, 0xe2, 0xcc, 0xfe, 0x52, 0x38, 0x73, 0x22, 0x5f, 0xb9, 0xf5, 0xaf, 0x47, 0x83, 0xd7, 0x5a,
	0x5c, 0x19, 0xea, 0xe7, 0xab, 0x0a, 0x5a, 0x34, 0x6d, 0xe6, 0xb3, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xfd, 0x6d, 0x87, 0x28, 0xbb, 0x08, 0x00, 0x00,
}
