// Code generated by protoc-gen-go. DO NOT EDIT.
// source: package_course.proto

package product // import "j7go/proto/product"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "go.7yes.com/j7f/proto/common"
import images "j7go/proto/images"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 新增不限课程课程包请求体
type AddUnlimitedPackageCourseRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 课程包私教课详情
	CourseTplInfo        *PackageCourseTplInfo `protobuf:"bytes,2,opt,name=course_tpl_info,json=courseTplInfo,proto3" json:"course_tpl_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AddUnlimitedPackageCourseRequest) Reset()         { *m = AddUnlimitedPackageCourseRequest{} }
func (m *AddUnlimitedPackageCourseRequest) String() string { return proto.CompactTextString(m) }
func (*AddUnlimitedPackageCourseRequest) ProtoMessage()    {}
func (*AddUnlimitedPackageCourseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{0}
}
func (m *AddUnlimitedPackageCourseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddUnlimitedPackageCourseRequest.Unmarshal(m, b)
}
func (m *AddUnlimitedPackageCourseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddUnlimitedPackageCourseRequest.Marshal(b, m, deterministic)
}
func (dst *AddUnlimitedPackageCourseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUnlimitedPackageCourseRequest.Merge(dst, src)
}
func (m *AddUnlimitedPackageCourseRequest) XXX_Size() int {
	return xxx_messageInfo_AddUnlimitedPackageCourseRequest.Size(m)
}
func (m *AddUnlimitedPackageCourseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUnlimitedPackageCourseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddUnlimitedPackageCourseRequest proto.InternalMessageInfo

func (m *AddUnlimitedPackageCourseRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddUnlimitedPackageCourseRequest) GetCourseTplInfo() *PackageCourseTplInfo {
	if m != nil {
		return m.CourseTplInfo
	}
	return nil
}

// 新增限制 || 固定课程课程包请求体
type AddLimitPackageCourseRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 课程包模板详情
	CourseTplInfo *PackageCourseTplInfo `protobuf:"bytes,2,opt,name=course_tpl_info,json=courseTplInfo,proto3" json:"course_tpl_info,omitempty"`
	// 课程包团体课课程详情
	CourseTeamInfo *PackageCourseTeamInfo `protobuf:"bytes,3,opt,name=course_team_info,json=courseTeamInfo,proto3" json:"course_team_info,omitempty"`
	// 课程包私教课课程详情
	CoursePersonalInfo   *PackageCoursePersonalInfo `protobuf:"bytes,4,opt,name=course_personal_info,json=coursePersonalInfo,proto3" json:"course_personal_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AddLimitPackageCourseRequest) Reset()         { *m = AddLimitPackageCourseRequest{} }
func (m *AddLimitPackageCourseRequest) String() string { return proto.CompactTextString(m) }
func (*AddLimitPackageCourseRequest) ProtoMessage()    {}
func (*AddLimitPackageCourseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{1}
}
func (m *AddLimitPackageCourseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddLimitPackageCourseRequest.Unmarshal(m, b)
}
func (m *AddLimitPackageCourseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddLimitPackageCourseRequest.Marshal(b, m, deterministic)
}
func (dst *AddLimitPackageCourseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLimitPackageCourseRequest.Merge(dst, src)
}
func (m *AddLimitPackageCourseRequest) XXX_Size() int {
	return xxx_messageInfo_AddLimitPackageCourseRequest.Size(m)
}
func (m *AddLimitPackageCourseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLimitPackageCourseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddLimitPackageCourseRequest proto.InternalMessageInfo

func (m *AddLimitPackageCourseRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddLimitPackageCourseRequest) GetCourseTplInfo() *PackageCourseTplInfo {
	if m != nil {
		return m.CourseTplInfo
	}
	return nil
}

func (m *AddLimitPackageCourseRequest) GetCourseTeamInfo() *PackageCourseTeamInfo {
	if m != nil {
		return m.CourseTeamInfo
	}
	return nil
}

func (m *AddLimitPackageCourseRequest) GetCoursePersonalInfo() *PackageCoursePersonalInfo {
	if m != nil {
		return m.CoursePersonalInfo
	}
	return nil
}

// 新增课程包响应体
type PackageCourseTplResponse struct {
	// 公共响应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 课程包ID
	PackageCourseId      uint32   `protobuf:"varint,2,opt,name=package_course_id,json=packageCourseId,proto3" json:"package_course_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageCourseTplResponse) Reset()         { *m = PackageCourseTplResponse{} }
func (m *PackageCourseTplResponse) String() string { return proto.CompactTextString(m) }
func (*PackageCourseTplResponse) ProtoMessage()    {}
func (*PackageCourseTplResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{2}
}
func (m *PackageCourseTplResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageCourseTplResponse.Unmarshal(m, b)
}
func (m *PackageCourseTplResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageCourseTplResponse.Marshal(b, m, deterministic)
}
func (dst *PackageCourseTplResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageCourseTplResponse.Merge(dst, src)
}
func (m *PackageCourseTplResponse) XXX_Size() int {
	return xxx_messageInfo_PackageCourseTplResponse.Size(m)
}
func (m *PackageCourseTplResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageCourseTplResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PackageCourseTplResponse proto.InternalMessageInfo

func (m *PackageCourseTplResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PackageCourseTplResponse) GetPackageCourseId() uint32 {
	if m != nil {
		return m.PackageCourseId
	}
	return 0
}

// 课程包模板详情
type PackageCourseTplInfo struct {
	// 品牌id
	BrandId uint32 `protobuf:"varint,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// 门店id
	ShopId uint32 `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// 课程包名称
	CourseName string `protobuf:"bytes,3,opt,name=course_name,json=courseName,proto3" json:"course_name,omitempty"`
	// 课程包售价
	Price uint32 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	// 课程包总价
	TotalPrice uint32 `protobuf:"varint,5,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	// 课程包总节数
	TotalTimes uint32 `protobuf:"varint,6,opt,name=total_times,json=totalTimes,proto3" json:"total_times,omitempty"`
	// 团体课总节数
	TeamTimes uint32 `protobuf:"varint,9,opt,name=team_times,json=teamTimes,proto3" json:"team_times,omitempty"`
	// 团课单价:分/节
	TeamUnitPrice uint32 `protobuf:"varint,10,opt,name=team_unit_price,json=teamUnitPrice,proto3" json:"team_unit_price,omitempty"`
	// 私教总节数
	Personal uint32 `protobuf:"varint,11,opt,name=personal,proto3" json:"personal,omitempty"`
	// 私教单价:分/节
	PersonalUnitPrice uint32 `protobuf:"varint,12,opt,name=personal_unit_price,json=personalUnitPrice,proto3" json:"personal_unit_price,omitempty"`
	// 开始售卖时间
	StartTime uint32 `protobuf:"varint,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 截止售卖时间
	EndTime uint32 `protobuf:"varint,14,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 有效时间/天
	ValidDays uint32 `protobuf:"varint,15,opt,name=valid_days,json=validDays,proto3" json:"valid_days,omitempty"`
	// 售卖方式 1-用户端售卖 2-线下售卖 3-支持所有售卖类型
	SaleMode SaleMode `protobuf:"varint,16,opt,name=sale_mode,json=saleMode,proto3,enum=product.SaleMode" json:"sale_mode,omitempty"`
	// 封面图片
	CourseImg *images.CommonAlbumImageRequest `protobuf:"bytes,17,opt,name=course_img,json=courseImg,proto3" json:"course_img,omitempty"`
	// 发布渠道 1-品牌 2-门店
	PublishChannel PublishChannel `protobuf:"varint,18,opt,name=publish_channel,json=publishChannel,proto3,enum=product.PublishChannel" json:"publish_channel,omitempty"`
	// 课程包简介
	Intro string `protobuf:"bytes,19,opt,name=intro,proto3" json:"intro,omitempty"`
	// 课程包备注
	Remarks              string   `protobuf:"bytes,20,opt,name=remarks,proto3" json:"remarks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageCourseTplInfo) Reset()         { *m = PackageCourseTplInfo{} }
func (m *PackageCourseTplInfo) String() string { return proto.CompactTextString(m) }
func (*PackageCourseTplInfo) ProtoMessage()    {}
func (*PackageCourseTplInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{3}
}
func (m *PackageCourseTplInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageCourseTplInfo.Unmarshal(m, b)
}
func (m *PackageCourseTplInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageCourseTplInfo.Marshal(b, m, deterministic)
}
func (dst *PackageCourseTplInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageCourseTplInfo.Merge(dst, src)
}
func (m *PackageCourseTplInfo) XXX_Size() int {
	return xxx_messageInfo_PackageCourseTplInfo.Size(m)
}
func (m *PackageCourseTplInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageCourseTplInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PackageCourseTplInfo proto.InternalMessageInfo

func (m *PackageCourseTplInfo) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *PackageCourseTplInfo) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *PackageCourseTplInfo) GetCourseName() string {
	if m != nil {
		return m.CourseName
	}
	return ""
}

func (m *PackageCourseTplInfo) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PackageCourseTplInfo) GetTotalPrice() uint32 {
	if m != nil {
		return m.TotalPrice
	}
	return 0
}

func (m *PackageCourseTplInfo) GetTotalTimes() uint32 {
	if m != nil {
		return m.TotalTimes
	}
	return 0
}

func (m *PackageCourseTplInfo) GetTeamTimes() uint32 {
	if m != nil {
		return m.TeamTimes
	}
	return 0
}

func (m *PackageCourseTplInfo) GetTeamUnitPrice() uint32 {
	if m != nil {
		return m.TeamUnitPrice
	}
	return 0
}

func (m *PackageCourseTplInfo) GetPersonal() uint32 {
	if m != nil {
		return m.Personal
	}
	return 0
}

func (m *PackageCourseTplInfo) GetPersonalUnitPrice() uint32 {
	if m != nil {
		return m.PersonalUnitPrice
	}
	return 0
}

func (m *PackageCourseTplInfo) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PackageCourseTplInfo) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *PackageCourseTplInfo) GetValidDays() uint32 {
	if m != nil {
		return m.ValidDays
	}
	return 0
}

func (m *PackageCourseTplInfo) GetSaleMode() SaleMode {
	if m != nil {
		return m.SaleMode
	}
	return SaleMode_SALE_INIT
}

func (m *PackageCourseTplInfo) GetCourseImg() *images.CommonAlbumImageRequest {
	if m != nil {
		return m.CourseImg
	}
	return nil
}

func (m *PackageCourseTplInfo) GetPublishChannel() PublishChannel {
	if m != nil {
		return m.PublishChannel
	}
	return PublishChannel_PUBLISH_CHANNEL_INIT
}

func (m *PackageCourseTplInfo) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *PackageCourseTplInfo) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

// 课程包私教课程
type PackageCoursePersonalInfo struct {
	// 私教课课程配置
	Courses              []*PackageCoursePersonalSetting `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *PackageCoursePersonalInfo) Reset()         { *m = PackageCoursePersonalInfo{} }
func (m *PackageCoursePersonalInfo) String() string { return proto.CompactTextString(m) }
func (*PackageCoursePersonalInfo) ProtoMessage()    {}
func (*PackageCoursePersonalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{4}
}
func (m *PackageCoursePersonalInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageCoursePersonalInfo.Unmarshal(m, b)
}
func (m *PackageCoursePersonalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageCoursePersonalInfo.Marshal(b, m, deterministic)
}
func (dst *PackageCoursePersonalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageCoursePersonalInfo.Merge(dst, src)
}
func (m *PackageCoursePersonalInfo) XXX_Size() int {
	return xxx_messageInfo_PackageCoursePersonalInfo.Size(m)
}
func (m *PackageCoursePersonalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageCoursePersonalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PackageCoursePersonalInfo proto.InternalMessageInfo

func (m *PackageCoursePersonalInfo) GetCourses() []*PackageCoursePersonalSetting {
	if m != nil {
		return m.Courses
	}
	return nil
}

// 课程包私教课程私教等级配置
type PackageCoursePersonalSetting struct {
	// 私教课课程id
	CourseId uint32 `protobuf:"varint,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// 私教课
	CoachLevelIds        []uint32 `protobuf:"varint,2,rep,packed,name=coach_level_ids,json=coachLevelIds,proto3" json:"coach_level_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageCoursePersonalSetting) Reset()         { *m = PackageCoursePersonalSetting{} }
func (m *PackageCoursePersonalSetting) String() string { return proto.CompactTextString(m) }
func (*PackageCoursePersonalSetting) ProtoMessage()    {}
func (*PackageCoursePersonalSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{5}
}
func (m *PackageCoursePersonalSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageCoursePersonalSetting.Unmarshal(m, b)
}
func (m *PackageCoursePersonalSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageCoursePersonalSetting.Marshal(b, m, deterministic)
}
func (dst *PackageCoursePersonalSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageCoursePersonalSetting.Merge(dst, src)
}
func (m *PackageCoursePersonalSetting) XXX_Size() int {
	return xxx_messageInfo_PackageCoursePersonalSetting.Size(m)
}
func (m *PackageCoursePersonalSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageCoursePersonalSetting.DiscardUnknown(m)
}

var xxx_messageInfo_PackageCoursePersonalSetting proto.InternalMessageInfo

func (m *PackageCoursePersonalSetting) GetCourseId() uint32 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *PackageCoursePersonalSetting) GetCoachLevelIds() []uint32 {
	if m != nil {
		return m.CoachLevelIds
	}
	return nil
}

// 课程包团体课课程
type PackageCourseTeamInfo struct {
	// 团体课课程
	CourseIds            []uint32 `protobuf:"varint,1,rep,packed,name=course_ids,json=courseIds,proto3" json:"course_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageCourseTeamInfo) Reset()         { *m = PackageCourseTeamInfo{} }
func (m *PackageCourseTeamInfo) String() string { return proto.CompactTextString(m) }
func (*PackageCourseTeamInfo) ProtoMessage()    {}
func (*PackageCourseTeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{6}
}
func (m *PackageCourseTeamInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageCourseTeamInfo.Unmarshal(m, b)
}
func (m *PackageCourseTeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageCourseTeamInfo.Marshal(b, m, deterministic)
}
func (dst *PackageCourseTeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageCourseTeamInfo.Merge(dst, src)
}
func (m *PackageCourseTeamInfo) XXX_Size() int {
	return xxx_messageInfo_PackageCourseTeamInfo.Size(m)
}
func (m *PackageCourseTeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageCourseTeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PackageCourseTeamInfo proto.InternalMessageInfo

func (m *PackageCourseTeamInfo) GetCourseIds() []uint32 {
	if m != nil {
		return m.CourseIds
	}
	return nil
}

// 修改不限课程课程包请求体
type EditUnlimitedPackageCourseRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 要修改的课程包id
	PackageCourseId uint32 `protobuf:"varint,2,opt,name=package_course_id,json=packageCourseId,proto3" json:"package_course_id,omitempty"`
	// 课程包私教课详情
	CourseTplInfo        *PackageCourseTplInfo `protobuf:"bytes,3,opt,name=course_tpl_info,json=courseTplInfo,proto3" json:"course_tpl_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EditUnlimitedPackageCourseRequest) Reset()         { *m = EditUnlimitedPackageCourseRequest{} }
func (m *EditUnlimitedPackageCourseRequest) String() string { return proto.CompactTextString(m) }
func (*EditUnlimitedPackageCourseRequest) ProtoMessage()    {}
func (*EditUnlimitedPackageCourseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{7}
}
func (m *EditUnlimitedPackageCourseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditUnlimitedPackageCourseRequest.Unmarshal(m, b)
}
func (m *EditUnlimitedPackageCourseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditUnlimitedPackageCourseRequest.Marshal(b, m, deterministic)
}
func (dst *EditUnlimitedPackageCourseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditUnlimitedPackageCourseRequest.Merge(dst, src)
}
func (m *EditUnlimitedPackageCourseRequest) XXX_Size() int {
	return xxx_messageInfo_EditUnlimitedPackageCourseRequest.Size(m)
}
func (m *EditUnlimitedPackageCourseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditUnlimitedPackageCourseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditUnlimitedPackageCourseRequest proto.InternalMessageInfo

func (m *EditUnlimitedPackageCourseRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EditUnlimitedPackageCourseRequest) GetPackageCourseId() uint32 {
	if m != nil {
		return m.PackageCourseId
	}
	return 0
}

func (m *EditUnlimitedPackageCourseRequest) GetCourseTplInfo() *PackageCourseTplInfo {
	if m != nil {
		return m.CourseTplInfo
	}
	return nil
}

// 修改限制 || 固定课程课程包请求体
type EditLimitPackageCourseRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 要修改的课程包id
	PackageCourseId uint32 `protobuf:"varint,2,opt,name=package_course_id,json=packageCourseId,proto3" json:"package_course_id,omitempty"`
	// 课程包模板详情
	CourseTplInfo *PackageCourseTplInfo `protobuf:"bytes,3,opt,name=course_tpl_info,json=courseTplInfo,proto3" json:"course_tpl_info,omitempty"`
	// 课程包团体课课程详情
	CourseTeamInfo *PackageCourseTeamInfo `protobuf:"bytes,4,opt,name=course_team_info,json=courseTeamInfo,proto3" json:"course_team_info,omitempty"`
	// 课程包私教课课程详情
	CoursePersonalInfo   *PackageCoursePersonalInfo `protobuf:"bytes,5,opt,name=course_personal_info,json=coursePersonalInfo,proto3" json:"course_personal_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *EditLimitPackageCourseRequest) Reset()         { *m = EditLimitPackageCourseRequest{} }
func (m *EditLimitPackageCourseRequest) String() string { return proto.CompactTextString(m) }
func (*EditLimitPackageCourseRequest) ProtoMessage()    {}
func (*EditLimitPackageCourseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_course_8425812e5c710bdb, []int{8}
}
func (m *EditLimitPackageCourseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditLimitPackageCourseRequest.Unmarshal(m, b)
}
func (m *EditLimitPackageCourseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditLimitPackageCourseRequest.Marshal(b, m, deterministic)
}
func (dst *EditLimitPackageCourseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditLimitPackageCourseRequest.Merge(dst, src)
}
func (m *EditLimitPackageCourseRequest) XXX_Size() int {
	return xxx_messageInfo_EditLimitPackageCourseRequest.Size(m)
}
func (m *EditLimitPackageCourseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditLimitPackageCourseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditLimitPackageCourseRequest proto.InternalMessageInfo

func (m *EditLimitPackageCourseRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EditLimitPackageCourseRequest) GetPackageCourseId() uint32 {
	if m != nil {
		return m.PackageCourseId
	}
	return 0
}

func (m *EditLimitPackageCourseRequest) GetCourseTplInfo() *PackageCourseTplInfo {
	if m != nil {
		return m.CourseTplInfo
	}
	return nil
}

func (m *EditLimitPackageCourseRequest) GetCourseTeamInfo() *PackageCourseTeamInfo {
	if m != nil {
		return m.CourseTeamInfo
	}
	return nil
}

func (m *EditLimitPackageCourseRequest) GetCoursePersonalInfo() *PackageCoursePersonalInfo {
	if m != nil {
		return m.CoursePersonalInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*AddUnlimitedPackageCourseRequest)(nil), "product.AddUnlimitedPackageCourseRequest")
	proto.RegisterType((*AddLimitPackageCourseRequest)(nil), "product.AddLimitPackageCourseRequest")
	proto.RegisterType((*PackageCourseTplResponse)(nil), "product.PackageCourseTplResponse")
	proto.RegisterType((*PackageCourseTplInfo)(nil), "product.PackageCourseTplInfo")
	proto.RegisterType((*PackageCoursePersonalInfo)(nil), "product.PackageCoursePersonalInfo")
	proto.RegisterType((*PackageCoursePersonalSetting)(nil), "product.PackageCoursePersonalSetting")
	proto.RegisterType((*PackageCourseTeamInfo)(nil), "product.PackageCourseTeamInfo")
	proto.RegisterType((*EditUnlimitedPackageCourseRequest)(nil), "product.EditUnlimitedPackageCourseRequest")
	proto.RegisterType((*EditLimitPackageCourseRequest)(nil), "product.EditLimitPackageCourseRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PackageCourseTplServerClient is the client API for PackageCourseTplServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PackageCourseTplServerClient interface {
	// 新增不限课程课程包
	AddUnlimitedPackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_AddUnlimitedPackageCourseClient, error)
	// 新增范围内课程课程包
	AddScopePackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_AddScopePackageCourseClient, error)
	// 新增固定课程课程包
	AddFixedPackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_AddFixedPackageCourseClient, error)
	// 修改不限课程课程包
	EditUnlimitedPackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_EditUnlimitedPackageCourseClient, error)
	// 修改范围内课程课程包
	EditScopePackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_EditScopePackageCourseClient, error)
	// 修改固定课程课程包
	EditFixedPackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_EditFixedPackageCourseClient, error)
}

type packageCourseTplServerClient struct {
	cc *grpc.ClientConn
}

func NewPackageCourseTplServerClient(cc *grpc.ClientConn) PackageCourseTplServerClient {
	return &packageCourseTplServerClient{cc}
}

func (c *packageCourseTplServerClient) AddUnlimitedPackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_AddUnlimitedPackageCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PackageCourseTplServer_serviceDesc.Streams[0], "/product.PackageCourseTplServer/AddUnlimitedPackageCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageCourseTplServerAddUnlimitedPackageCourseClient{stream}
	return x, nil
}

type PackageCourseTplServer_AddUnlimitedPackageCourseClient interface {
	Send(*AddUnlimitedPackageCourseRequest) error
	Recv() (*PackageCourseTplResponse, error)
	grpc.ClientStream
}

type packageCourseTplServerAddUnlimitedPackageCourseClient struct {
	grpc.ClientStream
}

func (x *packageCourseTplServerAddUnlimitedPackageCourseClient) Send(m *AddUnlimitedPackageCourseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageCourseTplServerAddUnlimitedPackageCourseClient) Recv() (*PackageCourseTplResponse, error) {
	m := new(PackageCourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageCourseTplServerClient) AddScopePackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_AddScopePackageCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PackageCourseTplServer_serviceDesc.Streams[1], "/product.PackageCourseTplServer/AddScopePackageCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageCourseTplServerAddScopePackageCourseClient{stream}
	return x, nil
}

type PackageCourseTplServer_AddScopePackageCourseClient interface {
	Send(*AddLimitPackageCourseRequest) error
	Recv() (*PackageCourseTplResponse, error)
	grpc.ClientStream
}

type packageCourseTplServerAddScopePackageCourseClient struct {
	grpc.ClientStream
}

func (x *packageCourseTplServerAddScopePackageCourseClient) Send(m *AddLimitPackageCourseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageCourseTplServerAddScopePackageCourseClient) Recv() (*PackageCourseTplResponse, error) {
	m := new(PackageCourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageCourseTplServerClient) AddFixedPackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_AddFixedPackageCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PackageCourseTplServer_serviceDesc.Streams[2], "/product.PackageCourseTplServer/AddFixedPackageCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageCourseTplServerAddFixedPackageCourseClient{stream}
	return x, nil
}

type PackageCourseTplServer_AddFixedPackageCourseClient interface {
	Send(*AddLimitPackageCourseRequest) error
	Recv() (*PackageCourseTplResponse, error)
	grpc.ClientStream
}

type packageCourseTplServerAddFixedPackageCourseClient struct {
	grpc.ClientStream
}

func (x *packageCourseTplServerAddFixedPackageCourseClient) Send(m *AddLimitPackageCourseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageCourseTplServerAddFixedPackageCourseClient) Recv() (*PackageCourseTplResponse, error) {
	m := new(PackageCourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageCourseTplServerClient) EditUnlimitedPackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_EditUnlimitedPackageCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PackageCourseTplServer_serviceDesc.Streams[3], "/product.PackageCourseTplServer/EditUnlimitedPackageCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageCourseTplServerEditUnlimitedPackageCourseClient{stream}
	return x, nil
}

type PackageCourseTplServer_EditUnlimitedPackageCourseClient interface {
	Send(*EditUnlimitedPackageCourseRequest) error
	Recv() (*PackageCourseTplResponse, error)
	grpc.ClientStream
}

type packageCourseTplServerEditUnlimitedPackageCourseClient struct {
	grpc.ClientStream
}

func (x *packageCourseTplServerEditUnlimitedPackageCourseClient) Send(m *EditUnlimitedPackageCourseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageCourseTplServerEditUnlimitedPackageCourseClient) Recv() (*PackageCourseTplResponse, error) {
	m := new(PackageCourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageCourseTplServerClient) EditScopePackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_EditScopePackageCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PackageCourseTplServer_serviceDesc.Streams[4], "/product.PackageCourseTplServer/EditScopePackageCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageCourseTplServerEditScopePackageCourseClient{stream}
	return x, nil
}

type PackageCourseTplServer_EditScopePackageCourseClient interface {
	Send(*EditLimitPackageCourseRequest) error
	Recv() (*PackageCourseTplResponse, error)
	grpc.ClientStream
}

type packageCourseTplServerEditScopePackageCourseClient struct {
	grpc.ClientStream
}

func (x *packageCourseTplServerEditScopePackageCourseClient) Send(m *EditLimitPackageCourseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageCourseTplServerEditScopePackageCourseClient) Recv() (*PackageCourseTplResponse, error) {
	m := new(PackageCourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageCourseTplServerClient) EditFixedPackageCourse(ctx context.Context, opts ...grpc.CallOption) (PackageCourseTplServer_EditFixedPackageCourseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PackageCourseTplServer_serviceDesc.Streams[5], "/product.PackageCourseTplServer/EditFixedPackageCourse", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageCourseTplServerEditFixedPackageCourseClient{stream}
	return x, nil
}

type PackageCourseTplServer_EditFixedPackageCourseClient interface {
	Send(*EditLimitPackageCourseRequest) error
	Recv() (*PackageCourseTplResponse, error)
	grpc.ClientStream
}

type packageCourseTplServerEditFixedPackageCourseClient struct {
	grpc.ClientStream
}

func (x *packageCourseTplServerEditFixedPackageCourseClient) Send(m *EditLimitPackageCourseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageCourseTplServerEditFixedPackageCourseClient) Recv() (*PackageCourseTplResponse, error) {
	m := new(PackageCourseTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackageCourseTplServerServer is the server API for PackageCourseTplServer service.
type PackageCourseTplServerServer interface {
	// 新增不限课程课程包
	AddUnlimitedPackageCourse(PackageCourseTplServer_AddUnlimitedPackageCourseServer) error
	// 新增范围内课程课程包
	AddScopePackageCourse(PackageCourseTplServer_AddScopePackageCourseServer) error
	// 新增固定课程课程包
	AddFixedPackageCourse(PackageCourseTplServer_AddFixedPackageCourseServer) error
	// 修改不限课程课程包
	EditUnlimitedPackageCourse(PackageCourseTplServer_EditUnlimitedPackageCourseServer) error
	// 修改范围内课程课程包
	EditScopePackageCourse(PackageCourseTplServer_EditScopePackageCourseServer) error
	// 修改固定课程课程包
	EditFixedPackageCourse(PackageCourseTplServer_EditFixedPackageCourseServer) error
}

func RegisterPackageCourseTplServerServer(s *grpc.Server, srv PackageCourseTplServerServer) {
	s.RegisterService(&_PackageCourseTplServer_serviceDesc, srv)
}

func _PackageCourseTplServer_AddUnlimitedPackageCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageCourseTplServerServer).AddUnlimitedPackageCourse(&packageCourseTplServerAddUnlimitedPackageCourseServer{stream})
}

type PackageCourseTplServer_AddUnlimitedPackageCourseServer interface {
	Send(*PackageCourseTplResponse) error
	Recv() (*AddUnlimitedPackageCourseRequest, error)
	grpc.ServerStream
}

type packageCourseTplServerAddUnlimitedPackageCourseServer struct {
	grpc.ServerStream
}

func (x *packageCourseTplServerAddUnlimitedPackageCourseServer) Send(m *PackageCourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageCourseTplServerAddUnlimitedPackageCourseServer) Recv() (*AddUnlimitedPackageCourseRequest, error) {
	m := new(AddUnlimitedPackageCourseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PackageCourseTplServer_AddScopePackageCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageCourseTplServerServer).AddScopePackageCourse(&packageCourseTplServerAddScopePackageCourseServer{stream})
}

type PackageCourseTplServer_AddScopePackageCourseServer interface {
	Send(*PackageCourseTplResponse) error
	Recv() (*AddLimitPackageCourseRequest, error)
	grpc.ServerStream
}

type packageCourseTplServerAddScopePackageCourseServer struct {
	grpc.ServerStream
}

func (x *packageCourseTplServerAddScopePackageCourseServer) Send(m *PackageCourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageCourseTplServerAddScopePackageCourseServer) Recv() (*AddLimitPackageCourseRequest, error) {
	m := new(AddLimitPackageCourseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PackageCourseTplServer_AddFixedPackageCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageCourseTplServerServer).AddFixedPackageCourse(&packageCourseTplServerAddFixedPackageCourseServer{stream})
}

type PackageCourseTplServer_AddFixedPackageCourseServer interface {
	Send(*PackageCourseTplResponse) error
	Recv() (*AddLimitPackageCourseRequest, error)
	grpc.ServerStream
}

type packageCourseTplServerAddFixedPackageCourseServer struct {
	grpc.ServerStream
}

func (x *packageCourseTplServerAddFixedPackageCourseServer) Send(m *PackageCourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageCourseTplServerAddFixedPackageCourseServer) Recv() (*AddLimitPackageCourseRequest, error) {
	m := new(AddLimitPackageCourseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PackageCourseTplServer_EditUnlimitedPackageCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageCourseTplServerServer).EditUnlimitedPackageCourse(&packageCourseTplServerEditUnlimitedPackageCourseServer{stream})
}

type PackageCourseTplServer_EditUnlimitedPackageCourseServer interface {
	Send(*PackageCourseTplResponse) error
	Recv() (*EditUnlimitedPackageCourseRequest, error)
	grpc.ServerStream
}

type packageCourseTplServerEditUnlimitedPackageCourseServer struct {
	grpc.ServerStream
}

func (x *packageCourseTplServerEditUnlimitedPackageCourseServer) Send(m *PackageCourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageCourseTplServerEditUnlimitedPackageCourseServer) Recv() (*EditUnlimitedPackageCourseRequest, error) {
	m := new(EditUnlimitedPackageCourseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PackageCourseTplServer_EditScopePackageCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageCourseTplServerServer).EditScopePackageCourse(&packageCourseTplServerEditScopePackageCourseServer{stream})
}

type PackageCourseTplServer_EditScopePackageCourseServer interface {
	Send(*PackageCourseTplResponse) error
	Recv() (*EditLimitPackageCourseRequest, error)
	grpc.ServerStream
}

type packageCourseTplServerEditScopePackageCourseServer struct {
	grpc.ServerStream
}

func (x *packageCourseTplServerEditScopePackageCourseServer) Send(m *PackageCourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageCourseTplServerEditScopePackageCourseServer) Recv() (*EditLimitPackageCourseRequest, error) {
	m := new(EditLimitPackageCourseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PackageCourseTplServer_EditFixedPackageCourse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageCourseTplServerServer).EditFixedPackageCourse(&packageCourseTplServerEditFixedPackageCourseServer{stream})
}

type PackageCourseTplServer_EditFixedPackageCourseServer interface {
	Send(*PackageCourseTplResponse) error
	Recv() (*EditLimitPackageCourseRequest, error)
	grpc.ServerStream
}

type packageCourseTplServerEditFixedPackageCourseServer struct {
	grpc.ServerStream
}

func (x *packageCourseTplServerEditFixedPackageCourseServer) Send(m *PackageCourseTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageCourseTplServerEditFixedPackageCourseServer) Recv() (*EditLimitPackageCourseRequest, error) {
	m := new(EditLimitPackageCourseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PackageCourseTplServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.PackageCourseTplServer",
	HandlerType: (*PackageCourseTplServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddUnlimitedPackageCourse",
			Handler:       _PackageCourseTplServer_AddUnlimitedPackageCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddScopePackageCourse",
			Handler:       _PackageCourseTplServer_AddScopePackageCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddFixedPackageCourse",
			Handler:       _PackageCourseTplServer_AddFixedPackageCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EditUnlimitedPackageCourse",
			Handler:       _PackageCourseTplServer_EditUnlimitedPackageCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EditScopePackageCourse",
			Handler:       _PackageCourseTplServer_EditScopePackageCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EditFixedPackageCourse",
			Handler:       _PackageCourseTplServer_EditFixedPackageCourse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "package_course.proto",
}

func init() {
	proto.RegisterFile("package_course.proto", fileDescriptor_package_course_8425812e5c710bdb)
}

var fileDescriptor_package_course_8425812e5c710bdb = []byte{
	// 906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0x9d, 0xda, 0x8e, 0x4f, 0xe2, 0x38, 0x99, 0xba, 0xe9, 0xc6, 0xd4, 0x34, 0x5d, 0xa9,
	0x55, 0xa8, 0x60, 0x83, 0x52, 0x89, 0x1b, 0x24, 0x20, 0x0d, 0x45, 0xb1, 0x54, 0x90, 0xb5, 0x4e,
	0x6e, 0x50, 0xa5, 0xd5, 0x78, 0x67, 0x6a, 0x8f, 0xb2, 0x3b, 0xb3, 0xec, 0xcc, 0x46, 0xe4, 0x31,
	0xb8, 0x82, 0xf7, 0xe0, 0x15, 0xb8, 0xe2, 0x29, 0x78, 0x14, 0x34, 0x3f, 0xeb, 0x9f, 0x60, 0xb7,
	0x94, 0x5a, 0xa8, 0x17, 0x91, 0x73, 0xce, 0x77, 0xe6, 0xfb, 0xce, 0x9c, 0x39, 0x67, 0x66, 0xa1,
	0x93, 0xe1, 0xf8, 0x0a, 0x8f, 0x69, 0x14, 0x8b, 0x22, 0x97, 0x34, 0xc8, 0x72, 0xa1, 0x04, 0x6a,
	0x64, 0xb9, 0x20, 0x45, 0xac, 0xba, 0xdb, 0xb1, 0x48, 0x53, 0xc1, 0xad, 0xbb, 0xbb, 0xcd, 0x52,
	0x3c, 0xa6, 0xd2, 0x59, 0x2d, 0x17, 0x64, 0x4d, 0xff, 0xd7, 0x0a, 0x1c, 0x9e, 0x12, 0x72, 0xc9,
	0x13, 0x96, 0x32, 0x45, 0xc9, 0xc0, 0x12, 0x9f, 0x19, 0xde, 0x90, 0xfe, 0x54, 0x50, 0xa9, 0xd0,
	0xa7, 0x50, 0x9f, 0x50, 0x4c, 0x68, 0xee, 0x55, 0x0e, 0x2b, 0x47, 0x5b, 0x27, 0x9d, 0xc0, 0x09,
	0x9c, 0x99, 0x9f, 0x73, 0x83, 0x85, 0x2e, 0x06, 0xbd, 0x80, 0xb6, 0x4d, 0x2b, 0x52, 0x59, 0x12,
	0x31, 0xfe, 0x5a, 0x78, 0x55, 0xb3, 0xac, 0x17, 0x94, 0xda, 0x0b, 0x2a, 0x17, 0x59, 0xd2, 0xe7,
	0xaf, 0x45, 0xd8, 0x8a, 0xe7, 0x4d, 0xff, 0xf7, 0x2a, 0x3c, 0x38, 0x25, 0xe4, 0xa5, 0xce, 0xeb,
	0x83, 0xc9, 0x0a, 0x9d, 0xc3, 0x6e, 0x49, 0x43, 0x71, 0x6a, 0x79, 0x36, 0x0c, 0xcf, 0xc7, 0x2b,
	0x78, 0x28, 0x4e, 0x0d, 0xd1, 0x4e, 0xbc, 0x60, 0xa3, 0x0b, 0xe8, 0x38, 0xa6, 0x8c, 0xe6, 0x52,
	0x70, 0xec, 0xb2, 0xba, 0x63, 0xd8, 0xfc, 0xe5, 0x6c, 0x03, 0x17, 0x6a, 0x18, 0x51, 0xfc, 0x0f,
	0x9f, 0x7f, 0x0d, 0xde, 0xed, 0x6d, 0x84, 0x54, 0x66, 0x82, 0x4b, 0x8a, 0x02, 0xa8, 0x4b, 0x85,
	0x55, 0x21, 0x5d, 0xc1, 0xf6, 0xcb, 0x82, 0x3d, 0x2f, 0x24, 0xe3, 0x54, 0xca, 0xa1, 0x41, 0x43,
	0x17, 0x85, 0x9e, 0xc2, 0xde, 0x62, 0x9f, 0x45, 0x8c, 0x98, 0xa2, 0xb5, 0xc2, 0x76, 0x36, 0x2f,
	0xd2, 0x27, 0xfe, 0x2f, 0x35, 0xe8, 0x2c, 0xab, 0x1f, 0x3a, 0x80, 0xcd, 0x51, 0x8e, 0x39, 0xd1,
	0x6b, 0x2b, 0x66, 0x6d, 0xc3, 0xd8, 0x7d, 0x82, 0xee, 0x43, 0x43, 0x4e, 0x44, 0x36, 0x63, 0xad,
	0x6b, 0xb3, 0x4f, 0xd0, 0x43, 0xd8, 0x72, 0x82, 0x1c, 0xa7, 0xd4, 0xd4, 0xb7, 0x19, 0x82, 0x75,
	0xfd, 0x80, 0x53, 0x8a, 0x3a, 0x50, 0xcb, 0x72, 0x16, 0x53, 0x53, 0xac, 0x56, 0x68, 0x0d, 0xbd,
	0x4c, 0x09, 0x85, 0x93, 0xc8, 0x62, 0x35, 0x83, 0x81, 0x71, 0x0d, 0x16, 0x03, 0x14, 0x4b, 0xa9,
	0xf4, 0xea, 0x73, 0x01, 0x17, 0xda, 0x83, 0x7a, 0x00, 0xe6, 0x58, 0x2d, 0xde, 0x34, 0x78, 0x53,
	0x7b, 0x2c, 0xfc, 0x04, 0xda, 0x06, 0x2e, 0x38, 0x53, 0x4e, 0x04, 0x4c, 0x4c, 0x4b, 0xbb, 0x2f,
	0x39, 0x53, 0x56, 0xa7, 0x0b, 0x9b, 0xe5, 0x99, 0x7a, 0x5b, 0x26, 0x60, 0x6a, 0xa3, 0x00, 0xee,
	0x4e, 0xcf, 0x7b, 0x8e, 0x67, 0xdb, 0x84, 0xed, 0x95, 0xd0, 0x8c, 0xab, 0x07, 0x20, 0x15, 0xce,
	0x95, 0xc9, 0xc9, 0x6b, 0xd9, 0x94, 0x8c, 0x47, 0xe7, 0xa4, 0xcb, 0x4b, 0x39, 0xb1, 0xe0, 0x8e,
	0x2d, 0x2f, 0xe5, 0xc4, 0x40, 0x3d, 0x80, 0x6b, 0x9c, 0x30, 0x12, 0x11, 0x7c, 0x23, 0xbd, 0xb6,
	0x5d, 0x69, 0x3c, 0xdf, 0xe2, 0x1b, 0x89, 0x02, 0x68, 0x4a, 0x9c, 0xd0, 0x28, 0x15, 0x84, 0x7a,
	0xbb, 0x87, 0x95, 0xa3, 0x9d, 0x93, 0xbd, 0x69, 0xd3, 0x0d, 0x71, 0x42, 0xbf, 0x17, 0x84, 0x86,
	0x9b, 0xd2, 0xfd, 0x87, 0xbe, 0x02, 0x28, 0xbb, 0x20, 0x1d, 0x7b, 0x7b, 0xa6, 0x83, 0x1e, 0x06,
	0xee, 0x6e, 0xb1, 0x23, 0x77, 0x9a, 0x8c, 0x8a, 0xb4, 0xaf, 0x3d, 0x6e, 0x46, 0xc3, 0xa6, 0x5d,
	0xd2, 0x4f, 0xc7, 0xe8, 0x1b, 0x68, 0x67, 0xc5, 0x28, 0x61, 0x72, 0x12, 0xc5, 0x13, 0xcc, 0x39,
	0x4d, 0x3c, 0x64, 0x54, 0xef, 0xcf, 0x5a, 0xdd, 0xe2, 0x67, 0x16, 0x0e, 0x77, 0xb2, 0x05, 0x5b,
	0x9f, 0x3a, 0xe3, 0x2a, 0x17, 0xde, 0x5d, 0xd3, 0x10, 0xd6, 0x40, 0x1e, 0x34, 0x72, 0x9a, 0xe2,
	0xfc, 0x4a, 0x7a, 0x1d, 0xe3, 0x2f, 0x4d, 0xff, 0x15, 0x1c, 0xac, 0x1c, 0x1e, 0xf4, 0x35, 0x34,
	0x6c, 0x6e, 0x7a, 0x1a, 0x36, 0x8e, 0xb6, 0x4e, 0x1e, 0xbf, 0x79, 0xe2, 0x86, 0x54, 0x29, 0xc6,
	0xc7, 0x61, 0xb9, 0xca, 0x8f, 0xe1, 0xc1, 0x9b, 0x02, 0xd1, 0x47, 0xd0, 0x9c, 0x4d, 0x8d, 0xed,
	0xfc, 0x4d, 0x57, 0x0d, 0xa2, 0x3b, 0x29, 0x16, 0x38, 0x9e, 0x44, 0x09, 0xbd, 0xa6, 0x49, 0xc4,
	0x88, 0xf4, 0xaa, 0x87, 0x1b, 0xba, 0x93, 0x8c, 0xfb, 0xa5, 0xf6, 0xf6, 0x89, 0xf4, 0xbf, 0x80,
	0x7b, 0x4b, 0x6f, 0x13, 0x7d, 0xb8, 0x53, 0x76, 0xbb, 0x83, 0xd6, 0xb4, 0xd8, 0x44, 0xfa, 0x7f,
	0x54, 0xe0, 0xd1, 0x0b, 0xc2, 0xd4, 0x3a, 0xef, 0xf5, 0x77, 0xb8, 0x0e, 0x96, 0xdd, 0xb6, 0x1b,
	0xff, 0xe1, 0x0d, 0xf8, 0xab, 0x0a, 0x3d, 0xbd, 0x8d, 0x75, 0x3d, 0x02, 0xff, 0xff, 0x16, 0x96,
	0x3e, 0x18, 0x77, 0xd6, 0xfa, 0x60, 0xd4, 0xde, 0xe7, 0xc1, 0x38, 0xf9, 0xad, 0x06, 0xfb, 0xb7,
	0xf7, 0x31, 0xa4, 0xf9, 0x35, 0xcd, 0x51, 0x0a, 0x07, 0x2b, 0x3f, 0x0d, 0xd0, 0x27, 0x53, 0xbd,
	0xb7, 0x7d, 0x3e, 0x74, 0x1f, 0xad, 0x2c, 0x58, 0xf9, 0x34, 0x1d, 0x55, 0x3e, 0xaf, 0x20, 0x0a,
	0xf7, 0x4e, 0x09, 0x19, 0xc6, 0x22, 0xa3, 0x8b, 0x52, 0x8f, 0xe7, 0xa5, 0x56, 0xb6, 0xc2, 0xbb,
	0xc9, 0x7c, 0xc7, 0x7e, 0xbe, 0xbd, 0xa3, 0xf5, 0xca, 0x08, 0xe8, 0xae, 0x1e, 0x40, 0xf4, 0x74,
	0x4a, 0xf2, 0xd6, 0x29, 0xfd, 0xb7, 0x82, 0x63, 0xd8, 0xd7, 0x5c, 0x4b, 0xea, 0xf7, 0x64, 0x41,
	0xec, 0xbd, 0x77, 0xe6, 0x84, 0x96, 0x54, 0x70, 0xbd, 0x42, 0xcf, 0xcf, 0x7f, 0x7c, 0x36, 0x66,
	0x2a, 0xc1, 0xa3, 0x40, 0xaa, 0x1b, 0x12, 0xc4, 0xfc, 0xb8, 0x50, 0x42, 0xff, 0x7d, 0x26, 0xc9,
	0xd5, 0xf1, 0x58, 0x1c, 0x9b, 0x4f, 0xd8, 0x63, 0xc7, 0xf5, 0xa5, 0xfb, 0xfd, 0xb3, 0xba, 0x7b,
	0xa9, 0xc4, 0x40, 0x43, 0xaf, 0x06, 0xd6, 0x35, 0xaa, 0x9b, 0xc8, 0x67, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x97, 0xad, 0x02, 0x15, 0x38, 0x0b, 0x00, 0x00,
}
