// Code generated by protoc-gen-go. DO NOT EDIT.
// source: member_card_tpl.proto

package product // import "j7go/proto/product"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/joselee214/j7f/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 会员卡类型
type CardType int32

const (
	CardType_CARD_TYPE_INIT CardType = 0
	// 次卡
	CardType_CARD_TYPE_TIMES CardType = 1
	// 期限卡
	CardType_CARD_TYPE_TERM CardType = 2
)

var CardType_name = map[int32]string{
	0: "CARD_TYPE_INIT",
	1: "CARD_TYPE_TIMES",
	2: "CARD_TYPE_TERM",
}
var CardType_value = map[string]int32{
	"CARD_TYPE_INIT":  0,
	"CARD_TYPE_TIMES": 1,
	"CARD_TYPE_TERM":  2,
}

func (x CardType) String() string {
	return proto.EnumName(CardType_name, int32(x))
}
func (CardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{0}
}

// 会员卡期限类型
type CardUnit int32

const (
	CardUnit_CARD_UNIT_INIT CardUnit = 0
	// 次
	CardUnit_CARD_UNIT_TIMES CardUnit = 1
	// 天
	CardUnit_CARD_UNIT_DAY CardUnit = 2
	// 月
	CardUnit_CARD_UNIT_MONTH CardUnit = 3
	// 年
	CardUnit_CARD_UNIT_YEAR CardUnit = 4
)

var CardUnit_name = map[int32]string{
	0: "CARD_UNIT_INIT",
	1: "CARD_UNIT_TIMES",
	2: "CARD_UNIT_DAY",
	3: "CARD_UNIT_MONTH",
	4: "CARD_UNIT_YEAR",
}
var CardUnit_value = map[string]int32{
	"CARD_UNIT_INIT":  0,
	"CARD_UNIT_TIMES": 1,
	"CARD_UNIT_DAY":   2,
	"CARD_UNIT_MONTH": 3,
	"CARD_UNIT_YEAR":  4,
}

func (x CardUnit) String() string {
	return proto.EnumName(CardUnit_name, int32(x))
}
func (CardUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{1}
}

// 入场方式
type AdmissionRange int32

const (
	AdmissionRange_ADMISSION_RANGE_INIT AdmissionRange = 0
	// 单店
	AdmissionRange_ADMISSION_SINGLE_SHOP AdmissionRange = 1
	// 多店
	AdmissionRange_ADMISSION_MUCH_SHOP AdmissionRange = 2
	// 全店
	AdmissionRange_ADMISSION_ALL_SHOP AdmissionRange = 3
)

var AdmissionRange_name = map[int32]string{
	0: "ADMISSION_RANGE_INIT",
	1: "ADMISSION_SINGLE_SHOP",
	2: "ADMISSION_MUCH_SHOP",
	3: "ADMISSION_ALL_SHOP",
}
var AdmissionRange_value = map[string]int32{
	"ADMISSION_RANGE_INIT":  0,
	"ADMISSION_SINGLE_SHOP": 1,
	"ADMISSION_MUCH_SHOP":   2,
	"ADMISSION_ALL_SHOP":    3,
}

func (x AdmissionRange) String() string {
	return proto.EnumName(AdmissionRange_name, int32(x))
}
func (AdmissionRange) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{2}
}

// 转让单位
type TransferUnit int32

const (
	TransferUnit_UNIT_INIT TransferUnit = 0
	// 百分比
	TransferUnit_UNIT_PERCENTAGE TransferUnit = 1
	// 金额
	TransferUnit_UNIT_MONEY TransferUnit = 2
)

var TransferUnit_name = map[int32]string{
	0: "UNIT_INIT",
	1: "UNIT_PERCENTAGE",
	2: "UNIT_MONEY",
}
var TransferUnit_value = map[string]int32{
	"UNIT_INIT":       0,
	"UNIT_PERCENTAGE": 1,
	"UNIT_MONEY":      2,
}

func (x TransferUnit) String() string {
	return proto.EnumName(TransferUnit_name, int32(x))
}
func (TransferUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{3}
}

// 约课权益
type CourseInterests int32

const (
	// 初始化，无意义
	CourseInterests_COURSE_INTERESTS_INIT CourseInterests = 0
	// 无
	CourseInterests_COURSE_INTERESTS_NONE CourseInterests = 1
	// 全部团体课
	CourseInterests_COURSE_INTERESTS_ALL_TEAM_COURSE CourseInterests = 2
	// 全部私教课
	CourseInterests_COURSE_INTERESTS_ALL_PERSONAL_COURSE CourseInterests = 3
	// 指定课程
	CourseInterests_COURSE_INTERESTS_SPECIFIC_COURSE CourseInterests = 4
	// 全部课程
	CourseInterests_COURSE_INTERESTS_ALL_COURSE CourseInterests = 5
)

var CourseInterests_name = map[int32]string{
	0: "COURSE_INTERESTS_INIT",
	1: "COURSE_INTERESTS_NONE",
	2: "COURSE_INTERESTS_ALL_TEAM_COURSE",
	3: "COURSE_INTERESTS_ALL_PERSONAL_COURSE",
	4: "COURSE_INTERESTS_SPECIFIC_COURSE",
	5: "COURSE_INTERESTS_ALL_COURSE",
}
var CourseInterests_value = map[string]int32{
	"COURSE_INTERESTS_INIT":                0,
	"COURSE_INTERESTS_NONE":                1,
	"COURSE_INTERESTS_ALL_TEAM_COURSE":     2,
	"COURSE_INTERESTS_ALL_PERSONAL_COURSE": 3,
	"COURSE_INTERESTS_SPECIFIC_COURSE":     4,
	"COURSE_INTERESTS_ALL_COURSE":          5,
}

func (x CourseInterests) String() string {
	return proto.EnumName(CourseInterests_name, int32(x))
}
func (CourseInterests) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{4}
}

// 入场时段type
type ShopCardAdmissionTime int32

const (
	// 初始化，无意义
	ShopCardAdmissionTime_CARD_INOUT_TIME_INIT ShopCardAdmissionTime = 0
	// 不限制
	ShopCardAdmissionTime_CARD_INOUT_TIME_UNLIMITED ShopCardAdmissionTime = 1
	// 自定义
	ShopCardAdmissionTime_CARD_INOUT_TIME_LIMIT ShopCardAdmissionTime = 2
)

var ShopCardAdmissionTime_name = map[int32]string{
	0: "CARD_INOUT_TIME_INIT",
	1: "CARD_INOUT_TIME_UNLIMITED",
	2: "CARD_INOUT_TIME_LIMIT",
}
var ShopCardAdmissionTime_value = map[string]int32{
	"CARD_INOUT_TIME_INIT":      0,
	"CARD_INOUT_TIME_UNLIMITED": 1,
	"CARD_INOUT_TIME_LIMIT":     2,
}

func (x ShopCardAdmissionTime) String() string {
	return proto.EnumName(ShopCardAdmissionTime_name, int32(x))
}
func (ShopCardAdmissionTime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{5}
}

// 会员卡请求体
type MemberCardTplRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 会员卡ID，仅更新时使用
	CardId uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 品牌ID， 仅新增时使用
	BrandId uint32 `protobuf:"varint,3,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// 场馆ID，仅新增时使用
	ShopId uint32 `protobuf:"varint,4,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// 会员卡类型1-次卡 2-期限卡，仅新增时使用
	CardType CardType `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3,enum=product.CardType" json:"card_type,omitempty"`
	// 会员卡名称，仅新增时使用
	CardName string `protobuf:"bytes,6,opt,name=card_name,json=cardName,proto3" json:"card_name,omitempty"`
	// 支持入场范围 1-单店 2-多店 3-全店
	AdmissionRange AdmissionRange `protobuf:"varint,7,opt,name=admission_range,json=admissionRange,proto3,enum=product.AdmissionRange" json:"admission_range,omitempty"`
	// 价格设置类型 1-统一定价 2-门店定价
	PriceSetting SetPriceType `protobuf:"varint,8,opt,name=price_setting,json=priceSetting,proto3,enum=product.SetPriceType" json:"price_setting,omitempty"`
	// 支持售卖场馆类型 1-全部门店 2-指定门店
	SupportSales SupportSales `protobuf:"varint,9,opt,name=support_sales,json=supportSales,proto3,enum=product.SupportSales" json:"support_sales,omitempty"`
	// 开始售卖时间
	StartTime uint32 `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束售卖时间
	EndTime uint32 `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 支持转让 0-不支持 1-支持
	IsTransfer common.IsAvailable `protobuf:"varint,13,opt,name=is_transfer,json=isTransfer,proto3,enum=common.IsAvailable" json:"is_transfer,omitempty"`
	// 转让单位 1-百分比 2-金额
	TransferUnit TransferUnit `protobuf:"varint,14,opt,name=transfer_unit,json=transferUnit,proto3,enum=product.TransferUnit" json:"transfer_unit,omitempty"`
	// 转让手续费
	TransferNum uint32 `protobuf:"varint,15,opt,name=transfer_num,json=transferNum,proto3" json:"transfer_num,omitempty"`
	// 售卖方式 1-用户端售卖 2-线下售卖 3-全部支持
	SellType CardSellType `protobuf:"varint,16,opt,name=sell_type,json=sellType,proto3,enum=product.CardSellType" json:"sell_type,omitempty"`
	// 会员卡介绍
	CardIntroduction string `protobuf:"bytes,17,opt,name=card_introduction,json=cardIntroduction,proto3" json:"card_introduction,omitempty"`
	// 会员卡备注
	CardContents string `protobuf:"bytes,18,opt,name=card_contents,json=cardContents,proto3" json:"card_contents,omitempty"`
	// 会员卡背景
	CardBg *Image `protobuf:"bytes,19,opt,name=card_bg,json=cardBg,proto3" json:"card_bg,omitempty"`
	// 发布渠道 1-品牌 2-门店
	PublishChannel PublishChannel `protobuf:"varint,20,opt,name=publish_channel,json=publishChannel,proto3,enum=product.PublishChannel" json:"publish_channel,omitempty"`
	// 操作人ID
	OperatorId uint32 `protobuf:"varint,21,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 支持入场门店
	AdmissionShopList []uint32 `protobuf:"varint,22,rep,packed,name=admission_shop_list,json=admissionShopList,proto3" json:"admission_shop_list,omitempty"`
	// 支持售卖门店
	SellShopList []uint32 `protobuf:"varint,23,rep,packed,name=sell_shop_list,json=sellShopList,proto3" json:"sell_shop_list,omitempty"`
	// 价格梯度
	PriceGradient        []*PriceGradient `protobuf:"bytes,24,rep,name=price_gradient,json=priceGradient,proto3" json:"price_gradient,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MemberCardTplRequest) Reset()         { *m = MemberCardTplRequest{} }
func (m *MemberCardTplRequest) String() string { return proto.CompactTextString(m) }
func (*MemberCardTplRequest) ProtoMessage()    {}
func (*MemberCardTplRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{0}
}
func (m *MemberCardTplRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberCardTplRequest.Unmarshal(m, b)
}
func (m *MemberCardTplRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberCardTplRequest.Marshal(b, m, deterministic)
}
func (dst *MemberCardTplRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberCardTplRequest.Merge(dst, src)
}
func (m *MemberCardTplRequest) XXX_Size() int {
	return xxx_messageInfo_MemberCardTplRequest.Size(m)
}
func (m *MemberCardTplRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberCardTplRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MemberCardTplRequest proto.InternalMessageInfo

func (m *MemberCardTplRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MemberCardTplRequest) GetCardId() uint32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *MemberCardTplRequest) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *MemberCardTplRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *MemberCardTplRequest) GetCardType() CardType {
	if m != nil {
		return m.CardType
	}
	return CardType_CARD_TYPE_INIT
}

func (m *MemberCardTplRequest) GetCardName() string {
	if m != nil {
		return m.CardName
	}
	return ""
}

func (m *MemberCardTplRequest) GetAdmissionRange() AdmissionRange {
	if m != nil {
		return m.AdmissionRange
	}
	return AdmissionRange_ADMISSION_RANGE_INIT
}

func (m *MemberCardTplRequest) GetPriceSetting() SetPriceType {
	if m != nil {
		return m.PriceSetting
	}
	return SetPriceType_SET_PRICE_TYPE_INIT
}

func (m *MemberCardTplRequest) GetSupportSales() SupportSales {
	if m != nil {
		return m.SupportSales
	}
	return SupportSales_SUPPORT_SALES_INIT
}

func (m *MemberCardTplRequest) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MemberCardTplRequest) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *MemberCardTplRequest) GetIsTransfer() common.IsAvailable {
	if m != nil {
		return m.IsTransfer
	}
	return common.IsAvailable_UNAVAILABLE
}

func (m *MemberCardTplRequest) GetTransferUnit() TransferUnit {
	if m != nil {
		return m.TransferUnit
	}
	return TransferUnit_UNIT_INIT
}

func (m *MemberCardTplRequest) GetTransferNum() uint32 {
	if m != nil {
		return m.TransferNum
	}
	return 0
}

func (m *MemberCardTplRequest) GetSellType() CardSellType {
	if m != nil {
		return m.SellType
	}
	return CardSellType_CARD_SELL_TYPE_INIT
}

func (m *MemberCardTplRequest) GetCardIntroduction() string {
	if m != nil {
		return m.CardIntroduction
	}
	return ""
}

func (m *MemberCardTplRequest) GetCardContents() string {
	if m != nil {
		return m.CardContents
	}
	return ""
}

func (m *MemberCardTplRequest) GetCardBg() *Image {
	if m != nil {
		return m.CardBg
	}
	return nil
}

func (m *MemberCardTplRequest) GetPublishChannel() PublishChannel {
	if m != nil {
		return m.PublishChannel
	}
	return PublishChannel_PUBLISH_CHANNEL_INIT
}

func (m *MemberCardTplRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *MemberCardTplRequest) GetAdmissionShopList() []uint32 {
	if m != nil {
		return m.AdmissionShopList
	}
	return nil
}

func (m *MemberCardTplRequest) GetSellShopList() []uint32 {
	if m != nil {
		return m.SellShopList
	}
	return nil
}

func (m *MemberCardTplRequest) GetPriceGradient() []*PriceGradient {
	if m != nil {
		return m.PriceGradient
	}
	return nil
}

// 会员卡响应体
type MemberCardTplResponse struct {
	// 公共相应参数
	Status               *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MemberCardTplResponse) Reset()         { *m = MemberCardTplResponse{} }
func (m *MemberCardTplResponse) String() string { return proto.CompactTextString(m) }
func (*MemberCardTplResponse) ProtoMessage()    {}
func (*MemberCardTplResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{1}
}
func (m *MemberCardTplResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberCardTplResponse.Unmarshal(m, b)
}
func (m *MemberCardTplResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberCardTplResponse.Marshal(b, m, deterministic)
}
func (dst *MemberCardTplResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberCardTplResponse.Merge(dst, src)
}
func (m *MemberCardTplResponse) XXX_Size() int {
	return xxx_messageInfo_MemberCardTplResponse.Size(m)
}
func (m *MemberCardTplResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberCardTplResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MemberCardTplResponse proto.InternalMessageInfo

func (m *MemberCardTplResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// 会员卡详情请求体
type GetMemberCardTplInfoRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 会员卡id
	CardId               uint32   `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMemberCardTplInfoRequest) Reset()         { *m = GetMemberCardTplInfoRequest{} }
func (m *GetMemberCardTplInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetMemberCardTplInfoRequest) ProtoMessage()    {}
func (*GetMemberCardTplInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{2}
}
func (m *GetMemberCardTplInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMemberCardTplInfoRequest.Unmarshal(m, b)
}
func (m *GetMemberCardTplInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMemberCardTplInfoRequest.Marshal(b, m, deterministic)
}
func (dst *GetMemberCardTplInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMemberCardTplInfoRequest.Merge(dst, src)
}
func (m *GetMemberCardTplInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetMemberCardTplInfoRequest.Size(m)
}
func (m *GetMemberCardTplInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMemberCardTplInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMemberCardTplInfoRequest proto.InternalMessageInfo

func (m *GetMemberCardTplInfoRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetMemberCardTplInfoRequest) GetCardId() uint32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

// 会员卡详情响应体
type GetMemberCardTplInfoResponse struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 会员卡ID
	CardId uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 品牌ID
	BrandId uint32 `protobuf:"varint,3,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// 场馆ID
	ShopId uint32 `protobuf:"varint,4,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// 会员卡类型1-次卡 2-期限卡
	CardType CardType `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3,enum=product.CardType" json:"card_type,omitempty"`
	// 会员卡名称
	CardName string `protobuf:"bytes,6,opt,name=card_name,json=cardName,proto3" json:"card_name,omitempty"`
	// 支持入场范围 1-单店 2-多店 3-全店
	AdmissionRange AdmissionRange `protobuf:"varint,7,opt,name=admission_range,json=admissionRange,proto3,enum=product.AdmissionRange" json:"admission_range,omitempty"`
	// 价格设置类型 1-统一定价 2-门店定价
	PriceSetting SetPriceType `protobuf:"varint,8,opt,name=price_setting,json=priceSetting,proto3,enum=product.SetPriceType" json:"price_setting,omitempty"`
	// 支持售卖场馆类型 1-全部门店 2-指定门店
	SupportSales SupportSales `protobuf:"varint,9,opt,name=support_sales,json=supportSales,proto3,enum=product.SupportSales" json:"support_sales,omitempty"`
	// 支持售卖门店数量
	TotalShopNum uint32 `protobuf:"varint,24,opt,name=total_shop_num,json=totalShopNum,proto3" json:"total_shop_num,omitempty"`
	// 已上架门店数量
	ShelfShopNum uint32 `protobuf:"varint,25,opt,name=shelf_shop_num,json=shelfShopNum,proto3" json:"shelf_shop_num,omitempty"`
	// 开始售卖时间
	StartTime uint32 `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束售卖时间
	EndTime uint32 `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 售卖状态 1-可售卖 2-不可售卖
	SellStatus ProductSellStatus `protobuf:"varint,12,opt,name=sell_status,json=sellStatus,proto3,enum=product.ProductSellStatus" json:"sell_status,omitempty"`
	// 支持转让 0-不支持 1-支持
	IsTransfer common.IsAvailable `protobuf:"varint,13,opt,name=is_transfer,json=isTransfer,proto3,enum=common.IsAvailable" json:"is_transfer,omitempty"`
	// 转让单位 1-百分比 2-金额
	TransferUnit TransferUnit `protobuf:"varint,14,opt,name=transfer_unit,json=transferUnit,proto3,enum=product.TransferUnit" json:"transfer_unit,omitempty"`
	// 转让手续费
	TransferNum uint32 `protobuf:"varint,15,opt,name=transfer_num,json=transferNum,proto3" json:"transfer_num,omitempty"`
	// 售卖方式 1-用户端售卖 2-线下售卖 3-全部支持
	SellType CardSellType `protobuf:"varint,16,opt,name=sell_type,json=sellType,proto3,enum=product.CardSellType" json:"sell_type,omitempty"`
	// 会员卡介绍
	CardIntroduction string `protobuf:"bytes,17,opt,name=card_introduction,json=cardIntroduction,proto3" json:"card_introduction,omitempty"`
	// 会员卡备注
	CardContents string `protobuf:"bytes,18,opt,name=card_contents,json=cardContents,proto3" json:"card_contents,omitempty"`
	// 会员卡背景
	CardBg *Image `protobuf:"bytes,19,opt,name=card_bg,json=cardBg,proto3" json:"card_bg,omitempty"`
	// 发布渠道 1-品牌 2-门店
	PublishChannel PublishChannel `protobuf:"varint,20,opt,name=publish_channel,json=publishChannel,proto3,enum=product.PublishChannel" json:"publish_channel,omitempty"`
	// 支持入场门店列表
	AdmissionShopList []*SupportShop `protobuf:"bytes,21,rep,name=admission_shop_list,json=admissionShopList,proto3" json:"admission_shop_list,omitempty"`
	// 支持售卖门店列表
	SellShopList []*SupportShop `protobuf:"bytes,22,rep,name=sell_shop_list,json=sellShopList,proto3" json:"sell_shop_list,omitempty"`
	// 价格梯度
	PriceGradient        []*PriceGradient `protobuf:"bytes,23,rep,name=price_gradient,json=priceGradient,proto3" json:"price_gradient,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetMemberCardTplInfoResponse) Reset()         { *m = GetMemberCardTplInfoResponse{} }
func (m *GetMemberCardTplInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetMemberCardTplInfoResponse) ProtoMessage()    {}
func (*GetMemberCardTplInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{3}
}
func (m *GetMemberCardTplInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMemberCardTplInfoResponse.Unmarshal(m, b)
}
func (m *GetMemberCardTplInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMemberCardTplInfoResponse.Marshal(b, m, deterministic)
}
func (dst *GetMemberCardTplInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMemberCardTplInfoResponse.Merge(dst, src)
}
func (m *GetMemberCardTplInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetMemberCardTplInfoResponse.Size(m)
}
func (m *GetMemberCardTplInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMemberCardTplInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMemberCardTplInfoResponse proto.InternalMessageInfo

func (m *GetMemberCardTplInfoResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetMemberCardTplInfoResponse) GetCardId() uint32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *GetMemberCardTplInfoResponse) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *GetMemberCardTplInfoResponse) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *GetMemberCardTplInfoResponse) GetCardType() CardType {
	if m != nil {
		return m.CardType
	}
	return CardType_CARD_TYPE_INIT
}

func (m *GetMemberCardTplInfoResponse) GetCardName() string {
	if m != nil {
		return m.CardName
	}
	return ""
}

func (m *GetMemberCardTplInfoResponse) GetAdmissionRange() AdmissionRange {
	if m != nil {
		return m.AdmissionRange
	}
	return AdmissionRange_ADMISSION_RANGE_INIT
}

func (m *GetMemberCardTplInfoResponse) GetPriceSetting() SetPriceType {
	if m != nil {
		return m.PriceSetting
	}
	return SetPriceType_SET_PRICE_TYPE_INIT
}

func (m *GetMemberCardTplInfoResponse) GetSupportSales() SupportSales {
	if m != nil {
		return m.SupportSales
	}
	return SupportSales_SUPPORT_SALES_INIT
}

func (m *GetMemberCardTplInfoResponse) GetTotalShopNum() uint32 {
	if m != nil {
		return m.TotalShopNum
	}
	return 0
}

func (m *GetMemberCardTplInfoResponse) GetShelfShopNum() uint32 {
	if m != nil {
		return m.ShelfShopNum
	}
	return 0
}

func (m *GetMemberCardTplInfoResponse) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GetMemberCardTplInfoResponse) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GetMemberCardTplInfoResponse) GetSellStatus() ProductSellStatus {
	if m != nil {
		return m.SellStatus
	}
	return ProductSellStatus_PRODUCT_SELL_STATUS_INIT
}

func (m *GetMemberCardTplInfoResponse) GetIsTransfer() common.IsAvailable {
	if m != nil {
		return m.IsTransfer
	}
	return common.IsAvailable_UNAVAILABLE
}

func (m *GetMemberCardTplInfoResponse) GetTransferUnit() TransferUnit {
	if m != nil {
		return m.TransferUnit
	}
	return TransferUnit_UNIT_INIT
}

func (m *GetMemberCardTplInfoResponse) GetTransferNum() uint32 {
	if m != nil {
		return m.TransferNum
	}
	return 0
}

func (m *GetMemberCardTplInfoResponse) GetSellType() CardSellType {
	if m != nil {
		return m.SellType
	}
	return CardSellType_CARD_SELL_TYPE_INIT
}

func (m *GetMemberCardTplInfoResponse) GetCardIntroduction() string {
	if m != nil {
		return m.CardIntroduction
	}
	return ""
}

func (m *GetMemberCardTplInfoResponse) GetCardContents() string {
	if m != nil {
		return m.CardContents
	}
	return ""
}

func (m *GetMemberCardTplInfoResponse) GetCardBg() *Image {
	if m != nil {
		return m.CardBg
	}
	return nil
}

func (m *GetMemberCardTplInfoResponse) GetPublishChannel() PublishChannel {
	if m != nil {
		return m.PublishChannel
	}
	return PublishChannel_PUBLISH_CHANNEL_INIT
}

func (m *GetMemberCardTplInfoResponse) GetAdmissionShopList() []*SupportShop {
	if m != nil {
		return m.AdmissionShopList
	}
	return nil
}

func (m *GetMemberCardTplInfoResponse) GetSellShopList() []*SupportShop {
	if m != nil {
		return m.SellShopList
	}
	return nil
}

func (m *GetMemberCardTplInfoResponse) GetPriceGradient() []*PriceGradient {
	if m != nil {
		return m.PriceGradient
	}
	return nil
}

// vip场地
type VipRegionInfo struct {
	RegionId             uint32   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	RegionName           string   `protobuf:"bytes,2,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipRegionInfo) Reset()         { *m = VipRegionInfo{} }
func (m *VipRegionInfo) String() string { return proto.CompactTextString(m) }
func (*VipRegionInfo) ProtoMessage()    {}
func (*VipRegionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{4}
}
func (m *VipRegionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VipRegionInfo.Unmarshal(m, b)
}
func (m *VipRegionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VipRegionInfo.Marshal(b, m, deterministic)
}
func (dst *VipRegionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipRegionInfo.Merge(dst, src)
}
func (m *VipRegionInfo) XXX_Size() int {
	return xxx_messageInfo_VipRegionInfo.Size(m)
}
func (m *VipRegionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VipRegionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VipRegionInfo proto.InternalMessageInfo

func (m *VipRegionInfo) GetRegionId() uint32 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *VipRegionInfo) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

// 上架会员卡详情响应体
type GetShelfCardTplInfoResponse struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 品牌ID
	BrandId uint32 `protobuf:"varint,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// 会员卡ID
	CardId uint32 `protobuf:"varint,3,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 会员卡名称
	CardName string `protobuf:"bytes,4,opt,name=card_name,json=cardName,proto3" json:"card_name,omitempty"`
	// 模版卡ID
	CardTplId uint32 `protobuf:"varint,5,opt,name=card_tpl_id,json=cardTplId,proto3" json:"card_tpl_id,omitempty"`
	// 会员卡类型1-次卡 2-期限卡
	CardType CardType `protobuf:"varint,6,opt,name=card_type,json=cardType,proto3,enum=product.CardType" json:"card_type,omitempty"`
	// 售卖状态 1-可售卖 2-不可售卖
	SellStatus ProductSellStatus `protobuf:"varint,7,opt,name=sell_status,json=sellStatus,proto3,enum=product.ProductSellStatus" json:"sell_status,omitempty"`
	// 上架状态 1-下架 2-上架
	ShelfStatus ShelfStatus `protobuf:"varint,8,opt,name=shelf_status,json=shelfStatus,proto3,enum=product.ShelfStatus" json:"shelf_status,omitempty"`
	// 开始售卖时间
	StartTime uint32 `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束售卖时间
	EndTime uint32 `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 支持售卖场馆类型 1-全部门店 2-指定门店
	SupportSales SupportSales `protobuf:"varint,11,opt,name=support_sales,json=supportSales,proto3,enum=product.SupportSales" json:"support_sales,omitempty"`
	// 支持售卖门店列表
	SellShopList []*SupportShop `protobuf:"bytes,12,rep,name=sell_shop_list,json=sellShopList,proto3" json:"sell_shop_list,omitempty"`
	// 支持入场范围 1-单店 2-多店 3-全店
	AdmissionRange AdmissionRange `protobuf:"varint,13,opt,name=admission_range,json=admissionRange,proto3,enum=product.AdmissionRange" json:"admission_range,omitempty"`
	// 支持入场门店列表
	AdmissionShopList []*SupportShop `protobuf:"bytes,14,rep,name=admission_shop_list,json=admissionShopList,proto3" json:"admission_shop_list,omitempty"`
	// 支持售卖门店数量
	TotalShopNum uint32 `protobuf:"varint,15,opt,name=total_shop_num,json=totalShopNum,proto3" json:"total_shop_num,omitempty"`
	// 已上架门店数量
	ShelfShopNum uint32 `protobuf:"varint,16,opt,name=shelf_shop_num,json=shelfShopNum,proto3" json:"shelf_shop_num,omitempty"`
	// 价格设置类型 1-统一定价 2-门店定价
	PriceSetting SetPriceType `protobuf:"varint,17,opt,name=price_setting,json=priceSetting,proto3,enum=product.SetPriceType" json:"price_setting,omitempty"`
	// 价格梯度
	PriceGradient []*PriceGradient `protobuf:"bytes,18,rep,name=price_gradient,json=priceGradient,proto3" json:"price_gradient,omitempty"`
	// 售卖方式 1-用户端售卖 2-线下售卖 3-全部支持
	SellType CardSellType `protobuf:"varint,19,opt,name=sell_type,json=sellType,proto3,enum=product.CardSellType" json:"sell_type,omitempty"`
	// 支持开卡方式
	OpenTypeList []OpenType `protobuf:"varint,20,rep,packed,name=open_type_list,json=openTypeList,proto3,enum=product.OpenType" json:"open_type_list,omitempty"`
	// 开卡天数：多少天内未开卡,自动开卡
	AutomaticNum uint32 `protobuf:"varint,21,opt,name=automatic_num,json=automaticNum,proto3" json:"automatic_num,omitempty"`
	// 约课权益
	CourseInterests CourseInterests `protobuf:"varint,22,opt,name=course_interests,json=courseInterests,proto3,enum=product.CourseInterests" json:"course_interests,omitempty"`
	// 入场时段类型
	ShopCardAdmissionTime ShopCardAdmissionTime `protobuf:"varint,23,opt,name=shop_card_admission_time,json=shopCardAdmissionTime,proto3,enum=product.ShopCardAdmissionTime" json:"shop_card_admission_time,omitempty"`
	// 入场时段
	InoutTime []*InoutTime `protobuf:"bytes,24,rep,name=inout_time,json=inoutTime,proto3" json:"inout_time,omitempty"`
	// 课程列表
	CourseList []*CourseList `protobuf:"bytes,25,rep,name=course_list,json=courseList,proto3" json:"course_list,omitempty"`
	// 支持转让 0-不支持 1-支持
	IsTransfer common.IsAvailable `protobuf:"varint,26,opt,name=is_transfer,json=isTransfer,proto3,enum=common.IsAvailable" json:"is_transfer,omitempty"`
	// 转让单位 1-百分比 2-金额
	TransferUnit TransferUnit `protobuf:"varint,27,opt,name=transfer_unit,json=transferUnit,proto3,enum=product.TransferUnit" json:"transfer_unit,omitempty"`
	// 转让手续费
	TransferNum uint32 `protobuf:"varint,28,opt,name=transfer_num,json=transferNum,proto3" json:"transfer_num,omitempty"`
	// 会员卡介绍
	CardIntroduction string `protobuf:"bytes,29,opt,name=card_introduction,json=cardIntroduction,proto3" json:"card_introduction,omitempty"`
	// 会员卡备注
	CardContents string `protobuf:"bytes,30,opt,name=card_contents,json=cardContents,proto3" json:"card_contents,omitempty"`
	// 会员卡背景
	CardBg *Image `protobuf:"bytes,31,opt,name=card_bg,json=cardBg,proto3" json:"card_bg,omitempty"`
	// 门店售卖价格
	ShopPriceGradient []*CardPrice `protobuf:"bytes,32,rep,name=shop_price_gradient,json=shopPriceGradient,proto3" json:"shop_price_gradient,omitempty"`
	// vip场地
	VipRegionInfo        []*VipRegionInfo `protobuf:"bytes,33,rep,name=vip_region_info,json=vipRegionInfo,proto3" json:"vip_region_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetShelfCardTplInfoResponse) Reset()         { *m = GetShelfCardTplInfoResponse{} }
func (m *GetShelfCardTplInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetShelfCardTplInfoResponse) ProtoMessage()    {}
func (*GetShelfCardTplInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{5}
}
func (m *GetShelfCardTplInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetShelfCardTplInfoResponse.Unmarshal(m, b)
}
func (m *GetShelfCardTplInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetShelfCardTplInfoResponse.Marshal(b, m, deterministic)
}
func (dst *GetShelfCardTplInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShelfCardTplInfoResponse.Merge(dst, src)
}
func (m *GetShelfCardTplInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetShelfCardTplInfoResponse.Size(m)
}
func (m *GetShelfCardTplInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShelfCardTplInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShelfCardTplInfoResponse proto.InternalMessageInfo

func (m *GetShelfCardTplInfoResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetCardId() uint32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetCardName() string {
	if m != nil {
		return m.CardName
	}
	return ""
}

func (m *GetShelfCardTplInfoResponse) GetCardTplId() uint32 {
	if m != nil {
		return m.CardTplId
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetCardType() CardType {
	if m != nil {
		return m.CardType
	}
	return CardType_CARD_TYPE_INIT
}

func (m *GetShelfCardTplInfoResponse) GetSellStatus() ProductSellStatus {
	if m != nil {
		return m.SellStatus
	}
	return ProductSellStatus_PRODUCT_SELL_STATUS_INIT
}

func (m *GetShelfCardTplInfoResponse) GetShelfStatus() ShelfStatus {
	if m != nil {
		return m.ShelfStatus
	}
	return ShelfStatus_SHELFSTATUS_INIT
}

func (m *GetShelfCardTplInfoResponse) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetSupportSales() SupportSales {
	if m != nil {
		return m.SupportSales
	}
	return SupportSales_SUPPORT_SALES_INIT
}

func (m *GetShelfCardTplInfoResponse) GetSellShopList() []*SupportShop {
	if m != nil {
		return m.SellShopList
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetAdmissionRange() AdmissionRange {
	if m != nil {
		return m.AdmissionRange
	}
	return AdmissionRange_ADMISSION_RANGE_INIT
}

func (m *GetShelfCardTplInfoResponse) GetAdmissionShopList() []*SupportShop {
	if m != nil {
		return m.AdmissionShopList
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetTotalShopNum() uint32 {
	if m != nil {
		return m.TotalShopNum
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetShelfShopNum() uint32 {
	if m != nil {
		return m.ShelfShopNum
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetPriceSetting() SetPriceType {
	if m != nil {
		return m.PriceSetting
	}
	return SetPriceType_SET_PRICE_TYPE_INIT
}

func (m *GetShelfCardTplInfoResponse) GetPriceGradient() []*PriceGradient {
	if m != nil {
		return m.PriceGradient
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetSellType() CardSellType {
	if m != nil {
		return m.SellType
	}
	return CardSellType_CARD_SELL_TYPE_INIT
}

func (m *GetShelfCardTplInfoResponse) GetOpenTypeList() []OpenType {
	if m != nil {
		return m.OpenTypeList
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetAutomaticNum() uint32 {
	if m != nil {
		return m.AutomaticNum
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetCourseInterests() CourseInterests {
	if m != nil {
		return m.CourseInterests
	}
	return CourseInterests_COURSE_INTERESTS_INIT
}

func (m *GetShelfCardTplInfoResponse) GetShopCardAdmissionTime() ShopCardAdmissionTime {
	if m != nil {
		return m.ShopCardAdmissionTime
	}
	return ShopCardAdmissionTime_CARD_INOUT_TIME_INIT
}

func (m *GetShelfCardTplInfoResponse) GetInoutTime() []*InoutTime {
	if m != nil {
		return m.InoutTime
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetCourseList() []*CourseList {
	if m != nil {
		return m.CourseList
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetIsTransfer() common.IsAvailable {
	if m != nil {
		return m.IsTransfer
	}
	return common.IsAvailable_UNAVAILABLE
}

func (m *GetShelfCardTplInfoResponse) GetTransferUnit() TransferUnit {
	if m != nil {
		return m.TransferUnit
	}
	return TransferUnit_UNIT_INIT
}

func (m *GetShelfCardTplInfoResponse) GetTransferNum() uint32 {
	if m != nil {
		return m.TransferNum
	}
	return 0
}

func (m *GetShelfCardTplInfoResponse) GetCardIntroduction() string {
	if m != nil {
		return m.CardIntroduction
	}
	return ""
}

func (m *GetShelfCardTplInfoResponse) GetCardContents() string {
	if m != nil {
		return m.CardContents
	}
	return ""
}

func (m *GetShelfCardTplInfoResponse) GetCardBg() *Image {
	if m != nil {
		return m.CardBg
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetShopPriceGradient() []*CardPrice {
	if m != nil {
		return m.ShopPriceGradient
	}
	return nil
}

func (m *GetShelfCardTplInfoResponse) GetVipRegionInfo() []*VipRegionInfo {
	if m != nil {
		return m.VipRegionInfo
	}
	return nil
}

// 删除会员卡请求体
type DelMemberCardTplRequest struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 会员卡Id
	CardId uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 操作人ID
	OperatorId           uint32   `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelMemberCardTplRequest) Reset()         { *m = DelMemberCardTplRequest{} }
func (m *DelMemberCardTplRequest) String() string { return proto.CompactTextString(m) }
func (*DelMemberCardTplRequest) ProtoMessage()    {}
func (*DelMemberCardTplRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{6}
}
func (m *DelMemberCardTplRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelMemberCardTplRequest.Unmarshal(m, b)
}
func (m *DelMemberCardTplRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelMemberCardTplRequest.Marshal(b, m, deterministic)
}
func (dst *DelMemberCardTplRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelMemberCardTplRequest.Merge(dst, src)
}
func (m *DelMemberCardTplRequest) XXX_Size() int {
	return xxx_messageInfo_DelMemberCardTplRequest.Size(m)
}
func (m *DelMemberCardTplRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelMemberCardTplRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelMemberCardTplRequest proto.InternalMessageInfo

func (m *DelMemberCardTplRequest) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DelMemberCardTplRequest) GetCardId() uint32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *DelMemberCardTplRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

// 停售会员卡请求体
type StopSaleMemberCardTplRequest struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 会员卡Id
	CardId uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 操作人ID
	OperatorId uint32 `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 停售原因
	Reason               string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopSaleMemberCardTplRequest) Reset()         { *m = StopSaleMemberCardTplRequest{} }
func (m *StopSaleMemberCardTplRequest) String() string { return proto.CompactTextString(m) }
func (*StopSaleMemberCardTplRequest) ProtoMessage()    {}
func (*StopSaleMemberCardTplRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{7}
}
func (m *StopSaleMemberCardTplRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopSaleMemberCardTplRequest.Unmarshal(m, b)
}
func (m *StopSaleMemberCardTplRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopSaleMemberCardTplRequest.Marshal(b, m, deterministic)
}
func (dst *StopSaleMemberCardTplRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopSaleMemberCardTplRequest.Merge(dst, src)
}
func (m *StopSaleMemberCardTplRequest) XXX_Size() int {
	return xxx_messageInfo_StopSaleMemberCardTplRequest.Size(m)
}
func (m *StopSaleMemberCardTplRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopSaleMemberCardTplRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopSaleMemberCardTplRequest proto.InternalMessageInfo

func (m *StopSaleMemberCardTplRequest) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *StopSaleMemberCardTplRequest) GetCardId() uint32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *StopSaleMemberCardTplRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *StopSaleMemberCardTplRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// 恢复会员卡请求体
type RecoverSaleMemberCardTplRequest struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 会员卡Id
	CardId uint32 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 操作人ID
	OperatorId uint32 `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 开始时间
	StartTime uint32 `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间
	EndTime              uint32   `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecoverSaleMemberCardTplRequest) Reset()         { *m = RecoverSaleMemberCardTplRequest{} }
func (m *RecoverSaleMemberCardTplRequest) String() string { return proto.CompactTextString(m) }
func (*RecoverSaleMemberCardTplRequest) ProtoMessage()    {}
func (*RecoverSaleMemberCardTplRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{8}
}
func (m *RecoverSaleMemberCardTplRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverSaleMemberCardTplRequest.Unmarshal(m, b)
}
func (m *RecoverSaleMemberCardTplRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverSaleMemberCardTplRequest.Marshal(b, m, deterministic)
}
func (dst *RecoverSaleMemberCardTplRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverSaleMemberCardTplRequest.Merge(dst, src)
}
func (m *RecoverSaleMemberCardTplRequest) XXX_Size() int {
	return xxx_messageInfo_RecoverSaleMemberCardTplRequest.Size(m)
}
func (m *RecoverSaleMemberCardTplRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverSaleMemberCardTplRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverSaleMemberCardTplRequest proto.InternalMessageInfo

func (m *RecoverSaleMemberCardTplRequest) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RecoverSaleMemberCardTplRequest) GetCardId() uint32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *RecoverSaleMemberCardTplRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *RecoverSaleMemberCardTplRequest) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RecoverSaleMemberCardTplRequest) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// 会员卡上架
type UpShelfCardTplRequest struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	//
	// 会员和门店Id
	CardShop []*CardShop `protobuf:"bytes,2,rep,name=card_shop,json=cardShop,proto3" json:"card_shop,omitempty"`
	// 品牌
	ShelfBrandId uint32 `protobuf:"varint,3,opt,name=shelf_brand_id,json=shelfBrandId,proto3" json:"shelf_brand_id,omitempty"`
	// 操作人ID
	OperatorId uint32 `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 支持开卡方式
	OpenTypeList []OpenType `protobuf:"varint,5,rep,packed,name=open_type_list,json=openTypeList,proto3,enum=product.OpenType" json:"open_type_list,omitempty"`
	// 开卡天数：多少天内未开卡,自动开卡
	AutomaticNum uint32 `protobuf:"varint,6,opt,name=automatic_num,json=automaticNum,proto3" json:"automatic_num,omitempty"`
	// 约课权益
	CourseInterests CourseInterests `protobuf:"varint,7,opt,name=course_interests,json=courseInterests,proto3,enum=product.CourseInterests" json:"course_interests,omitempty"`
	// 课程列表
	CourseList []*CourseList `protobuf:"bytes,8,rep,name=course_list,json=courseList,proto3" json:"course_list,omitempty"`
	// 入场时段类型
	ShopCardAdmissionTime ShopCardAdmissionTime `protobuf:"varint,9,opt,name=shop_card_admission_time,json=shopCardAdmissionTime,proto3,enum=product.ShopCardAdmissionTime" json:"shop_card_admission_time,omitempty"`
	// 入场时段
	InoutTime []*InoutTime `protobuf:"bytes,10,rep,name=inout_time,json=inoutTime,proto3" json:"inout_time,omitempty"`
	// 售卖价格
	CardPrice            []*CardPrice `protobuf:"bytes,11,rep,name=card_price,json=cardPrice,proto3" json:"card_price,omitempty"`
	VipRegion            []*VipRegion `protobuf:"bytes,12,rep,name=vip_region,json=vipRegion,proto3" json:"vip_region,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpShelfCardTplRequest) Reset()         { *m = UpShelfCardTplRequest{} }
func (m *UpShelfCardTplRequest) String() string { return proto.CompactTextString(m) }
func (*UpShelfCardTplRequest) ProtoMessage()    {}
func (*UpShelfCardTplRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{9}
}
func (m *UpShelfCardTplRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpShelfCardTplRequest.Unmarshal(m, b)
}
func (m *UpShelfCardTplRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpShelfCardTplRequest.Marshal(b, m, deterministic)
}
func (dst *UpShelfCardTplRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpShelfCardTplRequest.Merge(dst, src)
}
func (m *UpShelfCardTplRequest) XXX_Size() int {
	return xxx_messageInfo_UpShelfCardTplRequest.Size(m)
}
func (m *UpShelfCardTplRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpShelfCardTplRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpShelfCardTplRequest proto.InternalMessageInfo

func (m *UpShelfCardTplRequest) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UpShelfCardTplRequest) GetCardShop() []*CardShop {
	if m != nil {
		return m.CardShop
	}
	return nil
}

func (m *UpShelfCardTplRequest) GetShelfBrandId() uint32 {
	if m != nil {
		return m.ShelfBrandId
	}
	return 0
}

func (m *UpShelfCardTplRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *UpShelfCardTplRequest) GetOpenTypeList() []OpenType {
	if m != nil {
		return m.OpenTypeList
	}
	return nil
}

func (m *UpShelfCardTplRequest) GetAutomaticNum() uint32 {
	if m != nil {
		return m.AutomaticNum
	}
	return 0
}

func (m *UpShelfCardTplRequest) GetCourseInterests() CourseInterests {
	if m != nil {
		return m.CourseInterests
	}
	return CourseInterests_COURSE_INTERESTS_INIT
}

func (m *UpShelfCardTplRequest) GetCourseList() []*CourseList {
	if m != nil {
		return m.CourseList
	}
	return nil
}

func (m *UpShelfCardTplRequest) GetShopCardAdmissionTime() ShopCardAdmissionTime {
	if m != nil {
		return m.ShopCardAdmissionTime
	}
	return ShopCardAdmissionTime_CARD_INOUT_TIME_INIT
}

func (m *UpShelfCardTplRequest) GetInoutTime() []*InoutTime {
	if m != nil {
		return m.InoutTime
	}
	return nil
}

func (m *UpShelfCardTplRequest) GetCardPrice() []*CardPrice {
	if m != nil {
		return m.CardPrice
	}
	return nil
}

func (m *UpShelfCardTplRequest) GetVipRegion() []*VipRegion {
	if m != nil {
		return m.VipRegion
	}
	return nil
}

// 会员卡下架
type DownShelfCardTplRequest struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 卡id和shopid
	CardShop []*CardShop `protobuf:"bytes,2,rep,name=card_shop,json=cardShop,proto3" json:"card_shop,omitempty"`
	// 操作人ID
	OperatorId           uint32   `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownShelfCardTplRequest) Reset()         { *m = DownShelfCardTplRequest{} }
func (m *DownShelfCardTplRequest) String() string { return proto.CompactTextString(m) }
func (*DownShelfCardTplRequest) ProtoMessage()    {}
func (*DownShelfCardTplRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{10}
}
func (m *DownShelfCardTplRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownShelfCardTplRequest.Unmarshal(m, b)
}
func (m *DownShelfCardTplRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownShelfCardTplRequest.Marshal(b, m, deterministic)
}
func (dst *DownShelfCardTplRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownShelfCardTplRequest.Merge(dst, src)
}
func (m *DownShelfCardTplRequest) XXX_Size() int {
	return xxx_messageInfo_DownShelfCardTplRequest.Size(m)
}
func (m *DownShelfCardTplRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownShelfCardTplRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownShelfCardTplRequest proto.InternalMessageInfo

func (m *DownShelfCardTplRequest) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DownShelfCardTplRequest) GetCardShop() []*CardShop {
	if m != nil {
		return m.CardShop
	}
	return nil
}

func (m *DownShelfCardTplRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

type VipRegion struct {
	ShopRegionId         uint32   `protobuf:"varint,1,opt,name=shop_region_id,json=shopRegionId,proto3" json:"shop_region_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipRegion) Reset()         { *m = VipRegion{} }
func (m *VipRegion) String() string { return proto.CompactTextString(m) }
func (*VipRegion) ProtoMessage()    {}
func (*VipRegion) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{11}
}
func (m *VipRegion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VipRegion.Unmarshal(m, b)
}
func (m *VipRegion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VipRegion.Marshal(b, m, deterministic)
}
func (dst *VipRegion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipRegion.Merge(dst, src)
}
func (m *VipRegion) XXX_Size() int {
	return xxx_messageInfo_VipRegion.Size(m)
}
func (m *VipRegion) XXX_DiscardUnknown() {
	xxx_messageInfo_VipRegion.DiscardUnknown(m)
}

var xxx_messageInfo_VipRegion proto.InternalMessageInfo

func (m *VipRegion) GetShopRegionId() uint32 {
	if m != nil {
		return m.ShopRegionId
	}
	return 0
}

// 门店和会员卡
type CardShop struct {
	// 会员卡Id
	CardId uint32 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 门店
	ShelfShopId          uint32   `protobuf:"varint,2,opt,name=shelf_shop_id,json=shelfShopId,proto3" json:"shelf_shop_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardShop) Reset()         { *m = CardShop{} }
func (m *CardShop) String() string { return proto.CompactTextString(m) }
func (*CardShop) ProtoMessage()    {}
func (*CardShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{12}
}
func (m *CardShop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CardShop.Unmarshal(m, b)
}
func (m *CardShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CardShop.Marshal(b, m, deterministic)
}
func (dst *CardShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardShop.Merge(dst, src)
}
func (m *CardShop) XXX_Size() int {
	return xxx_messageInfo_CardShop.Size(m)
}
func (m *CardShop) XXX_DiscardUnknown() {
	xxx_messageInfo_CardShop.DiscardUnknown(m)
}

var xxx_messageInfo_CardShop proto.InternalMessageInfo

func (m *CardShop) GetCardId() uint32 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *CardShop) GetShelfShopId() uint32 {
	if m != nil {
		return m.ShelfShopId
	}
	return 0
}

// 课程列表
type CourseList struct {
	// 课程id
	CourseId uint32 `protobuf:"varint,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// 课程类型
	CourseType uint32 `protobuf:"varint,2,opt,name=course_type,json=courseType,proto3" json:"course_type,omitempty"`
	// 操作id
	OperationId uint32 `protobuf:"varint,3,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// 课程名
	CourseName           string   `protobuf:"bytes,4,opt,name=course_name,json=courseName,proto3" json:"course_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CourseList) Reset()         { *m = CourseList{} }
func (m *CourseList) String() string { return proto.CompactTextString(m) }
func (*CourseList) ProtoMessage()    {}
func (*CourseList) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{13}
}
func (m *CourseList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CourseList.Unmarshal(m, b)
}
func (m *CourseList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CourseList.Marshal(b, m, deterministic)
}
func (dst *CourseList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CourseList.Merge(dst, src)
}
func (m *CourseList) XXX_Size() int {
	return xxx_messageInfo_CourseList.Size(m)
}
func (m *CourseList) XXX_DiscardUnknown() {
	xxx_messageInfo_CourseList.DiscardUnknown(m)
}

var xxx_messageInfo_CourseList proto.InternalMessageInfo

func (m *CourseList) GetCourseId() uint32 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *CourseList) GetCourseType() uint32 {
	if m != nil {
		return m.CourseType
	}
	return 0
}

func (m *CourseList) GetOperationId() uint32 {
	if m != nil {
		return m.OperationId
	}
	return 0
}

func (m *CourseList) GetCourseName() string {
	if m != nil {
		return m.CourseName
	}
	return ""
}

// 价格梯度
type PriceGradient struct {
	// 梯度记录ID，新增为0
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 期限类型 1-次 2-天 3-月 4-年
	Unit CardUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=product.CardUnit" json:"unit,omitempty"`
	// 数量
	Num uint32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	// 统一售价
	RallyPrice uint32 `protobuf:"varint,4,opt,name=rally_price,json=rallyPrice,proto3" json:"rally_price,omitempty"`
	// 自主定价：最低售价
	MinPrice uint32 `protobuf:"varint,5,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	// 自主定价：最高售价
	MaxPrice uint32 `protobuf:"varint,6,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	// 允许冻结天数
	FrozenDay uint32 `protobuf:"varint,7,opt,name=frozen_day,json=frozenDay,proto3" json:"frozen_day,omitempty"`
	// 赠送上限
	GiftUnit             uint32   `protobuf:"varint,8,opt,name=gift_unit,json=giftUnit,proto3" json:"gift_unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceGradient) Reset()         { *m = PriceGradient{} }
func (m *PriceGradient) String() string { return proto.CompactTextString(m) }
func (*PriceGradient) ProtoMessage()    {}
func (*PriceGradient) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_card_tpl_08fa8449317b9f08, []int{14}
}
func (m *PriceGradient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceGradient.Unmarshal(m, b)
}
func (m *PriceGradient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceGradient.Marshal(b, m, deterministic)
}
func (dst *PriceGradient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceGradient.Merge(dst, src)
}
func (m *PriceGradient) XXX_Size() int {
	return xxx_messageInfo_PriceGradient.Size(m)
}
func (m *PriceGradient) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceGradient.DiscardUnknown(m)
}

var xxx_messageInfo_PriceGradient proto.InternalMessageInfo

func (m *PriceGradient) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PriceGradient) GetUnit() CardUnit {
	if m != nil {
		return m.Unit
	}
	return CardUnit_CARD_UNIT_INIT
}

func (m *PriceGradient) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *PriceGradient) GetRallyPrice() uint32 {
	if m != nil {
		return m.RallyPrice
	}
	return 0
}

func (m *PriceGradient) GetMinPrice() uint32 {
	if m != nil {
		return m.MinPrice
	}
	return 0
}

func (m *PriceGradient) GetMaxPrice() uint32 {
	if m != nil {
		return m.MaxPrice
	}
	return 0
}

func (m *PriceGradient) GetFrozenDay() uint32 {
	if m != nil {
		return m.FrozenDay
	}
	return 0
}

func (m *PriceGradient) GetGiftUnit() uint32 {
	if m != nil {
		return m.GiftUnit
	}
	return 0
}

func init() {
	proto.RegisterType((*MemberCardTplRequest)(nil), "product.MemberCardTplRequest")
	proto.RegisterType((*MemberCardTplResponse)(nil), "product.MemberCardTplResponse")
	proto.RegisterType((*GetMemberCardTplInfoRequest)(nil), "product.GetMemberCardTplInfoRequest")
	proto.RegisterType((*GetMemberCardTplInfoResponse)(nil), "product.GetMemberCardTplInfoResponse")
	proto.RegisterType((*VipRegionInfo)(nil), "product.VipRegionInfo")
	proto.RegisterType((*GetShelfCardTplInfoResponse)(nil), "product.GetShelfCardTplInfoResponse")
	proto.RegisterType((*DelMemberCardTplRequest)(nil), "product.DelMemberCardTplRequest")
	proto.RegisterType((*StopSaleMemberCardTplRequest)(nil), "product.StopSaleMemberCardTplRequest")
	proto.RegisterType((*RecoverSaleMemberCardTplRequest)(nil), "product.RecoverSaleMemberCardTplRequest")
	proto.RegisterType((*UpShelfCardTplRequest)(nil), "product.UpShelfCardTplRequest")
	proto.RegisterType((*DownShelfCardTplRequest)(nil), "product.DownShelfCardTplRequest")
	proto.RegisterType((*VipRegion)(nil), "product.VipRegion")
	proto.RegisterType((*CardShop)(nil), "product.CardShop")
	proto.RegisterType((*CourseList)(nil), "product.CourseList")
	proto.RegisterType((*PriceGradient)(nil), "product.PriceGradient")
	proto.RegisterEnum("product.CardType", CardType_name, CardType_value)
	proto.RegisterEnum("product.CardUnit", CardUnit_name, CardUnit_value)
	proto.RegisterEnum("product.AdmissionRange", AdmissionRange_name, AdmissionRange_value)
	proto.RegisterEnum("product.TransferUnit", TransferUnit_name, TransferUnit_value)
	proto.RegisterEnum("product.CourseInterests", CourseInterests_name, CourseInterests_value)
	proto.RegisterEnum("product.ShopCardAdmissionTime", ShopCardAdmissionTime_name, ShopCardAdmissionTime_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MemberCardTplServerClient is the client API for MemberCardTplServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemberCardTplServerClient interface {
	// 新增会员卡
	AddCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_AddCardClient, error)
	// 编辑会员卡
	EditCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_EditCardClient, error)
	// 删除会员卡
	DelCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_DelCardClient, error)
	// 会员卡详情
	GetCardInfo(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_GetCardInfoClient, error)
	// 停售会员卡
	StopSaleCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_StopSaleCardClient, error)
	// 恢复售卖会员卡
	RecoverSaleCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_RecoverSaleCardClient, error)
	// 会员卡上架
	UpShelfCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_UpShelfCardClient, error)
	// 会员卡下架
	DownShelfCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_DownShelfCardClient, error)
	// 上架会员卡详情
	GetShelfCardInfo(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_GetShelfCardInfoClient, error)
	// 重新上架
	ReUpShelfCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_ReUpShelfCardClient, error)
}

type memberCardTplServerClient struct {
	cc *grpc.ClientConn
}

func NewMemberCardTplServerClient(cc *grpc.ClientConn) MemberCardTplServerClient {
	return &memberCardTplServerClient{cc}
}

func (c *memberCardTplServerClient) AddCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_AddCardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[0], "/product.MemberCardTplServer/AddCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerAddCardClient{stream}
	return x, nil
}

type MemberCardTplServer_AddCardClient interface {
	Send(*MemberCardTplRequest) error
	Recv() (*MemberCardTplResponse, error)
	grpc.ClientStream
}

type memberCardTplServerAddCardClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerAddCardClient) Send(m *MemberCardTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerAddCardClient) Recv() (*MemberCardTplResponse, error) {
	m := new(MemberCardTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) EditCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_EditCardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[1], "/product.MemberCardTplServer/EditCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerEditCardClient{stream}
	return x, nil
}

type MemberCardTplServer_EditCardClient interface {
	Send(*MemberCardTplRequest) error
	Recv() (*MemberCardTplResponse, error)
	grpc.ClientStream
}

type memberCardTplServerEditCardClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerEditCardClient) Send(m *MemberCardTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerEditCardClient) Recv() (*MemberCardTplResponse, error) {
	m := new(MemberCardTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) DelCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_DelCardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[2], "/product.MemberCardTplServer/DelCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerDelCardClient{stream}
	return x, nil
}

type MemberCardTplServer_DelCardClient interface {
	Send(*DelMemberCardTplRequest) error
	Recv() (*MemberCardTplResponse, error)
	grpc.ClientStream
}

type memberCardTplServerDelCardClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerDelCardClient) Send(m *DelMemberCardTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerDelCardClient) Recv() (*MemberCardTplResponse, error) {
	m := new(MemberCardTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) GetCardInfo(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_GetCardInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[3], "/product.MemberCardTplServer/GetCardInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerGetCardInfoClient{stream}
	return x, nil
}

type MemberCardTplServer_GetCardInfoClient interface {
	Send(*GetMemberCardTplInfoRequest) error
	Recv() (*GetMemberCardTplInfoResponse, error)
	grpc.ClientStream
}

type memberCardTplServerGetCardInfoClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerGetCardInfoClient) Send(m *GetMemberCardTplInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerGetCardInfoClient) Recv() (*GetMemberCardTplInfoResponse, error) {
	m := new(GetMemberCardTplInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) StopSaleCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_StopSaleCardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[4], "/product.MemberCardTplServer/StopSaleCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerStopSaleCardClient{stream}
	return x, nil
}

type MemberCardTplServer_StopSaleCardClient interface {
	Send(*StopSaleMemberCardTplRequest) error
	Recv() (*MemberCardTplResponse, error)
	grpc.ClientStream
}

type memberCardTplServerStopSaleCardClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerStopSaleCardClient) Send(m *StopSaleMemberCardTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerStopSaleCardClient) Recv() (*MemberCardTplResponse, error) {
	m := new(MemberCardTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) RecoverSaleCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_RecoverSaleCardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[5], "/product.MemberCardTplServer/RecoverSaleCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerRecoverSaleCardClient{stream}
	return x, nil
}

type MemberCardTplServer_RecoverSaleCardClient interface {
	Send(*RecoverSaleMemberCardTplRequest) error
	Recv() (*MemberCardTplResponse, error)
	grpc.ClientStream
}

type memberCardTplServerRecoverSaleCardClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerRecoverSaleCardClient) Send(m *RecoverSaleMemberCardTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerRecoverSaleCardClient) Recv() (*MemberCardTplResponse, error) {
	m := new(MemberCardTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) UpShelfCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_UpShelfCardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[6], "/product.MemberCardTplServer/UpShelfCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerUpShelfCardClient{stream}
	return x, nil
}

type MemberCardTplServer_UpShelfCardClient interface {
	Send(*UpShelfCardTplRequest) error
	Recv() (*MemberCardTplResponse, error)
	grpc.ClientStream
}

type memberCardTplServerUpShelfCardClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerUpShelfCardClient) Send(m *UpShelfCardTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerUpShelfCardClient) Recv() (*MemberCardTplResponse, error) {
	m := new(MemberCardTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) DownShelfCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_DownShelfCardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[7], "/product.MemberCardTplServer/DownShelfCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerDownShelfCardClient{stream}
	return x, nil
}

type MemberCardTplServer_DownShelfCardClient interface {
	Send(*DownShelfCardTplRequest) error
	Recv() (*MemberCardTplResponse, error)
	grpc.ClientStream
}

type memberCardTplServerDownShelfCardClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerDownShelfCardClient) Send(m *DownShelfCardTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerDownShelfCardClient) Recv() (*MemberCardTplResponse, error) {
	m := new(MemberCardTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) GetShelfCardInfo(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_GetShelfCardInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[8], "/product.MemberCardTplServer/GetShelfCardInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerGetShelfCardInfoClient{stream}
	return x, nil
}

type MemberCardTplServer_GetShelfCardInfoClient interface {
	Send(*GetMemberCardTplInfoRequest) error
	Recv() (*GetShelfCardTplInfoResponse, error)
	grpc.ClientStream
}

type memberCardTplServerGetShelfCardInfoClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerGetShelfCardInfoClient) Send(m *GetMemberCardTplInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerGetShelfCardInfoClient) Recv() (*GetShelfCardTplInfoResponse, error) {
	m := new(GetShelfCardTplInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberCardTplServerClient) ReUpShelfCard(ctx context.Context, opts ...grpc.CallOption) (MemberCardTplServer_ReUpShelfCardClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberCardTplServer_serviceDesc.Streams[9], "/product.MemberCardTplServer/ReUpShelfCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberCardTplServerReUpShelfCardClient{stream}
	return x, nil
}

type MemberCardTplServer_ReUpShelfCardClient interface {
	Send(*UpShelfCardTplRequest) error
	Recv() (*MemberCardTplResponse, error)
	grpc.ClientStream
}

type memberCardTplServerReUpShelfCardClient struct {
	grpc.ClientStream
}

func (x *memberCardTplServerReUpShelfCardClient) Send(m *UpShelfCardTplRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberCardTplServerReUpShelfCardClient) Recv() (*MemberCardTplResponse, error) {
	m := new(MemberCardTplResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MemberCardTplServerServer is the server API for MemberCardTplServer service.
type MemberCardTplServerServer interface {
	// 新增会员卡
	AddCard(MemberCardTplServer_AddCardServer) error
	// 编辑会员卡
	EditCard(MemberCardTplServer_EditCardServer) error
	// 删除会员卡
	DelCard(MemberCardTplServer_DelCardServer) error
	// 会员卡详情
	GetCardInfo(MemberCardTplServer_GetCardInfoServer) error
	// 停售会员卡
	StopSaleCard(MemberCardTplServer_StopSaleCardServer) error
	// 恢复售卖会员卡
	RecoverSaleCard(MemberCardTplServer_RecoverSaleCardServer) error
	// 会员卡上架
	UpShelfCard(MemberCardTplServer_UpShelfCardServer) error
	// 会员卡下架
	DownShelfCard(MemberCardTplServer_DownShelfCardServer) error
	// 上架会员卡详情
	GetShelfCardInfo(MemberCardTplServer_GetShelfCardInfoServer) error
	// 重新上架
	ReUpShelfCard(MemberCardTplServer_ReUpShelfCardServer) error
}

func RegisterMemberCardTplServerServer(s *grpc.Server, srv MemberCardTplServerServer) {
	s.RegisterService(&_MemberCardTplServer_serviceDesc, srv)
}

func _MemberCardTplServer_AddCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).AddCard(&memberCardTplServerAddCardServer{stream})
}

type MemberCardTplServer_AddCardServer interface {
	Send(*MemberCardTplResponse) error
	Recv() (*MemberCardTplRequest, error)
	grpc.ServerStream
}

type memberCardTplServerAddCardServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerAddCardServer) Send(m *MemberCardTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerAddCardServer) Recv() (*MemberCardTplRequest, error) {
	m := new(MemberCardTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_EditCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).EditCard(&memberCardTplServerEditCardServer{stream})
}

type MemberCardTplServer_EditCardServer interface {
	Send(*MemberCardTplResponse) error
	Recv() (*MemberCardTplRequest, error)
	grpc.ServerStream
}

type memberCardTplServerEditCardServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerEditCardServer) Send(m *MemberCardTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerEditCardServer) Recv() (*MemberCardTplRequest, error) {
	m := new(MemberCardTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_DelCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).DelCard(&memberCardTplServerDelCardServer{stream})
}

type MemberCardTplServer_DelCardServer interface {
	Send(*MemberCardTplResponse) error
	Recv() (*DelMemberCardTplRequest, error)
	grpc.ServerStream
}

type memberCardTplServerDelCardServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerDelCardServer) Send(m *MemberCardTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerDelCardServer) Recv() (*DelMemberCardTplRequest, error) {
	m := new(DelMemberCardTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_GetCardInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).GetCardInfo(&memberCardTplServerGetCardInfoServer{stream})
}

type MemberCardTplServer_GetCardInfoServer interface {
	Send(*GetMemberCardTplInfoResponse) error
	Recv() (*GetMemberCardTplInfoRequest, error)
	grpc.ServerStream
}

type memberCardTplServerGetCardInfoServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerGetCardInfoServer) Send(m *GetMemberCardTplInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerGetCardInfoServer) Recv() (*GetMemberCardTplInfoRequest, error) {
	m := new(GetMemberCardTplInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_StopSaleCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).StopSaleCard(&memberCardTplServerStopSaleCardServer{stream})
}

type MemberCardTplServer_StopSaleCardServer interface {
	Send(*MemberCardTplResponse) error
	Recv() (*StopSaleMemberCardTplRequest, error)
	grpc.ServerStream
}

type memberCardTplServerStopSaleCardServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerStopSaleCardServer) Send(m *MemberCardTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerStopSaleCardServer) Recv() (*StopSaleMemberCardTplRequest, error) {
	m := new(StopSaleMemberCardTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_RecoverSaleCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).RecoverSaleCard(&memberCardTplServerRecoverSaleCardServer{stream})
}

type MemberCardTplServer_RecoverSaleCardServer interface {
	Send(*MemberCardTplResponse) error
	Recv() (*RecoverSaleMemberCardTplRequest, error)
	grpc.ServerStream
}

type memberCardTplServerRecoverSaleCardServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerRecoverSaleCardServer) Send(m *MemberCardTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerRecoverSaleCardServer) Recv() (*RecoverSaleMemberCardTplRequest, error) {
	m := new(RecoverSaleMemberCardTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_UpShelfCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).UpShelfCard(&memberCardTplServerUpShelfCardServer{stream})
}

type MemberCardTplServer_UpShelfCardServer interface {
	Send(*MemberCardTplResponse) error
	Recv() (*UpShelfCardTplRequest, error)
	grpc.ServerStream
}

type memberCardTplServerUpShelfCardServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerUpShelfCardServer) Send(m *MemberCardTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerUpShelfCardServer) Recv() (*UpShelfCardTplRequest, error) {
	m := new(UpShelfCardTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_DownShelfCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).DownShelfCard(&memberCardTplServerDownShelfCardServer{stream})
}

type MemberCardTplServer_DownShelfCardServer interface {
	Send(*MemberCardTplResponse) error
	Recv() (*DownShelfCardTplRequest, error)
	grpc.ServerStream
}

type memberCardTplServerDownShelfCardServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerDownShelfCardServer) Send(m *MemberCardTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerDownShelfCardServer) Recv() (*DownShelfCardTplRequest, error) {
	m := new(DownShelfCardTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_GetShelfCardInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).GetShelfCardInfo(&memberCardTplServerGetShelfCardInfoServer{stream})
}

type MemberCardTplServer_GetShelfCardInfoServer interface {
	Send(*GetShelfCardTplInfoResponse) error
	Recv() (*GetMemberCardTplInfoRequest, error)
	grpc.ServerStream
}

type memberCardTplServerGetShelfCardInfoServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerGetShelfCardInfoServer) Send(m *GetShelfCardTplInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerGetShelfCardInfoServer) Recv() (*GetMemberCardTplInfoRequest, error) {
	m := new(GetMemberCardTplInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberCardTplServer_ReUpShelfCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberCardTplServerServer).ReUpShelfCard(&memberCardTplServerReUpShelfCardServer{stream})
}

type MemberCardTplServer_ReUpShelfCardServer interface {
	Send(*MemberCardTplResponse) error
	Recv() (*UpShelfCardTplRequest, error)
	grpc.ServerStream
}

type memberCardTplServerReUpShelfCardServer struct {
	grpc.ServerStream
}

func (x *memberCardTplServerReUpShelfCardServer) Send(m *MemberCardTplResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberCardTplServerReUpShelfCardServer) Recv() (*UpShelfCardTplRequest, error) {
	m := new(UpShelfCardTplRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MemberCardTplServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.MemberCardTplServer",
	HandlerType: (*MemberCardTplServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddCard",
			Handler:       _MemberCardTplServer_AddCard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EditCard",
			Handler:       _MemberCardTplServer_EditCard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DelCard",
			Handler:       _MemberCardTplServer_DelCard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCardInfo",
			Handler:       _MemberCardTplServer_GetCardInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StopSaleCard",
			Handler:       _MemberCardTplServer_StopSaleCard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RecoverSaleCard",
			Handler:       _MemberCardTplServer_RecoverSaleCard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpShelfCard",
			Handler:       _MemberCardTplServer_UpShelfCard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownShelfCard",
			Handler:       _MemberCardTplServer_DownShelfCard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetShelfCardInfo",
			Handler:       _MemberCardTplServer_GetShelfCardInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReUpShelfCard",
			Handler:       _MemberCardTplServer_ReUpShelfCard_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "member_card_tpl.proto",
}

func init() {
	proto.RegisterFile("member_card_tpl.proto", fileDescriptor_member_card_tpl_08fa8449317b9f08)
}

var fileDescriptor_member_card_tpl_08fa8449317b9f08 = []byte{
	// 2063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcb, 0x6e, 0xe3, 0xc8,
	0xd5, 0xfe, 0x29, 0xf9, 0x22, 0x1d, 0x5d, 0x4c, 0x97, 0x6f, 0xb4, 0xdd, 0xee, 0x56, 0x6b, 0x3c,
	0xf8, 0x0d, 0x27, 0x71, 0xa7, 0x3d, 0x01, 0x06, 0x98, 0x41, 0x82, 0xc8, 0xb2, 0x62, 0x13, 0xb0,
	0x64, 0x87, 0x94, 0x13, 0x38, 0x08, 0x22, 0xd0, 0x62, 0x59, 0x26, 0x46, 0x22, 0x19, 0x92, 0x72,
	0xc6, 0x59, 0x26, 0xab, 0x6c, 0x66, 0x91, 0x65, 0x56, 0x79, 0x80, 0xbc, 0x46, 0x36, 0x79, 0x88,
	0xbc, 0x42, 0x5e, 0x21, 0xa8, 0x53, 0xc5, 0xab, 0x64, 0x5b, 0x36, 0x1c, 0xcc, 0x2c, 0x66, 0xd1,
	0x30, 0xeb, 0xdc, 0x74, 0xaa, 0xea, 0x3b, 0xdf, 0x39, 0x64, 0xc3, 0xda, 0x88, 0x8e, 0xae, 0xa9,
	0xd7, 0xeb, 0x1b, 0x9e, 0xd9, 0x0b, 0xdc, 0xe1, 0x81, 0xeb, 0x39, 0x81, 0x43, 0x16, 0x5d, 0xcf,
	0x31, 0xc7, 0xfd, 0x60, 0xab, 0xdc, 0x77, 0x46, 0x23, 0xc7, 0xe6, 0xe2, 0xad, 0x8a, 0x10, 0xf3,
	0x65, 0xfd, 0x9b, 0x02, 0xac, 0xb6, 0xd1, 0xbf, 0x69, 0x78, 0x66, 0xd7, 0x1d, 0x6a, 0xf4, 0xf7,
	0x63, 0xea, 0x07, 0xe4, 0x87, 0xb0, 0x70, 0x4b, 0x0d, 0x93, 0x7a, 0x8a, 0x54, 0x93, 0xf6, 0x4a,
	0x87, 0xab, 0x07, 0x22, 0x4c, 0x13, 0xff, 0x9c, 0xa2, 0x4e, 0x13, 0x36, 0x64, 0x03, 0x16, 0xf1,
	0xe7, 0x2d, 0x53, 0xc9, 0xd5, 0xa4, 0xbd, 0x8a, 0xb6, 0xc0, 0x96, 0xaa, 0x49, 0x36, 0xa1, 0x70,
	0xed, 0x19, 0x36, 0x6a, 0xf2, 0xa8, 0x59, 0xc4, 0xb5, 0x6a, 0x32, 0x1f, 0xff, 0xd6, 0x71, 0x99,
	0x66, 0x8e, 0xfb, 0xb0, 0xa5, 0x6a, 0x92, 0x03, 0x28, 0xf2, 0xbd, 0xdc, 0xbb, 0x54, 0x99, 0xaf,
	0x49, 0x7b, 0xd5, 0xc3, 0xe5, 0x83, 0x30, 0x6d, 0x4c, 0xf3, 0xde, 0xa5, 0x5a, 0xa1, 0x2f, 0x9e,
	0xc8, 0xb6, 0xb0, 0xb7, 0x8d, 0x11, 0x55, 0x16, 0x6a, 0xd2, 0x5e, 0x91, 0x2b, 0x3b, 0xc6, 0x88,
	0x92, 0x9f, 0xc3, 0x92, 0x61, 0x8e, 0x2c, 0xdf, 0xb7, 0x1c, 0xbb, 0xe7, 0x19, 0xf6, 0x80, 0x2a,
	0x8b, 0x18, 0x72, 0x23, 0x0a, 0xd9, 0x08, 0xf5, 0x1a, 0x53, 0x6b, 0x55, 0x23, 0xb5, 0x26, 0x5f,
	0x40, 0xc5, 0xf5, 0xac, 0x3e, 0xed, 0xf9, 0x34, 0x08, 0x2c, 0x7b, 0xa0, 0x14, 0xd0, 0x7f, 0x2d,
	0xf2, 0xd7, 0x69, 0x70, 0xc1, 0x0c, 0x30, 0xad, 0x32, 0xda, 0xea, 0xdc, 0x94, 0xf9, 0xfa, 0x63,
	0xd7, 0x75, 0xbc, 0xa0, 0xe7, 0x1b, 0x43, 0xea, 0x2b, 0xc5, 0xac, 0x2f, 0xd7, 0xea, 0x4c, 0xa9,
	0x95, 0xfd, 0xc4, 0x8a, 0xec, 0x00, 0xf8, 0x81, 0xe1, 0x05, 0xbd, 0xc0, 0x1a, 0x51, 0x05, 0xf0,
	0x88, 0x8a, 0x28, 0xe9, 0x5a, 0x23, 0xca, 0x4e, 0x96, 0xda, 0x26, 0x57, 0x96, 0xf8, 0xc9, 0x52,
	0xdb, 0x44, 0xd5, 0x4f, 0xa0, 0x64, 0xf9, 0xbd, 0xc0, 0x33, 0x6c, 0xff, 0x86, 0x7a, 0x4a, 0x05,
	0x7f, 0x73, 0x25, 0xbc, 0x40, 0xd5, 0x6f, 0xdc, 0x19, 0xd6, 0xd0, 0xb8, 0x1e, 0x52, 0x0d, 0x2c,
	0xbf, 0x2b, 0xcc, 0x58, 0xae, 0xa1, 0x4b, 0x6f, 0x6c, 0x5b, 0x81, 0x52, 0xcd, 0xe4, 0x1a, 0x5a,
	0x5e, 0xda, 0x56, 0xa0, 0x95, 0x83, 0xc4, 0x8a, 0xbc, 0x87, 0x68, 0xdd, 0xb3, 0xc7, 0x23, 0x65,
	0x09, 0x13, 0x2a, 0x85, 0xb2, 0xce, 0x78, 0x44, 0x0e, 0xa1, 0xe8, 0xd3, 0xe1, 0x90, 0xdf, 0xaa,
	0x9c, 0x09, 0xcd, 0x6e, 0x55, 0xa7, 0xc3, 0x21, 0xbf, 0x59, 0x5f, 0x3c, 0x91, 0x1f, 0xc0, 0x32,
	0x87, 0x95, 0x1d, 0x70, 0x43, 0xcb, 0xb1, 0x95, 0x65, 0xbc, 0x61, 0x19, 0x01, 0x96, 0x90, 0x93,
	0x4f, 0xa0, 0x82, 0xc6, 0x7d, 0xc7, 0x0e, 0xa8, 0x1d, 0xf8, 0x0a, 0x41, 0xc3, 0x32, 0x13, 0x36,
	0x85, 0x8c, 0xfc, 0xbf, 0x00, 0xea, 0xf5, 0x40, 0x59, 0x41, 0x5c, 0x57, 0xa3, 0x1c, 0xd4, 0x91,
	0x31, 0xa0, 0x1c, 0xb8, 0x47, 0x03, 0x86, 0x1b, 0x77, 0x7c, 0x3d, 0xb4, 0xfc, 0xdb, 0x5e, 0xff,
	0xd6, 0xb0, 0x6d, 0x3a, 0x54, 0x56, 0x33, 0xb8, 0xb9, 0xe0, 0xfa, 0x26, 0x57, 0x6b, 0x55, 0x37,
	0xb5, 0x26, 0xef, 0xa0, 0xe4, 0xb8, 0xd4, 0x33, 0x02, 0xc7, 0x63, 0x18, 0x5f, 0xc3, 0x23, 0x81,
	0x50, 0x84, 0x38, 0x5f, 0x89, 0xa1, 0x89, 0xa5, 0x30, 0xb4, 0xfc, 0x40, 0x59, 0xaf, 0xe5, 0xf7,
	0x2a, 0xda, 0x72, 0xa4, 0xd2, 0x6f, 0x1d, 0xf7, 0xcc, 0xf2, 0x03, 0xb2, 0x0b, 0x55, 0x3c, 0xc1,
	0xd8, 0x74, 0x03, 0x4d, 0xcb, 0x4c, 0x1a, 0x59, 0xfd, 0x14, 0xaa, 0x1c, 0xae, 0x03, 0xcf, 0x30,
	0x2d, 0x6a, 0x07, 0x8a, 0x52, 0xcb, 0xef, 0x95, 0x0e, 0xd7, 0xe3, 0xbc, 0x99, 0xfa, 0x44, 0x68,
	0x35, 0x0e, 0xee, 0x70, 0x59, 0x3f, 0x81, 0xb5, 0x0c, 0x1f, 0xf8, 0xae, 0x63, 0xfb, 0x94, 0x1c,
	0xc0, 0x82, 0x1f, 0x18, 0xc1, 0xd8, 0x17, 0x84, 0xb0, 0x1e, 0xe2, 0xe9, 0x68, 0xec, 0x5b, 0x36,
	0xf5, 0x7d, 0x1d, 0xb5, 0x9a, 0xb0, 0xaa, 0x9b, 0xb0, 0x7d, 0x42, 0x83, 0x54, 0x2c, 0xd5, 0xbe,
	0x71, 0x5e, 0x97, 0x5f, 0xea, 0xff, 0x28, 0xc2, 0x9b, 0xe9, 0x3f, 0xf3, 0xb2, 0xb4, 0xbf, 0x67,
	0xb2, 0xff, 0x01, 0x93, 0xed, 0x42, 0x35, 0x70, 0x02, 0x43, 0x20, 0x97, 0xf1, 0x83, 0x82, 0xc7,
	0x54, 0x46, 0x29, 0x43, 0x2e, 0x23, 0x08, 0x06, 0xef, 0x5b, 0x3a, 0xbc, 0x89, 0xad, 0x36, 0xb9,
	0x15, 0x4a, 0x43, 0xab, 0x97, 0xb3, 0xe2, 0x97, 0x50, 0xe2, 0xe5, 0xc3, 0xe1, 0x50, 0xc6, 0xfc,
	0xb7, 0x12, 0x55, 0x81, 0x7f, 0x19, 0x0b, 0x09, 0x48, 0x80, 0x1f, 0x3d, 0x7f, 0x4f, 0xa9, 0xdf,
	0x09, 0x4a, 0x3d, 0x9e, 0xce, 0x98, 0x6b, 0x48, 0x70, 0xab, 0x13, 0x50, 0xbc, 0x75, 0xdc, 0x69,
	0x3c, 0xfa, 0xc5, 0x04, 0x8f, 0xae, 0x3f, 0x12, 0xe0, 0x29, 0x76, 0xdd, 0x78, 0x0e, 0xbb, 0xb6,
	0xa1, 0xf2, 0x2b, 0xcb, 0xd5, 0xe8, 0xc0, 0x72, 0x6c, 0x46, 0x53, 0xac, 0xe2, 0x3d, 0x5c, 0x31,
	0xf2, 0x90, 0xf0, 0x8a, 0x0b, 0x5c, 0xa0, 0x9a, 0xac, 0x83, 0x08, 0x25, 0x12, 0x42, 0x0e, 0x0f,
	0x1f, 0xb8, 0x88, 0x51, 0x42, 0xfd, 0xaf, 0x15, 0x24, 0x59, 0x9d, 0x15, 0xc8, 0x6b, 0x90, 0x5f,
	0x92, 0xe3, 0x72, 0x13, 0x1c, 0x17, 0xf2, 0x62, 0x3e, 0xc5, 0x8b, 0x29, 0xce, 0x9a, 0xcb, 0x70,
	0xd6, 0x5b, 0x28, 0x85, 0x63, 0x29, 0xf3, 0x9c, 0xe7, 0xe5, 0xda, 0x17, 0xa9, 0x66, 0x08, 0x72,
	0xe1, 0x69, 0x82, 0xcc, 0xd4, 0xf0, 0xe2, 0xb3, 0x6a, 0xf8, 0x73, 0x28, 0x0b, 0x82, 0xe1, 0xde,
	0x9c, 0xfd, 0x12, 0xb7, 0x8e, 0x3c, 0xc3, 0xfd, 0x4a, 0x7e, 0xbc, 0xc8, 0x70, 0x4e, 0xf1, 0x31,
	0xce, 0x81, 0x34, 0xe7, 0x4c, 0xb0, 0x66, 0x69, 0x76, 0xd6, 0x9c, 0x84, 0x69, 0x79, 0x66, 0x98,
	0x4e, 0xe9, 0x15, 0x95, 0xe7, 0xf5, 0x8a, 0x07, 0x4a, 0xad, 0xfa, 0xbc, 0x52, 0x9b, 0x64, 0xfe,
	0xa5, 0x99, 0x98, 0x5f, 0x9e, 0xc2, 0xfc, 0x13, 0xdd, 0x6b, 0x79, 0xf6, 0xee, 0x35, 0x59, 0xb6,
	0xe4, 0x19, 0x65, 0x9b, 0x26, 0xda, 0x95, 0xd9, 0x88, 0xf6, 0x73, 0xa8, 0x3a, 0x2e, 0xb5, 0xd1,
	0x87, 0x9f, 0xdd, 0x6a, 0x2d, 0x9f, 0xc2, 0xf7, 0xb9, 0x4b, 0x6d, 0x9e, 0xab, 0x23, 0x9e, 0xf0,
	0xcc, 0x3e, 0x81, 0x8a, 0x31, 0x0e, 0x9c, 0x91, 0x11, 0x58, 0x7d, 0x3c, 0x0c, 0x3e, 0x39, 0x96,
	0x23, 0x21, 0x3b, 0x8c, 0x26, 0xc8, 0x7d, 0x67, 0xec, 0xf9, 0x94, 0x11, 0x39, 0xf5, 0xa8, 0x1f,
	0xf8, 0xca, 0x3a, 0x26, 0xa6, 0xc4, 0x89, 0xa1, 0x81, 0x1a, 0xea, 0xb5, 0xa5, 0x7e, 0x5a, 0x40,
	0x7e, 0x0d, 0x0a, 0x9e, 0x38, 0x96, 0x60, 0x7c, 0xdb, 0x08, 0xe4, 0x0d, 0x0c, 0xf6, 0x36, 0x51,
	0x1c, 0x8e, 0xcb, 0x76, 0x1a, 0xc1, 0x86, 0xe1, 0x5b, 0x5b, 0xf3, 0xa7, 0x89, 0xc9, 0x47, 0x00,
	0xcb, 0x76, 0xc6, 0xa2, 0x60, 0xf8, 0xfc, 0x49, 0xe2, 0xae, 0xc0, 0x54, 0xe8, 0x5e, 0xb4, 0xc2,
	0x47, 0xd6, 0x60, 0xc5, 0x86, 0xf0, 0xac, 0x36, 0xd1, 0x67, 0x25, 0xb3, 0x17, 0x76, 0x3e, 0x1a,
	0xf4, 0xa3, 0xe7, 0x6c, 0x5b, 0xde, 0x7a, 0x61, 0x5b, 0xde, 0x7e, 0x79, 0x5b, 0x7e, 0x33, 0xd9,
	0x96, 0xa7, 0xb6, 0xd8, 0x9d, 0x59, 0x5b, 0xec, 0xdb, 0xc7, 0x5b, 0xec, 0xbb, 0x47, 0x5b, 0xec,
	0x11, 0xac, 0xe0, 0x8d, 0x66, 0xc0, 0x5e, 0xcb, 0xdc, 0x00, 0xbb, 0x31, 0x04, 0xbc, 0xb6, 0xcc,
	0xcc, 0x53, 0xd8, 0x27, 0x3f, 0x83, 0xa5, 0x3b, 0xcb, 0xed, 0x85, 0x6d, 0xc9, 0xbe, 0x71, 0x94,
	0xf7, 0x99, 0x62, 0x49, 0xf5, 0x30, 0xad, 0x72, 0x97, 0x5c, 0xd6, 0xff, 0x2c, 0xc1, 0xc6, 0x31,
	0x1d, 0x4e, 0xfd, 0xaa, 0xf0, 0x6a, 0xd3, 0x78, 0xe6, 0xe5, 0x2a, 0x9f, 0x7d, 0xb9, 0xaa, 0xff,
	0x5d, 0x82, 0x37, 0x7a, 0xe0, 0xb8, 0x8c, 0x4b, 0xbf, 0xdd, 0x54, 0xc8, 0x3a, 0x2c, 0x78, 0xd4,
	0xf0, 0x1d, 0x5b, 0xb4, 0x47, 0xb1, 0xaa, 0xff, 0x53, 0x82, 0x77, 0x1a, 0xed, 0x3b, 0x77, 0xd4,
	0xfb, 0x0e, 0x64, 0x99, 0x6e, 0x72, 0x73, 0x8f, 0x35, 0xb9, 0xf9, 0x54, 0x93, 0xab, 0xff, 0x65,
	0x1e, 0xd6, 0x2e, 0xdd, 0xe4, 0x10, 0xf2, 0xd2, 0xec, 0xc3, 0x71, 0x80, 0x81, 0x52, 0xc9, 0x21,
	0xe8, 0xd2, 0xe3, 0x00, 0xf6, 0x19, 0x1c, 0x07, 0xd8, 0x53, 0xdc, 0x38, 0x32, 0x6f, 0x66, 0xbc,
	0x71, 0x1c, 0x89, 0xd1, 0x25, 0xb3, 0xf5, 0xb9, 0x89, 0xad, 0x4f, 0x52, 0xf5, 0xfc, 0x0b, 0xa9,
	0x7a, 0x61, 0x46, 0xaa, 0x5e, 0x7c, 0x2e, 0x55, 0x67, 0xe8, 0xb1, 0x30, 0x1b, 0x3d, 0x3e, 0x46,
	0xf0, 0xc5, 0xd7, 0x23, 0x78, 0x98, 0x85, 0xe0, 0x3f, 0x02, 0x60, 0x1a, 0x48, 0x4d, 0x4a, 0xe9,
	0x41, 0x46, 0x42, 0x04, 0xe0, 0x23, 0x73, 0x89, 0x99, 0x48, 0x4c, 0x3f, 0x64, 0x92, 0x84, 0xb4,
	0x62, 0x44, 0x40, 0xf5, 0xbf, 0x31, 0xf2, 0x71, 0xfe, 0x60, 0x7f, 0x1b, 0x68, 0x7c, 0x92, 0x93,
	0x3e, 0x42, 0x31, 0x4a, 0x9a, 0x63, 0xd7, 0x89, 0x79, 0x36, 0x1c, 0xff, 0xcb, 0x4c, 0x2a, 0xe8,
	0xd4, 0xac, 0x9f, 0x40, 0x21, 0xfc, 0xa5, 0x64, 0x6d, 0x4b, 0xa9, 0xda, 0xae, 0x43, 0x25, 0x31,
	0x3f, 0x45, 0xa5, 0x5f, 0x8a, 0xc6, 0x27, 0xd5, 0xac, 0x7f, 0x23, 0x01, 0xc4, 0x28, 0xc1, 0xa9,
	0x5d, 0x80, 0x32, 0x7a, 0xef, 0x10, 0x98, 0xc3, 0x82, 0x11, 0x4a, 0x1c, 0x78, 0x78, 0x34, 0x81,
	0x2b, 0x9c, 0x6d, 0xde, 0x43, 0x99, 0x6f, 0x4b, 0x64, 0xce, 0xb7, 0x5a, 0x8a, 0x64, 0xa9, 0x18,
	0x89, 0x17, 0x03, 0x11, 0x03, 0xdf, 0x5d, 0xfe, 0x23, 0x41, 0x25, 0xdd, 0x78, 0xaa, 0x90, 0x8b,
	0x92, 0xc9, 0x59, 0x26, 0xf9, 0x14, 0xe6, 0xb0, 0x3b, 0xe7, 0xa6, 0xbc, 0x17, 0x60, 0x67, 0x46,
	0x35, 0x91, 0x21, 0xcf, 0x4a, 0x8f, 0xe7, 0xc0, 0x1e, 0xf1, 0xbd, 0xc9, 0x18, 0x0e, 0xef, 0x05,
	0xd6, 0x44, 0xc1, 0xa3, 0x88, 0x03, 0x6b, 0x1b, 0x8a, 0x23, 0xcb, 0x16, 0x6a, 0xce, 0x66, 0x85,
	0x91, 0x65, 0xc7, 0x4a, 0xe3, 0x6b, 0xa1, 0x5c, 0x10, 0x4a, 0xe3, 0x6b, 0xae, 0xdc, 0x01, 0xb8,
	0xf1, 0x9c, 0x3f, 0x52, 0xbb, 0x67, 0x1a, 0xf7, 0x58, 0xc6, 0x15, 0xad, 0xc8, 0x25, 0xc7, 0xc6,
	0x3d, 0xf3, 0x1d, 0x58, 0x37, 0x01, 0x9f, 0x2a, 0x0a, 0xdc, 0x97, 0x09, 0x58, 0xba, 0xfb, 0xe2,
	0x2e, 0xf1, 0x04, 0x09, 0x54, 0x9b, 0x0d, 0xed, 0xb8, 0xd7, 0xbd, 0xba, 0x68, 0xf5, 0xd4, 0x8e,
	0xda, 0x95, 0xff, 0x8f, 0xac, 0xc0, 0x52, 0x2c, 0xeb, 0xaa, 0xed, 0x96, 0x2e, 0x4b, 0x69, 0xc3,
	0x6e, 0x4b, 0x6b, 0xcb, 0xb9, 0x7d, 0x87, 0x07, 0xc2, 0x79, 0x24, 0xd4, 0x5f, 0x76, 0xd4, 0x6e,
	0x36, 0x10, 0xca, 0xc2, 0x40, 0xcb, 0x50, 0x89, 0x85, 0xc7, 0x8d, 0x2b, 0x39, 0x97, 0xb6, 0x6b,
	0x9f, 0x77, 0xba, 0xa7, 0x72, 0x3e, 0x1d, 0xf0, 0xaa, 0xd5, 0xd0, 0xe4, 0xb9, 0xfd, 0x3b, 0xa8,
	0xa6, 0x5f, 0x17, 0x88, 0x02, 0xab, 0x8d, 0xe3, 0xb6, 0xaa, 0xeb, 0xea, 0x79, 0xa7, 0xa7, 0x35,
	0x3a, 0x27, 0xd1, 0x2e, 0x36, 0x61, 0x2d, 0xd6, 0xe8, 0x6a, 0xe7, 0xe4, 0xac, 0xd5, 0xd3, 0x4f,
	0xcf, 0x2f, 0x64, 0x89, 0x6c, 0xc0, 0x4a, 0xac, 0x6a, 0x5f, 0x36, 0x4f, 0xb9, 0x22, 0x47, 0xd6,
	0x81, 0xc4, 0x8a, 0xc6, 0xd9, 0x19, 0x97, 0xe7, 0xf7, 0x8f, 0xa0, 0x9c, 0x1c, 0xc5, 0x48, 0x05,
	0x8a, 0x99, 0x7d, 0xe2, 0xf2, 0xa2, 0xa5, 0x35, 0x5b, 0x9d, 0x6e, 0xe3, 0xa4, 0x25, 0x4b, 0xa4,
	0x0a, 0x10, 0xee, 0xa7, 0x75, 0x25, 0xe7, 0xf6, 0xff, 0x2d, 0xc1, 0x52, 0x86, 0x5e, 0x59, 0x8e,
	0xcd, 0xf3, 0x4b, 0x4d, 0x67, 0x49, 0x77, 0x5b, 0x5a, 0x4b, 0xef, 0xea, 0x89, 0xf4, 0x27, 0x54,
	0x9d, 0xf3, 0x0e, 0x8b, 0xbc, 0x0b, 0xb5, 0x09, 0x15, 0x4b, 0xb6, 0xdb, 0x6a, 0xb4, 0x7b, 0x5c,
	0x23, 0xe7, 0xc8, 0x1e, 0xec, 0x4e, 0xb5, 0xba, 0x68, 0x69, 0xfa, 0x79, 0xa7, 0x71, 0x16, 0x5a,
	0xe6, 0xa7, 0xc6, 0xd3, 0x2f, 0x5a, 0x4d, 0xf5, 0x17, 0x6a, 0x33, 0xb4, 0x9a, 0x23, 0xef, 0x60,
	0x7b, 0x6a, 0x3c, 0x61, 0x30, 0xbf, 0xff, 0x15, 0xac, 0x4d, 0xe5, 0x6e, 0x76, 0x47, 0x78, 0x93,
	0x6a, 0xe7, 0xfc, 0x92, 0xe3, 0x20, 0xdc, 0xe4, 0x0e, 0x6c, 0x66, 0x35, 0x97, 0x9d, 0x33, 0xb5,
	0xad, 0x76, 0x5b, 0xc7, 0xb2, 0x84, 0x67, 0x90, 0x51, 0xa3, 0x52, 0xce, 0x1d, 0xfe, 0x69, 0x11,
	0x56, 0x52, 0x83, 0x8a, 0x4e, 0xbd, 0x3b, 0xea, 0x91, 0x33, 0x58, 0x6c, 0x98, 0x26, 0x93, 0x91,
	0x9d, 0xa8, 0x50, 0xa7, 0x4d, 0x34, 0x5b, 0x6f, 0x1f, 0x52, 0xf3, 0x6f, 0x16, 0x7b, 0xd2, 0x8f,
	0x25, 0xd2, 0x86, 0x42, 0xcb, 0xb4, 0x82, 0xd7, 0x0a, 0x77, 0x0e, 0x8b, 0xc7, 0x74, 0x88, 0xd1,
	0x6a, 0x91, 0xf9, 0x03, 0x23, 0xea, 0x4c, 0x01, 0x7f, 0x07, 0xa5, 0x13, 0x8a, 0xe9, 0xe1, 0x47,
	0x9c, 0xdd, 0xc8, 0xe5, 0x91, 0x2f, 0xde, 0x5b, 0x9f, 0x3e, 0x61, 0x95, 0x88, 0x7f, 0x05, 0xe5,
	0x70, 0x76, 0xc5, 0xac, 0x63, 0xd7, 0xc7, 0x46, 0xda, 0x99, 0x52, 0xef, 0xc1, 0x52, 0x62, 0xe6,
	0xc4, 0xe8, 0x7b, 0x91, 0xdb, 0x13, 0xd3, 0xe8, 0x4c, 0x3f, 0xf0, 0x4b, 0x28, 0x25, 0x86, 0x41,
	0x12, 0xbb, 0x4c, 0x1d, 0x11, 0x67, 0x0a, 0x79, 0x09, 0x95, 0x54, 0x4f, 0x4f, 0xde, 0xe2, 0xf4,
	0x5e, 0x3f, 0x53, 0xd8, 0x6b, 0x90, 0x93, 0x1f, 0xcf, 0x9e, 0x71, 0x95, 0x29, 0xab, 0x87, 0xbe,
	0xbe, 0xe1, 0x6f, 0xe8, 0x50, 0xd1, 0xe8, 0x2b, 0x9f, 0xc7, 0xd1, 0xe9, 0x6f, 0x3e, 0x1b, 0x58,
	0xc1, 0xd0, 0xb8, 0x3e, 0xf0, 0x83, 0x7b, 0xf3, 0xa0, 0x6f, 0x7f, 0x18, 0x07, 0x0e, 0xfb, 0xf7,
	0x23, 0xdf, 0xfc, 0xea, 0xc3, 0xc0, 0xf9, 0x80, 0xff, 0xb7, 0xfb, 0x41, 0x04, 0xfa, 0x52, 0xfc,
	0xfd, 0x57, 0x4e, 0xbe, 0x0c, 0x9c, 0x0b, 0xa6, 0xfa, 0xad, 0xf8, 0x50, 0x76, 0xbd, 0x80, 0x96,
	0x9f, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x26, 0xca, 0x14, 0x44, 0x1e, 0x00, 0x00,
}
