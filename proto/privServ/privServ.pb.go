// Code generated by protoc-gen-go. DO NOT EDIT.
// source: privServ.proto

package privServ // import "j7go/proto/privServ"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "go.7yes.com/j7f/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 权限校验返回值，含: grant, remove, check
type GrantReply struct {
	Status               *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Result               bool                   `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GrantReply) Reset()         { *m = GrantReply{} }
func (m *GrantReply) String() string { return proto.CompactTextString(m) }
func (*GrantReply) ProtoMessage()    {}
func (*GrantReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_privServ_8f359e32371c58de, []int{0}
}
func (m *GrantReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrantReply.Unmarshal(m, b)
}
func (m *GrantReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrantReply.Marshal(b, m, deterministic)
}
func (dst *GrantReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantReply.Merge(dst, src)
}
func (m *GrantReply) XXX_Size() int {
	return xxx_messageInfo_GrantReply.Size(m)
}
func (m *GrantReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantReply.DiscardUnknown(m)
}

var xxx_messageInfo_GrantReply proto.InternalMessageInfo

func (m *GrantReply) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GrantReply) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 权限操作入参, 含grant, remove,check
type Policy struct {
	Header               *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Subject              string               `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Object               string               `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Action               string               `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Domain               string               `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	IsGroup              bool                 `protobuf:"varint,6,opt,name=is_group,json=isGroup,proto3" json:"is_group,omitempty"`
	Subject1             string               `protobuf:"bytes,7,opt,name=subject1,proto3" json:"subject1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_privServ_8f359e32371c58de, []int{1}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Policy.Unmarshal(m, b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
}
func (dst *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(dst, src)
}
func (m *Policy) XXX_Size() int {
	return xxx_messageInfo_Policy.Size(m)
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Policy) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Policy) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *Policy) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Policy) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Policy) GetIsGroup() bool {
	if m != nil {
		return m.IsGroup
	}
	return false
}

func (m *Policy) GetSubject1() string {
	if m != nil {
		return m.Subject1
	}
	return ""
}

func init() {
	proto.RegisterType((*GrantReply)(nil), "privServ.GrantReply")
	proto.RegisterType((*Policy)(nil), "privServ.Policy")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrivServerClient is the client API for PrivServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivServerClient interface {
	// 添加一个权限关系或者权限继承
	GrantPriv(ctx context.Context, opts ...grpc.CallOption) (PrivServer_GrantPrivClient, error)
	// 移除一个权限关系
	RemovePriv(ctx context.Context, opts ...grpc.CallOption) (PrivServer_RemovePrivClient, error)
	// 校验是否设置了权限关系
	CheckPriv(ctx context.Context, opts ...grpc.CallOption) (PrivServer_CheckPrivClient, error)
}

type privServerClient struct {
	cc *grpc.ClientConn
}

func NewPrivServerClient(cc *grpc.ClientConn) PrivServerClient {
	return &privServerClient{cc}
}

func (c *privServerClient) GrantPriv(ctx context.Context, opts ...grpc.CallOption) (PrivServer_GrantPrivClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PrivServer_serviceDesc.Streams[0], "/privServ.PrivServer/GrantPriv", opts...)
	if err != nil {
		return nil, err
	}
	x := &privServerGrantPrivClient{stream}
	return x, nil
}

type PrivServer_GrantPrivClient interface {
	Send(*Policy) error
	Recv() (*GrantReply, error)
	grpc.ClientStream
}

type privServerGrantPrivClient struct {
	grpc.ClientStream
}

func (x *privServerGrantPrivClient) Send(m *Policy) error {
	return x.ClientStream.SendMsg(m)
}

func (x *privServerGrantPrivClient) Recv() (*GrantReply, error) {
	m := new(GrantReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *privServerClient) RemovePriv(ctx context.Context, opts ...grpc.CallOption) (PrivServer_RemovePrivClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PrivServer_serviceDesc.Streams[1], "/privServ.PrivServer/RemovePriv", opts...)
	if err != nil {
		return nil, err
	}
	x := &privServerRemovePrivClient{stream}
	return x, nil
}

type PrivServer_RemovePrivClient interface {
	Send(*Policy) error
	Recv() (*GrantReply, error)
	grpc.ClientStream
}

type privServerRemovePrivClient struct {
	grpc.ClientStream
}

func (x *privServerRemovePrivClient) Send(m *Policy) error {
	return x.ClientStream.SendMsg(m)
}

func (x *privServerRemovePrivClient) Recv() (*GrantReply, error) {
	m := new(GrantReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *privServerClient) CheckPriv(ctx context.Context, opts ...grpc.CallOption) (PrivServer_CheckPrivClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PrivServer_serviceDesc.Streams[2], "/privServ.PrivServer/CheckPriv", opts...)
	if err != nil {
		return nil, err
	}
	x := &privServerCheckPrivClient{stream}
	return x, nil
}

type PrivServer_CheckPrivClient interface {
	Send(*Policy) error
	Recv() (*GrantReply, error)
	grpc.ClientStream
}

type privServerCheckPrivClient struct {
	grpc.ClientStream
}

func (x *privServerCheckPrivClient) Send(m *Policy) error {
	return x.ClientStream.SendMsg(m)
}

func (x *privServerCheckPrivClient) Recv() (*GrantReply, error) {
	m := new(GrantReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrivServerServer is the server API for PrivServer service.
type PrivServerServer interface {
	// 添加一个权限关系或者权限继承
	GrantPriv(PrivServer_GrantPrivServer) error
	// 移除一个权限关系
	RemovePriv(PrivServer_RemovePrivServer) error
	// 校验是否设置了权限关系
	CheckPriv(PrivServer_CheckPrivServer) error
}

func RegisterPrivServerServer(s *grpc.Server, srv PrivServerServer) {
	s.RegisterService(&_PrivServer_serviceDesc, srv)
}

func _PrivServer_GrantPriv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrivServerServer).GrantPriv(&privServerGrantPrivServer{stream})
}

type PrivServer_GrantPrivServer interface {
	Send(*GrantReply) error
	Recv() (*Policy, error)
	grpc.ServerStream
}

type privServerGrantPrivServer struct {
	grpc.ServerStream
}

func (x *privServerGrantPrivServer) Send(m *GrantReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *privServerGrantPrivServer) Recv() (*Policy, error) {
	m := new(Policy)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PrivServer_RemovePriv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrivServerServer).RemovePriv(&privServerRemovePrivServer{stream})
}

type PrivServer_RemovePrivServer interface {
	Send(*GrantReply) error
	Recv() (*Policy, error)
	grpc.ServerStream
}

type privServerRemovePrivServer struct {
	grpc.ServerStream
}

func (x *privServerRemovePrivServer) Send(m *GrantReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *privServerRemovePrivServer) Recv() (*Policy, error) {
	m := new(Policy)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PrivServer_CheckPriv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrivServerServer).CheckPriv(&privServerCheckPrivServer{stream})
}

type PrivServer_CheckPrivServer interface {
	Send(*GrantReply) error
	Recv() (*Policy, error)
	grpc.ServerStream
}

type privServerCheckPrivServer struct {
	grpc.ServerStream
}

func (x *privServerCheckPrivServer) Send(m *GrantReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *privServerCheckPrivServer) Recv() (*Policy, error) {
	m := new(Policy)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PrivServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "privServ.PrivServer",
	HandlerType: (*PrivServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GrantPriv",
			Handler:       _PrivServer_GrantPriv_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RemovePriv",
			Handler:       _PrivServer_RemovePriv_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CheckPriv",
			Handler:       _PrivServer_CheckPriv_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "privServ.proto",
}

func init() { proto.RegisterFile("privServ.proto", fileDescriptor_privServ_8f359e32371c58de) }

var fileDescriptor_privServ_8f359e32371c58de = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x99, 0x7e, 0x9f, 0x69, 0x7a, 0x15, 0xd1, 0xa1, 0x94, 0xb1, 0xab, 0xd2, 0x55, 0x17,
	0x9a, 0x68, 0x45, 0x2a, 0xb8, 0x6b, 0x17, 0x15, 0xdc, 0x94, 0x54, 0x37, 0x22, 0x48, 0x9a, 0x0c,
	0xed, 0xd8, 0x24, 0x13, 0x66, 0x26, 0x85, 0xbc, 0x99, 0xcf, 0xe0, 0xc6, 0x57, 0x92, 0xf9, 0x93,
	0x76, 0xdd, 0x45, 0x48, 0x7e, 0xe7, 0xdc, 0x7b, 0x27, 0xf7, 0x30, 0x70, 0x5e, 0x0a, 0xb6, 0x5b,
	0x52, 0xb1, 0x0b, 0x4a, 0xc1, 0x15, 0xc7, 0x7e, 0xc3, 0xfd, 0xb3, 0x84, 0xe7, 0x39, 0x2f, 0xac,
	0x3e, 0x7c, 0x05, 0x98, 0x8b, 0xb8, 0x50, 0x11, 0x2d, 0xb3, 0x1a, 0x07, 0xe0, 0x49, 0x15, 0xab,
	0x4a, 0x12, 0x34, 0x40, 0xa3, 0xd3, 0x71, 0x2f, 0x70, 0xc5, 0xd3, 0x4a, 0xb2, 0x82, 0x4a, 0xb9,
	0x34, 0x6e, 0xe4, 0xaa, 0x70, 0x0f, 0x3c, 0x41, 0x65, 0x95, 0x29, 0xd2, 0x1a, 0xa0, 0x91, 0x1f,
	0x39, 0x1a, 0xfe, 0x22, 0xf0, 0x16, 0x3c, 0x63, 0x49, 0x8d, 0xaf, 0xc1, 0xdb, 0xd0, 0x38, 0xa5,
	0xc2, 0x8d, 0xec, 0x36, 0x23, 0x67, 0xe6, 0xf5, 0x6c, 0xbc, 0xc8, 0xd5, 0x60, 0x02, 0x6d, 0x59,
	0xad, 0xbe, 0x68, 0x62, 0x27, 0x76, 0xa2, 0x06, 0xf5, 0x51, 0xdc, 0x1a, 0xff, 0x8c, 0xe1, 0x48,
	0xeb, 0x71, 0xa2, 0x18, 0x2f, 0xc8, 0x7f, 0xab, 0x5b, 0xd2, 0x7a, 0xca, 0xf3, 0x98, 0x15, 0xe4,
	0xc4, 0xea, 0x96, 0xf0, 0x15, 0xf8, 0x4c, 0x7e, 0xae, 0x05, 0xaf, 0x4a, 0xe2, 0x99, 0x9f, 0x6e,
	0x33, 0x39, 0xd7, 0x88, 0xfb, 0xe0, 0xbb, 0xd3, 0xee, 0x48, 0xdb, 0x34, 0xed, 0x79, 0xfc, 0x8d,
	0x00, 0x16, 0x2e, 0x42, 0x2a, 0xf0, 0x04, 0x3a, 0x26, 0x36, 0x2d, 0xe1, 0x8b, 0x60, 0x1f, 0xb6,
	0x5d, 0xba, 0xdf, 0x3d, 0x28, 0x87, 0x74, 0x47, 0xe8, 0x16, 0xe1, 0x47, 0x80, 0x88, 0xe6, 0x7c,
	0x47, 0x8f, 0xee, 0x9c, 0x40, 0x67, 0xb6, 0xa1, 0xc9, 0xf6, 0xd8, 0xc6, 0xe9, 0xcb, 0xfb, 0xc3,
	0x9a, 0xa9, 0x2c, 0x5e, 0x05, 0x52, 0xd5, 0x69, 0x90, 0x14, 0x61, 0xa5, 0xb8, 0x7e, 0x6e, 0x64,
	0xba, 0x0d, 0xd7, 0x3c, 0x34, 0x37, 0x21, 0x6c, 0xda, 0x9f, 0x9a, 0x8f, 0x9f, 0xd6, 0xe5, 0x9b,
	0xe2, 0x0b, 0x6d, 0x7e, 0x34, 0xab, 0xaf, 0x3c, 0x53, 0x7c, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x5c, 0x6b, 0x7e, 0x04, 0x60, 0x02, 0x00, 0x00,
}
