// Code generated by protoc-gen-go. DO NOT EDIT.
// source: member.proto

package member // import "j7go/proto/member"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/joselee214/j7f/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 性别
type Sex int32

const (
	// 初始类型无意义
	Sex_SEX_INIT Sex = 0
	// 男性
	Sex_MALE Sex = 1
	// 女性
	Sex_FEMALE Sex = 2
	// 未知
	Sex_UNKNOWN_SEX Sex = 3
)

var Sex_name = map[int32]string{
	0: "SEX_INIT",
	1: "MALE",
	2: "FEMALE",
	3: "UNKNOWN_SEX",
}
var Sex_value = map[string]int32{
	"SEX_INIT":    0,
	"MALE":        1,
	"FEMALE":      2,
	"UNKNOWN_SEX": 3,
}

func (x Sex) String() string {
	return proto.EnumName(Sex_name, int32(x))
}
func (Sex) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{0}
}

// 证件类型
type IdCardType int32

const (
	// 初始类型无意义
	IdCardType_ID_CARD_TYPE_INIT IdCardType = 0
	// 未知
	IdCardType_UNKNOWN_ID_CARD_TYPE IdCardType = 1
	// 身份证
	IdCardType_ID_CARD IdCardType = 2
	// 护照
	IdCardType_PASSPORT IdCardType = 3
)

var IdCardType_name = map[int32]string{
	0: "ID_CARD_TYPE_INIT",
	1: "UNKNOWN_ID_CARD_TYPE",
	2: "ID_CARD",
	3: "PASSPORT",
}
var IdCardType_value = map[string]int32{
	"ID_CARD_TYPE_INIT":    0,
	"UNKNOWN_ID_CARD_TYPE": 1,
	"ID_CARD":              2,
	"PASSPORT":             3,
}

func (x IdCardType) String() string {
	return proto.EnumName(IdCardType_name, int32(x))
}
func (IdCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{1}
}

// 受教育类型
type EducationLevel int32

const (
	// 初始类型无意义
	EducationLevel_EDUCATION_LEVEL_INIT EducationLevel = 0
	// 未知
	EducationLevel_UNKNOWN_EDUCATION_LEVEL EducationLevel = 1
	// 小学
	EducationLevel_PRIMARY_SCHOOL EducationLevel = 2
	// 初中
	EducationLevel_JUNIOR_HIGH_SCHOOL EducationLevel = 3
	// 高中
	EducationLevel_SENIOR_HIGH_SCHOOL EducationLevel = 4
	// 大专
	EducationLevel_JUNIOR_COLLEGE EducationLevel = 5
	// 大学
	EducationLevel_COLLEGE EducationLevel = 6
	// 硕士
	EducationLevel_MASTER EducationLevel = 7
	// 博士
	EducationLevel_DOCTOR EducationLevel = 8
)

var EducationLevel_name = map[int32]string{
	0: "EDUCATION_LEVEL_INIT",
	1: "UNKNOWN_EDUCATION_LEVEL",
	2: "PRIMARY_SCHOOL",
	3: "JUNIOR_HIGH_SCHOOL",
	4: "SENIOR_HIGH_SCHOOL",
	5: "JUNIOR_COLLEGE",
	6: "COLLEGE",
	7: "MASTER",
	8: "DOCTOR",
}
var EducationLevel_value = map[string]int32{
	"EDUCATION_LEVEL_INIT":    0,
	"UNKNOWN_EDUCATION_LEVEL": 1,
	"PRIMARY_SCHOOL":          2,
	"JUNIOR_HIGH_SCHOOL":      3,
	"SENIOR_HIGH_SCHOOL":      4,
	"JUNIOR_COLLEGE":          5,
	"COLLEGE":                 6,
	"MASTER":                  7,
	"DOCTOR":                  8,
}

func (x EducationLevel) String() string {
	return proto.EnumName(EducationLevel_name, int32(x))
}
func (EducationLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{2}
}

// 结婚类型
type MarriedType int32

const (
	// 初始类型无意义
	MarriedType_IS_MARRIED_INIT MarriedType = 0
	// 未知
	MarriedType_UNKNOWN_IS_MARRIED MarriedType = 1
	// 未婚
	MarriedType_UNMARRIED MarriedType = 2
	// 已婚
	MarriedType_MARRIED MarriedType = 3
)

var MarriedType_name = map[int32]string{
	0: "IS_MARRIED_INIT",
	1: "UNKNOWN_IS_MARRIED",
	2: "UNMARRIED",
	3: "MARRIED",
}
var MarriedType_value = map[string]int32{
	"IS_MARRIED_INIT":    0,
	"UNKNOWN_IS_MARRIED": 1,
	"UNMARRIED":          2,
	"MARRIED":            3,
}

func (x MarriedType) String() string {
	return proto.EnumName(MarriedType_name, int32(x))
}
func (MarriedType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{3}
}

// 是否有孩子
type HasChildren int32

const (
	// 初始类型无意义
	HasChildren_HAS_CHILDREN_INIT HasChildren = 0
	// 未知
	HasChildren_UNKNOWN_HAS_CHILDREN HasChildren = 1
	// 有
	HasChildren_HAS HasChildren = 2
	// 没有
	HasChildren_NONE HasChildren = 3
)

var HasChildren_name = map[int32]string{
	0: "HAS_CHILDREN_INIT",
	1: "UNKNOWN_HAS_CHILDREN",
	2: "HAS",
	3: "NONE",
}
var HasChildren_value = map[string]int32{
	"HAS_CHILDREN_INIT":    0,
	"UNKNOWN_HAS_CHILDREN": 1,
	"HAS":                  2,
	"NONE":                 3,
}

func (x HasChildren) String() string {
	return proto.EnumName(HasChildren_name, int32(x))
}
func (HasChildren) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{4}
}

// 健身级别
type FitnessLevel int32

const (
	// 初始类型无意义
	FitnessLevel_FITNESS_LEVEL_INIT FitnessLevel = 0
	FitnessLevel_ONE                FitnessLevel = 1
	FitnessLevel_TWO                FitnessLevel = 2
	FitnessLevel_THREE              FitnessLevel = 3
	FitnessLevel_FOUR               FitnessLevel = 4
	FitnessLevel_FIVE               FitnessLevel = 5
	// 未知
	FitnessLevel_UNKONOWN_FITNESS_LEVEL FitnessLevel = 6
)

var FitnessLevel_name = map[int32]string{
	0: "FITNESS_LEVEL_INIT",
	1: "ONE",
	2: "TWO",
	3: "THREE",
	4: "FOUR",
	5: "FIVE",
	6: "UNKONOWN_FITNESS_LEVEL",
}
var FitnessLevel_value = map[string]int32{
	"FITNESS_LEVEL_INIT":     0,
	"ONE":                    1,
	"TWO":                    2,
	"THREE":                  3,
	"FOUR":                   4,
	"FIVE":                   5,
	"UNKONOWN_FITNESS_LEVEL": 6,
}

func (x FitnessLevel) String() string {
	return proto.EnumName(FitnessLevel_name, int32(x))
}
func (FitnessLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{5}
}

// 注册类型
type RegisterType int32

const (
	RegisterType_REGISTER_TYPE_INIT    RegisterType = 0
	RegisterType_UNKNOWN_REGISTER_TYPE RegisterType = 1
	RegisterType_ONLINE                RegisterType = 2
	RegisterType_OFFLINE               RegisterType = 3
)

var RegisterType_name = map[int32]string{
	0: "REGISTER_TYPE_INIT",
	1: "UNKNOWN_REGISTER_TYPE",
	2: "ONLINE",
	3: "OFFLINE",
}
var RegisterType_value = map[string]int32{
	"REGISTER_TYPE_INIT":    0,
	"UNKNOWN_REGISTER_TYPE": 1,
	"ONLINE":                2,
	"OFFLINE":               3,
}

func (x RegisterType) String() string {
	return proto.EnumName(RegisterType_name, int32(x))
}
func (RegisterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{6}
}

// 添加会员请求
type AddMemberRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 会员信息
	MemberInfo           *MemberInfo `protobuf:"bytes,2,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddMemberRequest) Reset()         { *m = AddMemberRequest{} }
func (m *AddMemberRequest) String() string { return proto.CompactTextString(m) }
func (*AddMemberRequest) ProtoMessage()    {}
func (*AddMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{0}
}
func (m *AddMemberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMemberRequest.Unmarshal(m, b)
}
func (m *AddMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMemberRequest.Marshal(b, m, deterministic)
}
func (dst *AddMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMemberRequest.Merge(dst, src)
}
func (m *AddMemberRequest) XXX_Size() int {
	return xxx_messageInfo_AddMemberRequest.Size(m)
}
func (m *AddMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMemberRequest proto.InternalMessageInfo

func (m *AddMemberRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddMemberRequest) GetMemberInfo() *MemberInfo {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

// 添加会员响应
type AddMemberResponse struct {
	// 公共响应状态
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 会员id
	MemberId             uint32   `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMemberResponse) Reset()         { *m = AddMemberResponse{} }
func (m *AddMemberResponse) String() string { return proto.CompactTextString(m) }
func (*AddMemberResponse) ProtoMessage()    {}
func (*AddMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{1}
}
func (m *AddMemberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMemberResponse.Unmarshal(m, b)
}
func (m *AddMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMemberResponse.Marshal(b, m, deterministic)
}
func (dst *AddMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMemberResponse.Merge(dst, src)
}
func (m *AddMemberResponse) XXX_Size() int {
	return xxx_messageInfo_AddMemberResponse.Size(m)
}
func (m *AddMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddMemberResponse proto.InternalMessageInfo

func (m *AddMemberResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AddMemberResponse) GetMemberId() uint32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

// 编辑会员请求
type EditMemberRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 会员信息
	MemberInfo           *MemberInfo `protobuf:"bytes,2,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EditMemberRequest) Reset()         { *m = EditMemberRequest{} }
func (m *EditMemberRequest) String() string { return proto.CompactTextString(m) }
func (*EditMemberRequest) ProtoMessage()    {}
func (*EditMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{2}
}
func (m *EditMemberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditMemberRequest.Unmarshal(m, b)
}
func (m *EditMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditMemberRequest.Marshal(b, m, deterministic)
}
func (dst *EditMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditMemberRequest.Merge(dst, src)
}
func (m *EditMemberRequest) XXX_Size() int {
	return xxx_messageInfo_EditMemberRequest.Size(m)
}
func (m *EditMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditMemberRequest proto.InternalMessageInfo

func (m *EditMemberRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EditMemberRequest) GetMemberInfo() *MemberInfo {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

// 编辑会员响应
type EditMemberResponse struct {
	// 公共响应状态
	Status               *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EditMemberResponse) Reset()         { *m = EditMemberResponse{} }
func (m *EditMemberResponse) String() string { return proto.CompactTextString(m) }
func (*EditMemberResponse) ProtoMessage()    {}
func (*EditMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{3}
}
func (m *EditMemberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditMemberResponse.Unmarshal(m, b)
}
func (m *EditMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditMemberResponse.Marshal(b, m, deterministic)
}
func (dst *EditMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditMemberResponse.Merge(dst, src)
}
func (m *EditMemberResponse) XXX_Size() int {
	return xxx_messageInfo_EditMemberResponse.Size(m)
}
func (m *EditMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EditMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EditMemberResponse proto.InternalMessageInfo

func (m *EditMemberResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// 会员信息
type MemberInfo struct {
	BrandId                uint32         `protobuf:"varint,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ShopId                 uint32         `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	MemberName             string         `protobuf:"bytes,3,opt,name=member_name,json=memberName,proto3" json:"member_name,omitempty"`
	CountryPrefix          uint32         `protobuf:"varint,4,opt,name=country_prefix,json=countryPrefix,proto3" json:"country_prefix,omitempty"`
	Mobile                 string         `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Sex                    Sex            `protobuf:"varint,6,opt,name=sex,proto3,enum=member.Sex" json:"sex,omitempty"`
	Weight                 uint32         `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Height                 uint32         `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	IdCardType             IdCardType     `protobuf:"varint,9,opt,name=id_card_type,json=idCardType,proto3,enum=member.IdCardType" json:"id_card_type,omitempty"`
	IdCard                 string         `protobuf:"bytes,10,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	Jobs                   string         `protobuf:"bytes,11,opt,name=jobs,proto3" json:"jobs,omitempty"`
	EducationLevel         EducationLevel `protobuf:"varint,12,opt,name=education_level,json=educationLevel,proto3,enum=member.EducationLevel" json:"education_level,omitempty"`
	MarriedType            MarriedType    `protobuf:"varint,13,opt,name=married_type,json=marriedType,proto3,enum=member.MarriedType" json:"married_type,omitempty"`
	HasChildren            HasChildren    `protobuf:"varint,14,opt,name=has_children,json=hasChildren,proto3,enum=member.HasChildren" json:"has_children,omitempty"`
	MemberComment          string         `protobuf:"bytes,15,opt,name=member_comment,json=memberComment,proto3" json:"member_comment,omitempty"`
	Email                  string         `protobuf:"bytes,16,opt,name=email,proto3" json:"email,omitempty"`
	NationId               uint32         `protobuf:"varint,17,opt,name=nation_id,json=nationId,proto3" json:"nation_id,omitempty"`
	EmergencyContactName   string         `protobuf:"bytes,18,opt,name=emergency_contact_name,json=emergencyContactName,proto3" json:"emergency_contact_name,omitempty"`
	EmergencyContactMobile string         `protobuf:"bytes,19,opt,name=emergency_contact_mobile,json=emergencyContactMobile,proto3" json:"emergency_contact_mobile,omitempty"`
	LivingAddress          string         `protobuf:"bytes,20,opt,name=living_address,json=livingAddress,proto3" json:"living_address,omitempty"`
	FitnessGoal            string         `protobuf:"bytes,21,opt,name=fitness_goal,json=fitnessGoal,proto3" json:"fitness_goal,omitempty"`
	FitnessLevel           FitnessLevel   `protobuf:"varint,22,opt,name=fitness_level,json=fitnessLevel,proto3,enum=member.FitnessLevel" json:"fitness_level,omitempty"`
	IncomeLevel            string         `protobuf:"bytes,23,opt,name=income_level,json=incomeLevel,proto3" json:"income_level,omitempty"`
	RegisterType           RegisterType   `protobuf:"varint,24,opt,name=register_type,json=registerType,proto3,enum=member.RegisterType" json:"register_type,omitempty"`
	RegisterWay            uint32         `protobuf:"varint,25,opt,name=register_way,json=registerWay,proto3" json:"register_way,omitempty"`
	ProvinceId             uint32         `protobuf:"varint,26,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	CityId                 uint32         `protobuf:"varint,27,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	DistrictId             uint32         `protobuf:"varint,28,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	Birthday               string         `protobuf:"bytes,29,opt,name=birthday,proto3" json:"birthday,omitempty"`
	CountryId              uint32         `protobuf:"varint,30,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}       `json:"-"`
	XXX_unrecognized       []byte         `json:"-"`
	XXX_sizecache          int32          `json:"-"`
}

func (m *MemberInfo) Reset()         { *m = MemberInfo{} }
func (m *MemberInfo) String() string { return proto.CompactTextString(m) }
func (*MemberInfo) ProtoMessage()    {}
func (*MemberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_01c7e3b45037ba5f, []int{4}
}
func (m *MemberInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberInfo.Unmarshal(m, b)
}
func (m *MemberInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberInfo.Marshal(b, m, deterministic)
}
func (dst *MemberInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberInfo.Merge(dst, src)
}
func (m *MemberInfo) XXX_Size() int {
	return xxx_messageInfo_MemberInfo.Size(m)
}
func (m *MemberInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MemberInfo proto.InternalMessageInfo

func (m *MemberInfo) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *MemberInfo) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *MemberInfo) GetMemberName() string {
	if m != nil {
		return m.MemberName
	}
	return ""
}

func (m *MemberInfo) GetCountryPrefix() uint32 {
	if m != nil {
		return m.CountryPrefix
	}
	return 0
}

func (m *MemberInfo) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *MemberInfo) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return Sex_SEX_INIT
}

func (m *MemberInfo) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *MemberInfo) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MemberInfo) GetIdCardType() IdCardType {
	if m != nil {
		return m.IdCardType
	}
	return IdCardType_ID_CARD_TYPE_INIT
}

func (m *MemberInfo) GetIdCard() string {
	if m != nil {
		return m.IdCard
	}
	return ""
}

func (m *MemberInfo) GetJobs() string {
	if m != nil {
		return m.Jobs
	}
	return ""
}

func (m *MemberInfo) GetEducationLevel() EducationLevel {
	if m != nil {
		return m.EducationLevel
	}
	return EducationLevel_EDUCATION_LEVEL_INIT
}

func (m *MemberInfo) GetMarriedType() MarriedType {
	if m != nil {
		return m.MarriedType
	}
	return MarriedType_IS_MARRIED_INIT
}

func (m *MemberInfo) GetHasChildren() HasChildren {
	if m != nil {
		return m.HasChildren
	}
	return HasChildren_HAS_CHILDREN_INIT
}

func (m *MemberInfo) GetMemberComment() string {
	if m != nil {
		return m.MemberComment
	}
	return ""
}

func (m *MemberInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *MemberInfo) GetNationId() uint32 {
	if m != nil {
		return m.NationId
	}
	return 0
}

func (m *MemberInfo) GetEmergencyContactName() string {
	if m != nil {
		return m.EmergencyContactName
	}
	return ""
}

func (m *MemberInfo) GetEmergencyContactMobile() string {
	if m != nil {
		return m.EmergencyContactMobile
	}
	return ""
}

func (m *MemberInfo) GetLivingAddress() string {
	if m != nil {
		return m.LivingAddress
	}
	return ""
}

func (m *MemberInfo) GetFitnessGoal() string {
	if m != nil {
		return m.FitnessGoal
	}
	return ""
}

func (m *MemberInfo) GetFitnessLevel() FitnessLevel {
	if m != nil {
		return m.FitnessLevel
	}
	return FitnessLevel_FITNESS_LEVEL_INIT
}

func (m *MemberInfo) GetIncomeLevel() string {
	if m != nil {
		return m.IncomeLevel
	}
	return ""
}

func (m *MemberInfo) GetRegisterType() RegisterType {
	if m != nil {
		return m.RegisterType
	}
	return RegisterType_REGISTER_TYPE_INIT
}

func (m *MemberInfo) GetRegisterWay() uint32 {
	if m != nil {
		return m.RegisterWay
	}
	return 0
}

func (m *MemberInfo) GetProvinceId() uint32 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *MemberInfo) GetCityId() uint32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *MemberInfo) GetDistrictId() uint32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *MemberInfo) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *MemberInfo) GetCountryId() uint32 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func init() {
	proto.RegisterType((*AddMemberRequest)(nil), "member.AddMemberRequest")
	proto.RegisterType((*AddMemberResponse)(nil), "member.AddMemberResponse")
	proto.RegisterType((*EditMemberRequest)(nil), "member.EditMemberRequest")
	proto.RegisterType((*EditMemberResponse)(nil), "member.EditMemberResponse")
	proto.RegisterType((*MemberInfo)(nil), "member.MemberInfo")
	proto.RegisterEnum("member.Sex", Sex_name, Sex_value)
	proto.RegisterEnum("member.IdCardType", IdCardType_name, IdCardType_value)
	proto.RegisterEnum("member.EducationLevel", EducationLevel_name, EducationLevel_value)
	proto.RegisterEnum("member.MarriedType", MarriedType_name, MarriedType_value)
	proto.RegisterEnum("member.HasChildren", HasChildren_name, HasChildren_value)
	proto.RegisterEnum("member.FitnessLevel", FitnessLevel_name, FitnessLevel_value)
	proto.RegisterEnum("member.RegisterType", RegisterType_name, RegisterType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MemberServerClient is the client API for MemberServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemberServerClient interface {
	// 添加会员
	AddMember(ctx context.Context, opts ...grpc.CallOption) (MemberServer_AddMemberClient, error)
	// 编辑会员
	EditMember(ctx context.Context, opts ...grpc.CallOption) (MemberServer_EditMemberClient, error)
}

type memberServerClient struct {
	cc *grpc.ClientConn
}

func NewMemberServerClient(cc *grpc.ClientConn) MemberServerClient {
	return &memberServerClient{cc}
}

func (c *memberServerClient) AddMember(ctx context.Context, opts ...grpc.CallOption) (MemberServer_AddMemberClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberServer_serviceDesc.Streams[0], "/member.MemberServer/AddMember", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberServerAddMemberClient{stream}
	return x, nil
}

type MemberServer_AddMemberClient interface {
	Send(*AddMemberRequest) error
	Recv() (*AddMemberResponse, error)
	grpc.ClientStream
}

type memberServerAddMemberClient struct {
	grpc.ClientStream
}

func (x *memberServerAddMemberClient) Send(m *AddMemberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberServerAddMemberClient) Recv() (*AddMemberResponse, error) {
	m := new(AddMemberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberServerClient) EditMember(ctx context.Context, opts ...grpc.CallOption) (MemberServer_EditMemberClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MemberServer_serviceDesc.Streams[1], "/member.MemberServer/EditMember", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberServerEditMemberClient{stream}
	return x, nil
}

type MemberServer_EditMemberClient interface {
	Send(*EditMemberRequest) error
	Recv() (*EditMemberResponse, error)
	grpc.ClientStream
}

type memberServerEditMemberClient struct {
	grpc.ClientStream
}

func (x *memberServerEditMemberClient) Send(m *EditMemberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *memberServerEditMemberClient) Recv() (*EditMemberResponse, error) {
	m := new(EditMemberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MemberServerServer is the server API for MemberServer service.
type MemberServerServer interface {
	// 添加会员
	AddMember(MemberServer_AddMemberServer) error
	// 编辑会员
	EditMember(MemberServer_EditMemberServer) error
}

func RegisterMemberServerServer(s *grpc.Server, srv MemberServerServer) {
	s.RegisterService(&_MemberServer_serviceDesc, srv)
}

func _MemberServer_AddMember_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberServerServer).AddMember(&memberServerAddMemberServer{stream})
}

type MemberServer_AddMemberServer interface {
	Send(*AddMemberResponse) error
	Recv() (*AddMemberRequest, error)
	grpc.ServerStream
}

type memberServerAddMemberServer struct {
	grpc.ServerStream
}

func (x *memberServerAddMemberServer) Send(m *AddMemberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberServerAddMemberServer) Recv() (*AddMemberRequest, error) {
	m := new(AddMemberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MemberServer_EditMember_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MemberServerServer).EditMember(&memberServerEditMemberServer{stream})
}

type MemberServer_EditMemberServer interface {
	Send(*EditMemberResponse) error
	Recv() (*EditMemberRequest, error)
	grpc.ServerStream
}

type memberServerEditMemberServer struct {
	grpc.ServerStream
}

func (x *memberServerEditMemberServer) Send(m *EditMemberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *memberServerEditMemberServer) Recv() (*EditMemberRequest, error) {
	m := new(EditMemberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MemberServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "member.MemberServer",
	HandlerType: (*MemberServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddMember",
			Handler:       _MemberServer_AddMember_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EditMember",
			Handler:       _MemberServer_EditMember_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "member.proto",
}

func init() { proto.RegisterFile("member.proto", fileDescriptor_member_01c7e3b45037ba5f) }

var fileDescriptor_member_01c7e3b45037ba5f = []byte{
	// 1220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0xfe, 0x29, 0xd9, 0xba, 0x1c, 0x51, 0x32, 0x3d, 0x71, 0x14, 0x5a, 0xf9, 0xd3, 0x26, 0x06,
	0x02, 0x18, 0x42, 0x6b, 0xb7, 0x49, 0x50, 0x34, 0xed, 0xa2, 0x50, 0x24, 0xda, 0x62, 0x23, 0x93,
	0x2e, 0x29, 0xe5, 0x86, 0x02, 0x2c, 0xc5, 0x19, 0x4b, 0xd3, 0x8a, 0xa4, 0x4a, 0x52, 0x8e, 0xf5,
	0x30, 0x7d, 0x9b, 0xae, 0xfa, 0x26, 0x7d, 0x8b, 0x62, 0x66, 0x38, 0xba, 0x38, 0x5e, 0x75, 0xd1,
	0x85, 0xa0, 0x39, 0xdf, 0x37, 0xe7, 0x3b, 0x97, 0x99, 0x43, 0x12, 0xd4, 0x90, 0x84, 0x63, 0x92,
	0x9c, 0xcc, 0x93, 0x38, 0x8b, 0x51, 0x49, 0x58, 0x2d, 0x35, 0x88, 0xc3, 0x30, 0x8e, 0x04, 0x7a,
	0xb4, 0x00, 0xad, 0x83, 0xf1, 0x05, 0xa7, 0x1c, 0xf2, 0xfb, 0x82, 0xa4, 0x19, 0xfa, 0x02, 0x4a,
	0x53, 0xe2, 0x63, 0x92, 0xe8, 0xca, 0x63, 0xe5, 0xb8, 0xf6, 0xec, 0xe0, 0x24, 0x77, 0xe9, 0xf2,
	0xbf, 0x3e, 0xe7, 0x9c, 0x7c, 0x0f, 0x7a, 0x0e, 0x35, 0xa1, 0xec, 0xd1, 0xe8, 0x2a, 0xd6, 0x0b,
	0xdc, 0x05, 0x9d, 0xe4, 0xb1, 0x85, 0xb2, 0x19, 0x5d, 0xc5, 0x0e, 0x84, 0xab, 0xf5, 0xd1, 0x2f,
	0xb0, 0xbf, 0x11, 0x36, 0x9d, 0xc7, 0x51, 0x4a, 0xd0, 0x09, 0x94, 0xd2, 0xcc, 0xcf, 0x16, 0x69,
	0x1e, 0xb7, 0x29, 0xe3, 0xbe, 0x5a, 0xa4, 0x34, 0x22, 0x69, 0xea, 0x72, 0xd6, 0xc9, 0x77, 0xa1,
	0x87, 0x50, 0x95, 0x91, 0x31, 0x8f, 0x5b, 0x77, 0x2a, 0x79, 0x0c, 0x7c, 0x74, 0x0d, 0xfb, 0x06,
	0xa6, 0xd9, 0x7f, 0x5e, 0x59, 0x0f, 0xd0, 0x66, 0xdc, 0x7f, 0x57, 0xda, 0xd1, 0xdf, 0x15, 0x80,
	0x75, 0x00, 0x74, 0x08, 0x95, 0x71, 0xe2, 0x47, 0x98, 0x15, 0xaa, 0xf0, 0x42, 0xcb, 0xdc, 0x36,
	0x31, 0x7a, 0x00, 0xe5, 0x74, 0x1a, 0xcf, 0xd7, 0x2d, 0x28, 0x31, 0xd3, 0xc4, 0xe8, 0xf3, 0x55,
	0xf6, 0x91, 0x1f, 0x12, 0xbd, 0xf8, 0x58, 0x39, 0xae, 0xca, 0x4c, 0x2d, 0x3f, 0x24, 0xe8, 0x29,
	0x34, 0x82, 0x78, 0x11, 0x65, 0xc9, 0xd2, 0x9b, 0x27, 0xe4, 0x8a, 0xde, 0xe8, 0x3b, 0x5c, 0xa0,
	0x9e, 0xa3, 0x97, 0x1c, 0x44, 0x4d, 0x28, 0x85, 0xf1, 0x98, 0xce, 0x88, 0xbe, 0xcb, 0x25, 0x72,
	0x0b, 0x3d, 0x82, 0x62, 0x4a, 0x6e, 0xf4, 0xd2, 0x63, 0xe5, 0xb8, 0xf1, 0xac, 0x26, 0xbb, 0xe2,
	0x92, 0x1b, 0x87, 0xe1, 0xcc, 0xed, 0x23, 0xa1, 0x93, 0x69, 0xa6, 0x97, 0x45, 0x5a, 0xc2, 0x62,
	0xf8, 0x54, 0xe0, 0x15, 0x81, 0x0b, 0x0b, 0xbd, 0x00, 0x95, 0x62, 0x2f, 0xf0, 0x13, 0xec, 0x65,
	0xcb, 0x39, 0xd1, 0xab, 0x5c, 0x77, 0xd5, 0x6d, 0x13, 0x77, 0xfd, 0x04, 0x0f, 0x97, 0x73, 0xe2,
	0x00, 0x5d, 0xad, 0x59, 0xf5, 0xb9, 0x97, 0x0e, 0x22, 0x3b, 0x41, 0x22, 0x04, 0x3b, 0xbf, 0xc6,
	0xe3, 0x54, 0xaf, 0x71, 0x94, 0xaf, 0xd1, 0x0f, 0xb0, 0x47, 0xf0, 0x22, 0xf0, 0x33, 0x1a, 0x47,
	0xde, 0x8c, 0x5c, 0x93, 0x99, 0xae, 0xf2, 0x28, 0x4d, 0x19, 0xc5, 0x90, 0xf4, 0x80, 0xb1, 0x4e,
	0x83, 0x6c, 0xd9, 0xe8, 0x1b, 0x50, 0x43, 0x3f, 0x49, 0x28, 0xc9, 0x73, 0xac, 0x73, 0xef, 0x7b,
	0xab, 0x1b, 0x21, 0x38, 0x9e, 0x64, 0x2d, 0x5c, 0x1b, 0xcc, 0x6f, 0xea, 0xa7, 0x5e, 0x30, 0xa5,
	0x33, 0x9c, 0x90, 0x48, 0x6f, 0x6c, 0xfb, 0xf5, 0xfd, 0xb4, 0x9b, 0x53, 0x4e, 0x6d, 0xba, 0x36,
	0xd8, 0x09, 0xe5, 0x47, 0xc8, 0x6e, 0x0b, 0x89, 0x32, 0x7d, 0x8f, 0x97, 0x53, 0x17, 0x68, 0x57,
	0x80, 0xe8, 0x00, 0x76, 0x49, 0xe8, 0xd3, 0x99, 0xae, 0x71, 0x56, 0x18, 0x6c, 0x3a, 0x22, 0x51,
	0x2a, 0xc5, 0xfa, 0xbe, 0x98, 0x0e, 0x01, 0x98, 0x18, 0xbd, 0x80, 0x26, 0x09, 0x49, 0x32, 0x21,
	0x51, 0xb0, 0xf4, 0x82, 0x38, 0xca, 0xfc, 0x20, 0x13, 0xf7, 0x04, 0x71, 0x8d, 0x83, 0x15, 0xdb,
	0x15, 0x24, 0xbf, 0x31, 0xdf, 0x82, 0xfe, 0xa9, 0x57, 0x7e, 0x39, 0xee, 0x71, 0xbf, 0xe6, 0x6d,
	0xbf, 0x0b, 0x71, 0x59, 0x9e, 0x42, 0x63, 0x46, 0xaf, 0x69, 0x34, 0xf1, 0x7c, 0x8c, 0x13, 0x92,
	0xa6, 0xfa, 0x81, 0xa8, 0x44, 0xa0, 0x1d, 0x01, 0xa2, 0x27, 0xa0, 0x5e, 0xd1, 0x8c, 0xcd, 0x83,
	0x37, 0x89, 0xfd, 0x99, 0x7e, 0x9f, 0x6f, 0xaa, 0xe5, 0xd8, 0x79, 0xec, 0xcf, 0xd0, 0x4b, 0xa8,
	0xcb, 0x2d, 0xe2, 0x08, 0x9b, 0xbc, 0x99, 0x07, 0xb2, 0x99, 0x67, 0x82, 0x14, 0x07, 0x28, 0xd5,
	0xc4, 0xf1, 0x3d, 0x01, 0x95, 0x46, 0x41, 0x1c, 0x92, 0xdc, 0xf3, 0x81, 0x50, 0x17, 0x98, 0xd8,
	0xf2, 0x12, 0xea, 0x09, 0x99, 0xd0, 0x34, 0x23, 0x89, 0x38, 0x62, 0x7d, 0x5b, 0xdd, 0xc9, 0x49,
	0x7e, 0xc6, 0x6a, 0xb2, 0x61, 0x31, 0xf5, 0x95, 0xeb, 0x47, 0x7f, 0xa9, 0x1f, 0xf2, 0x96, 0xd7,
	0x24, 0xf6, 0xd6, 0x5f, 0xb2, 0x91, 0x9c, 0x27, 0xf1, 0x35, 0x8d, 0x02, 0xc2, 0x0e, 0xa5, 0xc5,
	0x77, 0x80, 0x84, 0xc4, 0x30, 0x07, 0x34, 0x5b, 0x32, 0xf2, 0xa1, 0x98, 0x0e, 0x66, 0x8a, 0x61,
	0xc6, 0x34, 0xcd, 0x12, 0x1a, 0x64, 0x8c, 0xfc, 0xbf, 0xf0, 0x94, 0x90, 0x89, 0x51, 0x0b, 0x2a,
	0x63, 0x9a, 0x64, 0x53, 0xec, 0x2f, 0xf5, 0x47, 0xbc, 0xae, 0x95, 0x8d, 0x1e, 0x01, 0xc8, 0x41,
	0xa7, 0x58, 0xff, 0x8c, 0xfb, 0x56, 0x73, 0xc4, 0xc4, 0xed, 0xef, 0xa0, 0xe8, 0x92, 0x1b, 0xa4,
	0x42, 0xc5, 0x35, 0xde, 0x79, 0xa6, 0x65, 0x0e, 0xb5, 0xff, 0xa1, 0x0a, 0xec, 0x5c, 0x74, 0x06,
	0x86, 0xa6, 0x20, 0x80, 0xd2, 0x99, 0xc1, 0xd7, 0x05, 0xb4, 0x07, 0xb5, 0x91, 0xf5, 0xda, 0xb2,
	0xdf, 0x5a, 0x9e, 0x6b, 0xbc, 0xd3, 0x8a, 0xed, 0x77, 0x00, 0xeb, 0xc9, 0x44, 0xf7, 0x61, 0xdf,
	0xec, 0x79, 0xdd, 0x8e, 0xd3, 0xf3, 0x86, 0xef, 0x2f, 0x0d, 0xa9, 0xa5, 0xc3, 0x81, 0xf4, 0xda,
	0xa4, 0x35, 0x05, 0xd5, 0xa0, 0x9c, 0x23, 0x5a, 0x81, 0x25, 0x70, 0xd9, 0x71, 0xdd, 0x4b, 0xdb,
	0x19, 0x6a, 0xc5, 0xf6, 0x9f, 0x0a, 0x34, 0xb6, 0xc7, 0x91, 0xe9, 0x18, 0xbd, 0x51, 0xb7, 0x33,
	0x34, 0x6d, 0xcb, 0x1b, 0x18, 0x6f, 0x8c, 0x81, 0x8c, 0xf0, 0x10, 0x1e, 0xc8, 0x08, 0xb7, 0x76,
	0x68, 0x0a, 0x42, 0xd0, 0xb8, 0x74, 0xcc, 0x8b, 0x8e, 0xf3, 0xde, 0x73, 0xbb, 0x7d, 0xdb, 0x1e,
	0x68, 0x05, 0xd4, 0x04, 0xf4, 0xe3, 0xc8, 0x32, 0x6d, 0xc7, 0xeb, 0x9b, 0xe7, 0x7d, 0x89, 0x17,
	0x19, 0xee, 0x1a, 0x9f, 0xe0, 0x3b, 0x4c, 0x23, 0xdf, 0xdf, 0xb5, 0x07, 0x03, 0xe3, 0xdc, 0xd0,
	0x76, 0x59, 0xf2, 0xd2, 0x28, 0xb1, 0x2e, 0x5d, 0x74, 0xdc, 0xa1, 0xe1, 0x68, 0x65, 0xb6, 0xee,
	0xd9, 0xdd, 0xa1, 0xed, 0x68, 0x95, 0xf6, 0x1b, 0xa8, 0x6d, 0x3c, 0x16, 0xd0, 0x3d, 0xd8, 0x33,
	0x5d, 0xef, 0xa2, 0xe3, 0x38, 0xa6, 0xd1, 0x93, 0xd9, 0x37, 0x01, 0xad, 0xfa, 0xb3, 0x22, 0x35,
	0x05, 0xd5, 0xa1, 0x3a, 0xb2, 0xa4, 0x59, 0x60, 0xf1, 0xa4, 0x51, 0x6c, 0xff, 0x04, 0xb5, 0x8d,
	0xc7, 0x06, 0xeb, 0x7c, 0xbf, 0xe3, 0x7a, 0xdd, 0xbe, 0x39, 0xe8, 0x39, 0x86, 0x75, 0x47, 0xe7,
	0x37, 0x69, 0x4d, 0x41, 0x65, 0x28, 0xf6, 0x3b, 0xae, 0x56, 0x60, 0x07, 0x6d, 0xd9, 0x96, 0xa1,
	0x15, 0xdb, 0x29, 0xa8, 0x9b, 0xc3, 0xc3, 0xd2, 0x3a, 0x33, 0x87, 0x96, 0xe1, 0xba, 0xdb, 0xcd,
	0x2e, 0x43, 0x91, 0x39, 0x70, 0x8d, 0xe1, 0x5b, 0x5b, 0x2b, 0xa0, 0x2a, 0xec, 0x0e, 0xfb, 0x8e,
	0x61, 0x68, 0x45, 0x26, 0x77, 0x66, 0x8f, 0x1c, 0x6d, 0x87, 0xaf, 0xcc, 0x37, 0xac, 0x51, 0x2d,
	0x68, 0x8e, 0xac, 0xd7, 0x36, 0x4f, 0x63, 0x4b, 0x51, 0x2b, 0xb5, 0x3f, 0x80, 0xba, 0x39, 0x53,
	0x2c, 0xa8, 0x63, 0x9c, 0x9b, 0xac, 0x93, 0x5b, 0x77, 0xe8, 0x10, 0xee, 0xcb, 0x4a, 0xb6, 0x78,
	0x71, 0x41, 0x6d, 0x6b, 0x60, 0x5a, 0x86, 0xe8, 0x91, 0x7d, 0x76, 0xc6, 0x8d, 0xe2, 0xb3, 0x3f,
	0x14, 0x50, 0xc5, 0x4b, 0xd4, 0x25, 0xc9, 0x35, 0x49, 0x50, 0x0f, 0xaa, 0xab, 0xaf, 0x0e, 0xa4,
	0xcb, 0x99, 0xbe, 0xfd, 0xfd, 0xd3, 0x3a, 0xbc, 0x83, 0x11, 0xef, 0xf1, 0x63, 0xe5, 0x2b, 0x05,
	0x9d, 0x03, 0xac, 0xdf, 0xf0, 0xe8, 0x70, 0xfd, 0xee, 0xb8, 0xf5, 0xb5, 0xd1, 0x6a, 0xdd, 0x45,
	0xad, 0x85, 0x5e, 0x19, 0x1f, 0xbe, 0x9e, 0xd0, 0x6c, 0xe6, 0x8f, 0x4f, 0xd2, 0x6c, 0x89, 0x4f,
	0x82, 0xe8, 0x74, 0x91, 0xc5, 0xec, 0xf7, 0x65, 0x8a, 0x7f, 0x3b, 0x9d, 0xc4, 0xa7, 0xfc, 0x13,
	0xed, 0x54, 0x88, 0x7c, 0x2f, 0xfe, 0xfe, 0x2a, 0xec, 0x8d, 0xb2, 0xf8, 0x92, 0x11, 0x3f, 0x0b,
	0xc9, 0x71, 0x89, 0x6f, 0x7b, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0xb6, 0xb7, 0x9c,
	0xef, 0x09, 0x00, 0x00,
}
