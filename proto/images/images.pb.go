// Code generated by protoc-gen-go. DO NOT EDIT.
// source: images.proto

package images // import "j7go/proto/images"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/joselee214/j7f/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 图片类型
type ImageCoverType int32

const (
	// 初始值
	ImageCoverType_COVER_TYPE_INIT ImageCoverType = 0
	// 普通图片
	ImageCoverType_COVER_TYPE_GENERAL ImageCoverType = 1
	// 封面
	ImageCoverType_COVER_TYPE_COVER ImageCoverType = 2
	// logo
	ImageCoverType_COVER_TYPE_LOGO ImageCoverType = 3
	// 头像
	ImageCoverType_COVER_TYPE_HEAD ImageCoverType = 4
	// 人脸
	ImageCoverType_COVER_TYPE_FACE ImageCoverType = 5
)

var ImageCoverType_name = map[int32]string{
	0: "COVER_TYPE_INIT",
	1: "COVER_TYPE_GENERAL",
	2: "COVER_TYPE_COVER",
	3: "COVER_TYPE_LOGO",
	4: "COVER_TYPE_HEAD",
	5: "COVER_TYPE_FACE",
}
var ImageCoverType_value = map[string]int32{
	"COVER_TYPE_INIT":    0,
	"COVER_TYPE_GENERAL": 1,
	"COVER_TYPE_COVER":   2,
	"COVER_TYPE_LOGO":    3,
	"COVER_TYPE_HEAD":    4,
	"COVER_TYPE_FACE":    5,
}

func (x ImageCoverType) String() string {
	return proto.EnumName(ImageCoverType_name, int32(x))
}
func (ImageCoverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{0}
}

// 图片
type Image struct {
	// 图片主键id
	ImageId uint32 `protobuf:"varint,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// 图片地址
	ImageUrl string `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// 图片类型
	CoverType            uint32   `protobuf:"varint,3,opt,name=cover_type,json=coverType,proto3" json:"cover_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{0}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (dst *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(dst, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImageId() uint32 {
	if m != nil {
		return m.ImageId
	}
	return 0
}

func (m *Image) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Image) GetCoverType() uint32 {
	if m != nil {
		return m.CoverType
	}
	return 0
}

// 获取图片请求
type GetImagesRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 相册id
	AlbumId uint32 `protobuf:"varint,2,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	// 图片类型
	CoverType            uint32   `protobuf:"varint,3,opt,name=cover_type,json=coverType,proto3" json:"cover_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetImagesRequest) Reset()         { *m = GetImagesRequest{} }
func (m *GetImagesRequest) String() string { return proto.CompactTextString(m) }
func (*GetImagesRequest) ProtoMessage()    {}
func (*GetImagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{1}
}
func (m *GetImagesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetImagesRequest.Unmarshal(m, b)
}
func (m *GetImagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetImagesRequest.Marshal(b, m, deterministic)
}
func (dst *GetImagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImagesRequest.Merge(dst, src)
}
func (m *GetImagesRequest) XXX_Size() int {
	return xxx_messageInfo_GetImagesRequest.Size(m)
}
func (m *GetImagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetImagesRequest proto.InternalMessageInfo

func (m *GetImagesRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetImagesRequest) GetAlbumId() uint32 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

func (m *GetImagesRequest) GetCoverType() uint32 {
	if m != nil {
		return m.CoverType
	}
	return 0
}

// 获取图片响应
type GetImagesResponse struct {
	// 公共响应状态
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 图片信息
	Images               []*Image `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetImagesResponse) Reset()         { *m = GetImagesResponse{} }
func (m *GetImagesResponse) String() string { return proto.CompactTextString(m) }
func (*GetImagesResponse) ProtoMessage()    {}
func (*GetImagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{2}
}
func (m *GetImagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetImagesResponse.Unmarshal(m, b)
}
func (m *GetImagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetImagesResponse.Marshal(b, m, deterministic)
}
func (dst *GetImagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImagesResponse.Merge(dst, src)
}
func (m *GetImagesResponse) XXX_Size() int {
	return xxx_messageInfo_GetImagesResponse.Size(m)
}
func (m *GetImagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetImagesResponse proto.InternalMessageInfo

func (m *GetImagesResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetImagesResponse) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

// 添加和更新图片请求
type ImagesRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 相册id
	AlbumId uint32 `protobuf:"varint,2,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	// 图片信息
	Images               []*Image `protobuf:"bytes,3,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImagesRequest) Reset()         { *m = ImagesRequest{} }
func (m *ImagesRequest) String() string { return proto.CompactTextString(m) }
func (*ImagesRequest) ProtoMessage()    {}
func (*ImagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{3}
}
func (m *ImagesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImagesRequest.Unmarshal(m, b)
}
func (m *ImagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImagesRequest.Marshal(b, m, deterministic)
}
func (dst *ImagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagesRequest.Merge(dst, src)
}
func (m *ImagesRequest) XXX_Size() int {
	return xxx_messageInfo_ImagesRequest.Size(m)
}
func (m *ImagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImagesRequest proto.InternalMessageInfo

func (m *ImagesRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ImagesRequest) GetAlbumId() uint32 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

func (m *ImagesRequest) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

// 更新和添加图片响应
type ImagesResponse struct {
	// 公共响应状态
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 相册id
	AlbumId              uint32   `protobuf:"varint,2,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImagesResponse) Reset()         { *m = ImagesResponse{} }
func (m *ImagesResponse) String() string { return proto.CompactTextString(m) }
func (*ImagesResponse) ProtoMessage()    {}
func (*ImagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{4}
}
func (m *ImagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImagesResponse.Unmarshal(m, b)
}
func (m *ImagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImagesResponse.Marshal(b, m, deterministic)
}
func (dst *ImagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImagesResponse.Merge(dst, src)
}
func (m *ImagesResponse) XXX_Size() int {
	return xxx_messageInfo_ImagesResponse.Size(m)
}
func (m *ImagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImagesResponse proto.InternalMessageInfo

func (m *ImagesResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ImagesResponse) GetAlbumId() uint32 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

// 单个相册信息响应
type SingleAlbumResponse struct {
	// 图片信息
	Images []*Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	// 相册id
	AlbumId              uint32   `protobuf:"varint,2,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleAlbumResponse) Reset()         { *m = SingleAlbumResponse{} }
func (m *SingleAlbumResponse) String() string { return proto.CompactTextString(m) }
func (*SingleAlbumResponse) ProtoMessage()    {}
func (*SingleAlbumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{5}
}
func (m *SingleAlbumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleAlbumResponse.Unmarshal(m, b)
}
func (m *SingleAlbumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleAlbumResponse.Marshal(b, m, deterministic)
}
func (dst *SingleAlbumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleAlbumResponse.Merge(dst, src)
}
func (m *SingleAlbumResponse) XXX_Size() int {
	return xxx_messageInfo_SingleAlbumResponse.Size(m)
}
func (m *SingleAlbumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleAlbumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleAlbumResponse proto.InternalMessageInfo

func (m *SingleAlbumResponse) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *SingleAlbumResponse) GetAlbumId() uint32 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

// 多相册特定类型图片请求
type AlbumsImagesRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 获取相册id
	AlbumIds []uint32 `protobuf:"varint,2,rep,packed,name=album_ids,json=albumIds,proto3" json:"album_ids,omitempty"`
	// 图片类型
	CoverType            uint32   `protobuf:"varint,3,opt,name=cover_type,json=coverType,proto3" json:"cover_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlbumsImagesRequest) Reset()         { *m = AlbumsImagesRequest{} }
func (m *AlbumsImagesRequest) String() string { return proto.CompactTextString(m) }
func (*AlbumsImagesRequest) ProtoMessage()    {}
func (*AlbumsImagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{6}
}
func (m *AlbumsImagesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlbumsImagesRequest.Unmarshal(m, b)
}
func (m *AlbumsImagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlbumsImagesRequest.Marshal(b, m, deterministic)
}
func (dst *AlbumsImagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlbumsImagesRequest.Merge(dst, src)
}
func (m *AlbumsImagesRequest) XXX_Size() int {
	return xxx_messageInfo_AlbumsImagesRequest.Size(m)
}
func (m *AlbumsImagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AlbumsImagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AlbumsImagesRequest proto.InternalMessageInfo

func (m *AlbumsImagesRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AlbumsImagesRequest) GetAlbumIds() []uint32 {
	if m != nil {
		return m.AlbumIds
	}
	return nil
}

func (m *AlbumsImagesRequest) GetCoverType() uint32 {
	if m != nil {
		return m.CoverType
	}
	return 0
}

// 多相册图片响应
type AlbumsImagesResponse struct {
	// 公共响应状态
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 单个相册图片信息
	SingleAlbumImages    []*SingleAlbumResponse `protobuf:"bytes,2,rep,name=single_album_images,json=singleAlbumImages,proto3" json:"single_album_images,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AlbumsImagesResponse) Reset()         { *m = AlbumsImagesResponse{} }
func (m *AlbumsImagesResponse) String() string { return proto.CompactTextString(m) }
func (*AlbumsImagesResponse) ProtoMessage()    {}
func (*AlbumsImagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{7}
}
func (m *AlbumsImagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlbumsImagesResponse.Unmarshal(m, b)
}
func (m *AlbumsImagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlbumsImagesResponse.Marshal(b, m, deterministic)
}
func (dst *AlbumsImagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlbumsImagesResponse.Merge(dst, src)
}
func (m *AlbumsImagesResponse) XXX_Size() int {
	return xxx_messageInfo_AlbumsImagesResponse.Size(m)
}
func (m *AlbumsImagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AlbumsImagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AlbumsImagesResponse proto.InternalMessageInfo

func (m *AlbumsImagesResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AlbumsImagesResponse) GetSingleAlbumImages() []*SingleAlbumResponse {
	if m != nil {
		return m.SingleAlbumImages
	}
	return nil
}

// 通用的相册图片新增和更改请求
type CommonAlbumImageRequest struct {
	// 相册id
	AlbumId uint32 `protobuf:"varint,1,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	// 图片信息
	Images               []*Image `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonAlbumImageRequest) Reset()         { *m = CommonAlbumImageRequest{} }
func (m *CommonAlbumImageRequest) String() string { return proto.CompactTextString(m) }
func (*CommonAlbumImageRequest) ProtoMessage()    {}
func (*CommonAlbumImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_images_2081967aa9c8dbed, []int{8}
}
func (m *CommonAlbumImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonAlbumImageRequest.Unmarshal(m, b)
}
func (m *CommonAlbumImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonAlbumImageRequest.Marshal(b, m, deterministic)
}
func (dst *CommonAlbumImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonAlbumImageRequest.Merge(dst, src)
}
func (m *CommonAlbumImageRequest) XXX_Size() int {
	return xxx_messageInfo_CommonAlbumImageRequest.Size(m)
}
func (m *CommonAlbumImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonAlbumImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommonAlbumImageRequest proto.InternalMessageInfo

func (m *CommonAlbumImageRequest) GetAlbumId() uint32 {
	if m != nil {
		return m.AlbumId
	}
	return 0
}

func (m *CommonAlbumImageRequest) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*Image)(nil), "images.Image")
	proto.RegisterType((*GetImagesRequest)(nil), "images.GetImagesRequest")
	proto.RegisterType((*GetImagesResponse)(nil), "images.GetImagesResponse")
	proto.RegisterType((*ImagesRequest)(nil), "images.ImagesRequest")
	proto.RegisterType((*ImagesResponse)(nil), "images.ImagesResponse")
	proto.RegisterType((*SingleAlbumResponse)(nil), "images.SingleAlbumResponse")
	proto.RegisterType((*AlbumsImagesRequest)(nil), "images.AlbumsImagesRequest")
	proto.RegisterType((*AlbumsImagesResponse)(nil), "images.AlbumsImagesResponse")
	proto.RegisterType((*CommonAlbumImageRequest)(nil), "images.CommonAlbumImageRequest")
	proto.RegisterEnum("images.ImageCoverType", ImageCoverType_name, ImageCoverType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageServerClient is the client API for ImageServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageServerClient interface {
	// 获取图片
	GetAlbumImages(ctx context.Context, opts ...grpc.CallOption) (ImageServer_GetAlbumImagesClient, error)
	// 更新图片
	UpdateAlbumImages(ctx context.Context, opts ...grpc.CallOption) (ImageServer_UpdateAlbumImagesClient, error)
	// 添加图片
	AddImages(ctx context.Context, opts ...grpc.CallOption) (ImageServer_AddImagesClient, error)
	// 批量获取特定cover_type的相册图片
	GetAlbumImagesByCoverType(ctx context.Context, opts ...grpc.CallOption) (ImageServer_GetAlbumImagesByCoverTypeClient, error)
}

type imageServerClient struct {
	cc *grpc.ClientConn
}

func NewImageServerClient(cc *grpc.ClientConn) ImageServerClient {
	return &imageServerClient{cc}
}

func (c *imageServerClient) GetAlbumImages(ctx context.Context, opts ...grpc.CallOption) (ImageServer_GetAlbumImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageServer_serviceDesc.Streams[0], "/images.ImageServer/GetAlbumImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServerGetAlbumImagesClient{stream}
	return x, nil
}

type ImageServer_GetAlbumImagesClient interface {
	Send(*GetImagesRequest) error
	Recv() (*GetImagesResponse, error)
	grpc.ClientStream
}

type imageServerGetAlbumImagesClient struct {
	grpc.ClientStream
}

func (x *imageServerGetAlbumImagesClient) Send(m *GetImagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageServerGetAlbumImagesClient) Recv() (*GetImagesResponse, error) {
	m := new(GetImagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageServerClient) UpdateAlbumImages(ctx context.Context, opts ...grpc.CallOption) (ImageServer_UpdateAlbumImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageServer_serviceDesc.Streams[1], "/images.ImageServer/UpdateAlbumImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServerUpdateAlbumImagesClient{stream}
	return x, nil
}

type ImageServer_UpdateAlbumImagesClient interface {
	Send(*ImagesRequest) error
	Recv() (*ImagesResponse, error)
	grpc.ClientStream
}

type imageServerUpdateAlbumImagesClient struct {
	grpc.ClientStream
}

func (x *imageServerUpdateAlbumImagesClient) Send(m *ImagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageServerUpdateAlbumImagesClient) Recv() (*ImagesResponse, error) {
	m := new(ImagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageServerClient) AddImages(ctx context.Context, opts ...grpc.CallOption) (ImageServer_AddImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageServer_serviceDesc.Streams[2], "/images.ImageServer/AddImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServerAddImagesClient{stream}
	return x, nil
}

type ImageServer_AddImagesClient interface {
	Send(*ImagesRequest) error
	Recv() (*ImagesResponse, error)
	grpc.ClientStream
}

type imageServerAddImagesClient struct {
	grpc.ClientStream
}

func (x *imageServerAddImagesClient) Send(m *ImagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageServerAddImagesClient) Recv() (*ImagesResponse, error) {
	m := new(ImagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageServerClient) GetAlbumImagesByCoverType(ctx context.Context, opts ...grpc.CallOption) (ImageServer_GetAlbumImagesByCoverTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageServer_serviceDesc.Streams[3], "/images.ImageServer/GetAlbumImagesByCoverType", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServerGetAlbumImagesByCoverTypeClient{stream}
	return x, nil
}

type ImageServer_GetAlbumImagesByCoverTypeClient interface {
	Send(*AlbumsImagesRequest) error
	Recv() (*AlbumsImagesResponse, error)
	grpc.ClientStream
}

type imageServerGetAlbumImagesByCoverTypeClient struct {
	grpc.ClientStream
}

func (x *imageServerGetAlbumImagesByCoverTypeClient) Send(m *AlbumsImagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageServerGetAlbumImagesByCoverTypeClient) Recv() (*AlbumsImagesResponse, error) {
	m := new(AlbumsImagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageServerServer is the server API for ImageServer service.
type ImageServerServer interface {
	// 获取图片
	GetAlbumImages(ImageServer_GetAlbumImagesServer) error
	// 更新图片
	UpdateAlbumImages(ImageServer_UpdateAlbumImagesServer) error
	// 添加图片
	AddImages(ImageServer_AddImagesServer) error
	// 批量获取特定cover_type的相册图片
	GetAlbumImagesByCoverType(ImageServer_GetAlbumImagesByCoverTypeServer) error
}

func RegisterImageServerServer(s *grpc.Server, srv ImageServerServer) {
	s.RegisterService(&_ImageServer_serviceDesc, srv)
}

func _ImageServer_GetAlbumImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServerServer).GetAlbumImages(&imageServerGetAlbumImagesServer{stream})
}

type ImageServer_GetAlbumImagesServer interface {
	Send(*GetImagesResponse) error
	Recv() (*GetImagesRequest, error)
	grpc.ServerStream
}

type imageServerGetAlbumImagesServer struct {
	grpc.ServerStream
}

func (x *imageServerGetAlbumImagesServer) Send(m *GetImagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageServerGetAlbumImagesServer) Recv() (*GetImagesRequest, error) {
	m := new(GetImagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageServer_UpdateAlbumImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServerServer).UpdateAlbumImages(&imageServerUpdateAlbumImagesServer{stream})
}

type ImageServer_UpdateAlbumImagesServer interface {
	Send(*ImagesResponse) error
	Recv() (*ImagesRequest, error)
	grpc.ServerStream
}

type imageServerUpdateAlbumImagesServer struct {
	grpc.ServerStream
}

func (x *imageServerUpdateAlbumImagesServer) Send(m *ImagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageServerUpdateAlbumImagesServer) Recv() (*ImagesRequest, error) {
	m := new(ImagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageServer_AddImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServerServer).AddImages(&imageServerAddImagesServer{stream})
}

type ImageServer_AddImagesServer interface {
	Send(*ImagesResponse) error
	Recv() (*ImagesRequest, error)
	grpc.ServerStream
}

type imageServerAddImagesServer struct {
	grpc.ServerStream
}

func (x *imageServerAddImagesServer) Send(m *ImagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageServerAddImagesServer) Recv() (*ImagesRequest, error) {
	m := new(ImagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageServer_GetAlbumImagesByCoverType_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServerServer).GetAlbumImagesByCoverType(&imageServerGetAlbumImagesByCoverTypeServer{stream})
}

type ImageServer_GetAlbumImagesByCoverTypeServer interface {
	Send(*AlbumsImagesResponse) error
	Recv() (*AlbumsImagesRequest, error)
	grpc.ServerStream
}

type imageServerGetAlbumImagesByCoverTypeServer struct {
	grpc.ServerStream
}

func (x *imageServerGetAlbumImagesByCoverTypeServer) Send(m *AlbumsImagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageServerGetAlbumImagesByCoverTypeServer) Recv() (*AlbumsImagesRequest, error) {
	m := new(AlbumsImagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ImageServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "images.ImageServer",
	HandlerType: (*ImageServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAlbumImages",
			Handler:       _ImageServer_GetAlbumImages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateAlbumImages",
			Handler:       _ImageServer_UpdateAlbumImages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddImages",
			Handler:       _ImageServer_AddImages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAlbumImagesByCoverType",
			Handler:       _ImageServer_GetAlbumImagesByCoverType_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "images.proto",
}

func init() { proto.RegisterFile("images.proto", fileDescriptor_images_2081967aa9c8dbed) }

var fileDescriptor_images_2081967aa9c8dbed = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xef, 0x6e, 0x12, 0x4f,
	0x14, 0xfd, 0xed, 0xf2, 0x2b, 0x96, 0x4b, 0x69, 0x97, 0x01, 0x91, 0x3f, 0x9a, 0x10, 0x12, 0x13,
	0x62, 0x74, 0x51, 0xfc, 0x68, 0x62, 0x02, 0xb8, 0xa5, 0x1b, 0x9b, 0xd2, 0x0c, 0xa0, 0xb1, 0x1a,
	0xc9, 0xc2, 0x4e, 0x10, 0x05, 0x16, 0x77, 0x66, 0x9b, 0xe0, 0x97, 0xbe, 0x83, 0xbe, 0x8e, 0x4f,
	0xe0, 0x53, 0x99, 0x9d, 0x99, 0x65, 0x17, 0x42, 0x69, 0xd2, 0xc6, 0x0f, 0x64, 0x98, 0x73, 0xef,
	0x9c, 0x7b, 0xee, 0x99, 0xbb, 0x03, 0x07, 0x93, 0x99, 0x35, 0x26, 0x54, 0x5f, 0xb8, 0x0e, 0x73,
	0x50, 0x5c, 0xec, 0x8a, 0x07, 0x23, 0x67, 0x36, 0x73, 0xe6, 0x02, 0xad, 0x7c, 0x86, 0x3d, 0xd3,
	0xc7, 0x51, 0x01, 0xf6, 0x79, 0xc2, 0x60, 0x62, 0xe7, 0x95, 0xb2, 0x52, 0x4d, 0xe1, 0x7b, 0x7c,
	0x6f, 0xda, 0xa8, 0x04, 0x09, 0x11, 0xf2, 0xdc, 0x69, 0x5e, 0x2d, 0x2b, 0xd5, 0x04, 0x16, 0xb9,
	0x7d, 0x77, 0x8a, 0x1e, 0x01, 0x8c, 0x9c, 0x4b, 0xe2, 0x0e, 0xd8, 0x72, 0x41, 0xf2, 0x31, 0x7e,
	0x32, 0xc1, 0x91, 0xde, 0x72, 0x41, 0x2a, 0x3f, 0x40, 0x6b, 0x13, 0xc6, 0x4b, 0x50, 0x4c, 0xbe,
	0x7b, 0x84, 0x32, 0xf4, 0x14, 0xe2, 0x5f, 0x88, 0x65, 0x13, 0x97, 0x17, 0x4a, 0xd6, 0xb3, 0xba,
	0x94, 0xd4, 0xe2, 0xcb, 0x09, 0x8f, 0x61, 0x99, 0xe3, 0x0b, 0xb3, 0xa6, 0x43, 0x6f, 0xe6, 0x0b,
	0x53, 0x85, 0x30, 0xbe, 0x37, 0xed, 0x9b, 0x6a, 0x7f, 0x85, 0x74, 0xa4, 0x36, 0x5d, 0x38, 0x73,
	0x4a, 0x90, 0x0e, 0x71, 0xca, 0x2c, 0xe6, 0x51, 0x59, 0x3c, 0x17, 0x14, 0x6f, 0x7a, 0x74, 0x32,
	0x27, 0x94, 0x76, 0x79, 0x14, 0xcb, 0x2c, 0xf4, 0x18, 0xa4, 0x71, 0x79, 0xb5, 0x1c, 0xab, 0x26,
	0xeb, 0x29, 0x5d, 0xba, 0xca, 0x79, 0xb1, 0x0c, 0x56, 0xae, 0x20, 0xf5, 0x8f, 0x9a, 0x0c, 0x05,
	0xc4, 0x76, 0x09, 0xf8, 0x08, 0x87, 0x77, 0xec, 0xf4, 0x7a, 0x0d, 0x95, 0xf7, 0x90, 0xe9, 0x4e,
	0xe6, 0xe3, 0x29, 0x69, 0xf8, 0xc0, 0xaa, 0x42, 0x28, 0x4d, 0xd9, 0x21, 0x6d, 0x17, 0xf1, 0x15,
	0x64, 0x38, 0x25, 0xbd, 0x8b, 0x79, 0x25, 0x48, 0x04, 0xfc, 0xe2, 0x96, 0x52, 0x78, 0x5f, 0x16,
	0xa0, 0x37, 0xcd, 0xc8, 0x2f, 0x05, 0xb2, 0xeb, 0x0a, 0x6e, 0xe9, 0xde, 0x5b, 0xc8, 0x50, 0x6e,
	0xd1, 0x40, 0x6a, 0x89, 0x0e, 0x4d, 0x29, 0x30, 0x66, 0x8b, 0x8b, 0x38, 0x4d, 0x43, 0xd0, 0x0c,
	0x2e, 0xf3, 0x81, 0xe8, 0x34, 0x04, 0x03, 0x6b, 0xa2, 0x66, 0x2a, 0xd7, 0x4d, 0xca, 0xae, 0x51,
	0x7d, 0xf2, 0x53, 0x91, 0xa3, 0xd2, 0x0a, 0x5c, 0x40, 0x19, 0x38, 0x6a, 0x75, 0xde, 0x19, 0x78,
	0xd0, 0xfb, 0x70, 0x6e, 0x0c, 0xcc, 0x33, 0xb3, 0xa7, 0xfd, 0x87, 0x72, 0x80, 0x22, 0x60, 0xdb,
	0x38, 0x33, 0x70, 0xe3, 0x54, 0x53, 0x50, 0x16, 0xb4, 0x08, 0xce, 0xff, 0x6a, 0xea, 0x06, 0xc5,
	0x69, 0xa7, 0xdd, 0xd1, 0x62, 0x1b, 0xe0, 0x89, 0xd1, 0x78, 0xa3, 0xfd, 0xbf, 0x01, 0x1e, 0x37,
	0x5a, 0x86, 0xb6, 0x57, 0xff, 0xad, 0x42, 0x92, 0x8b, 0xea, 0x12, 0xf7, 0x92, 0xb8, 0xc8, 0x84,
	0xc3, 0x36, 0x61, 0x11, 0x4f, 0x50, 0x3e, 0xe8, 0x66, 0xf3, 0x3d, 0x29, 0x16, 0xb6, 0x44, 0x84,
	0xb7, 0x55, 0xe5, 0xb9, 0x82, 0x8e, 0x21, 0xdd, 0x5f, 0xd8, 0x16, 0x8b, 0x3a, 0x8c, 0xee, 0xaf,
	0x79, 0xb3, 0xa2, 0xca, 0x6d, 0xc2, 0x11, 0x9e, 0xd7, 0x90, 0x68, 0xd8, 0xf6, 0xed, 0xcf, 0x5f,
	0x40, 0x61, 0xbd, 0xa5, 0xe6, 0x32, 0xbc, 0x81, 0xd5, 0x84, 0x6c, 0xf9, 0x1c, 0x8a, 0x0f, 0xb7,
	0x07, 0x43, 0xee, 0xa6, 0x71, 0xf1, 0x62, 0x3c, 0x61, 0x53, 0x6b, 0xa8, 0x53, 0xb6, 0xb4, 0xf5,
	0xd1, 0xbc, 0xe6, 0x31, 0xc7, 0xff, 0x3d, 0xa3, 0xf6, 0xb7, 0xda, 0xd8, 0xa9, 0xf1, 0xd7, 0xbe,
	0x26, 0x68, 0x5e, 0x89, 0xe5, 0x8f, 0x7a, 0xd4, 0x67, 0xce, 0xb9, 0x1f, 0xf8, 0x24, 0x28, 0x87,
	0x71, 0x9e, 0xf6, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x88, 0x1e, 0x6d, 0x3a, 0x06,
	0x00, 0x00,
}
