// Code generated by protoc-gen-go. DO NOT EDIT.
// source: personal_course_schedule.proto

package scheduling // import "j7go/proto/scheduling"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/joselee214/j7f/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 添加编辑私教课排期请求
type PersonalScheduleRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 品牌ID
	BrandId uint32 `protobuf:"varint,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// 场馆ID
	ShopId uint32 `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// 教练ID
	CoachId uint32 `protobuf:"varint,4,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"`
	// 排期时间
	PersonalSchedules []*PersonalSchedules `protobuf:"bytes,5,rep,name=personal_schedules,json=personalSchedules,proto3" json:"personal_schedules,omitempty"`
	// 操作人
	OperatorId           uint32   `protobuf:"varint,6,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersonalScheduleRequest) Reset()         { *m = PersonalScheduleRequest{} }
func (m *PersonalScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*PersonalScheduleRequest) ProtoMessage()    {}
func (*PersonalScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{0}
}
func (m *PersonalScheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonalScheduleRequest.Unmarshal(m, b)
}
func (m *PersonalScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonalScheduleRequest.Marshal(b, m, deterministic)
}
func (dst *PersonalScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalScheduleRequest.Merge(dst, src)
}
func (m *PersonalScheduleRequest) XXX_Size() int {
	return xxx_messageInfo_PersonalScheduleRequest.Size(m)
}
func (m *PersonalScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalScheduleRequest proto.InternalMessageInfo

func (m *PersonalScheduleRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PersonalScheduleRequest) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *PersonalScheduleRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *PersonalScheduleRequest) GetCoachId() uint32 {
	if m != nil {
		return m.CoachId
	}
	return 0
}

func (m *PersonalScheduleRequest) GetPersonalSchedules() []*PersonalSchedules {
	if m != nil {
		return m.PersonalSchedules
	}
	return nil
}

func (m *PersonalScheduleRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

type PersonalSchedules struct {
	// 排期ID 编辑使用
	ScheduleId uint32 `protobuf:"varint,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	// 课程日期
	ScheduleDate uint32 `protobuf:"varint,2,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	// 排期时间对象
	PersonalScheduleTimes []*PersonalScheduleTimes `protobuf:"bytes,3,rep,name=personal_schedule_times,json=personalScheduleTimes,proto3" json:"personal_schedule_times,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                 `json:"-"`
	XXX_unrecognized      []byte                   `json:"-"`
	XXX_sizecache         int32                    `json:"-"`
}

func (m *PersonalSchedules) Reset()         { *m = PersonalSchedules{} }
func (m *PersonalSchedules) String() string { return proto.CompactTextString(m) }
func (*PersonalSchedules) ProtoMessage()    {}
func (*PersonalSchedules) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{1}
}
func (m *PersonalSchedules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonalSchedules.Unmarshal(m, b)
}
func (m *PersonalSchedules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonalSchedules.Marshal(b, m, deterministic)
}
func (dst *PersonalSchedules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalSchedules.Merge(dst, src)
}
func (m *PersonalSchedules) XXX_Size() int {
	return xxx_messageInfo_PersonalSchedules.Size(m)
}
func (m *PersonalSchedules) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalSchedules.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalSchedules proto.InternalMessageInfo

func (m *PersonalSchedules) GetScheduleId() uint32 {
	if m != nil {
		return m.ScheduleId
	}
	return 0
}

func (m *PersonalSchedules) GetScheduleDate() uint32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

func (m *PersonalSchedules) GetPersonalScheduleTimes() []*PersonalScheduleTimes {
	if m != nil {
		return m.PersonalScheduleTimes
	}
	return nil
}

type PersonalScheduleTimes struct {
	// 上课时间
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 下课时间
	EndTime              string   `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersonalScheduleTimes) Reset()         { *m = PersonalScheduleTimes{} }
func (m *PersonalScheduleTimes) String() string { return proto.CompactTextString(m) }
func (*PersonalScheduleTimes) ProtoMessage()    {}
func (*PersonalScheduleTimes) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{2}
}
func (m *PersonalScheduleTimes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonalScheduleTimes.Unmarshal(m, b)
}
func (m *PersonalScheduleTimes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonalScheduleTimes.Marshal(b, m, deterministic)
}
func (dst *PersonalScheduleTimes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalScheduleTimes.Merge(dst, src)
}
func (m *PersonalScheduleTimes) XXX_Size() int {
	return xxx_messageInfo_PersonalScheduleTimes.Size(m)
}
func (m *PersonalScheduleTimes) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalScheduleTimes.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalScheduleTimes proto.InternalMessageInfo

func (m *PersonalScheduleTimes) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *PersonalScheduleTimes) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

// 添加私教课排期响应
type AddPersonalScheduleResponse struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 新增储蓄卡ID
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPersonalScheduleResponse) Reset()         { *m = AddPersonalScheduleResponse{} }
func (m *AddPersonalScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*AddPersonalScheduleResponse) ProtoMessage()    {}
func (*AddPersonalScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{3}
}
func (m *AddPersonalScheduleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPersonalScheduleResponse.Unmarshal(m, b)
}
func (m *AddPersonalScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPersonalScheduleResponse.Marshal(b, m, deterministic)
}
func (dst *AddPersonalScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPersonalScheduleResponse.Merge(dst, src)
}
func (m *AddPersonalScheduleResponse) XXX_Size() int {
	return xxx_messageInfo_AddPersonalScheduleResponse.Size(m)
}
func (m *AddPersonalScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPersonalScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPersonalScheduleResponse proto.InternalMessageInfo

func (m *AddPersonalScheduleResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AddPersonalScheduleResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 私教排课公共响应
type CommonScheduleResponse struct {
	// 公共相应参数
	Status               *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CommonScheduleResponse) Reset()         { *m = CommonScheduleResponse{} }
func (m *CommonScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*CommonScheduleResponse) ProtoMessage()    {}
func (*CommonScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{4}
}
func (m *CommonScheduleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonScheduleResponse.Unmarshal(m, b)
}
func (m *CommonScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonScheduleResponse.Marshal(b, m, deterministic)
}
func (dst *CommonScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonScheduleResponse.Merge(dst, src)
}
func (m *CommonScheduleResponse) XXX_Size() int {
	return xxx_messageInfo_CommonScheduleResponse.Size(m)
}
func (m *CommonScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommonScheduleResponse proto.InternalMessageInfo

func (m *CommonScheduleResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// 复制排期请求体
type CopyPersonalScheduleRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 品牌ID
	BrandId uint32 `protobuf:"varint,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// 场馆ID
	ShopId uint32 `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// 教练ID
	CoachId uint32 `protobuf:"varint,4,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"`
	// 复制开始时间
	CopyStartTime uint32 `protobuf:"varint,5,opt,name=copy_start_time,json=copyStartTime,proto3" json:"copy_start_time,omitempty"`
	// 复制结束时间
	CopyEndTime uint32 `protobuf:"varint,6,opt,name=copy_end_time,json=copyEndTime,proto3" json:"copy_end_time,omitempty"`
	// 应用开始时间
	ApplyStartTime uint32 `protobuf:"varint,7,opt,name=apply_start_time,json=applyStartTime,proto3" json:"apply_start_time,omitempty"`
	// 应用结束时间
	ApplyEndTime uint32 `protobuf:"varint,8,opt,name=apply_end_time,json=applyEndTime,proto3" json:"apply_end_time,omitempty"`
	// 操作人
	OperatorId           uint32   `protobuf:"varint,9,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyPersonalScheduleRequest) Reset()         { *m = CopyPersonalScheduleRequest{} }
func (m *CopyPersonalScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*CopyPersonalScheduleRequest) ProtoMessage()    {}
func (*CopyPersonalScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{5}
}
func (m *CopyPersonalScheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CopyPersonalScheduleRequest.Unmarshal(m, b)
}
func (m *CopyPersonalScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CopyPersonalScheduleRequest.Marshal(b, m, deterministic)
}
func (dst *CopyPersonalScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyPersonalScheduleRequest.Merge(dst, src)
}
func (m *CopyPersonalScheduleRequest) XXX_Size() int {
	return xxx_messageInfo_CopyPersonalScheduleRequest.Size(m)
}
func (m *CopyPersonalScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyPersonalScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CopyPersonalScheduleRequest proto.InternalMessageInfo

func (m *CopyPersonalScheduleRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CopyPersonalScheduleRequest) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *CopyPersonalScheduleRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *CopyPersonalScheduleRequest) GetCoachId() uint32 {
	if m != nil {
		return m.CoachId
	}
	return 0
}

func (m *CopyPersonalScheduleRequest) GetCopyStartTime() uint32 {
	if m != nil {
		return m.CopyStartTime
	}
	return 0
}

func (m *CopyPersonalScheduleRequest) GetCopyEndTime() uint32 {
	if m != nil {
		return m.CopyEndTime
	}
	return 0
}

func (m *CopyPersonalScheduleRequest) GetApplyStartTime() uint32 {
	if m != nil {
		return m.ApplyStartTime
	}
	return 0
}

func (m *CopyPersonalScheduleRequest) GetApplyEndTime() uint32 {
	if m != nil {
		return m.ApplyEndTime
	}
	return 0
}

func (m *CopyPersonalScheduleRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

// 添加预约请求体
type PersonalReserveRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 品牌ID
	BrandId uint32 `protobuf:"varint,2,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	// 场馆ID
	ShopId uint32 `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// 教练ID
	CoachId uint32 `protobuf:"varint,4,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"`
	// 会员ID
	MemberId uint32 `protobuf:"varint,5,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// 课程ID
	CourseId uint32 `protobuf:"varint,6,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	// 消费商品类型
	ProductType ProductType `protobuf:"varint,7,opt,name=product_type,json=productType,proto3,enum=scheduling.ProductType" json:"product_type,omitempty"`
	// 消费商品ID，消费方式
	ConsumerType uint32 `protobuf:"varint,8,opt,name=consumer_type,json=consumerType,proto3" json:"consumer_type,omitempty"`
	// 预约日期
	ReserveStartDate uint32 `protobuf:"varint,9,opt,name=reserve_start_date,json=reserveStartDate,proto3" json:"reserve_start_date,omitempty"`
	// 预约时间
	ReserveStartTime uint32 `protobuf:"varint,10,opt,name=reserve_start_time,json=reserveStartTime,proto3" json:"reserve_start_time,omitempty"`
	// 操作人
	OperatorId           uint32   `protobuf:"varint,11,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersonalReserveRequest) Reset()         { *m = PersonalReserveRequest{} }
func (m *PersonalReserveRequest) String() string { return proto.CompactTextString(m) }
func (*PersonalReserveRequest) ProtoMessage()    {}
func (*PersonalReserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{6}
}
func (m *PersonalReserveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonalReserveRequest.Unmarshal(m, b)
}
func (m *PersonalReserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonalReserveRequest.Marshal(b, m, deterministic)
}
func (dst *PersonalReserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalReserveRequest.Merge(dst, src)
}
func (m *PersonalReserveRequest) XXX_Size() int {
	return xxx_messageInfo_PersonalReserveRequest.Size(m)
}
func (m *PersonalReserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalReserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalReserveRequest proto.InternalMessageInfo

func (m *PersonalReserveRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PersonalReserveRequest) GetBrandId() uint32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *PersonalReserveRequest) GetShopId() uint32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

func (m *PersonalReserveRequest) GetCoachId() uint32 {
	if m != nil {
		return m.CoachId
	}
	return 0
}

func (m *PersonalReserveRequest) GetMemberId() uint32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *PersonalReserveRequest) GetCourseId() uint32 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *PersonalReserveRequest) GetProductType() ProductType {
	if m != nil {
		return m.ProductType
	}
	return ProductType_PRODUCT_INIT
}

func (m *PersonalReserveRequest) GetConsumerType() uint32 {
	if m != nil {
		return m.ConsumerType
	}
	return 0
}

func (m *PersonalReserveRequest) GetReserveStartDate() uint32 {
	if m != nil {
		return m.ReserveStartDate
	}
	return 0
}

func (m *PersonalReserveRequest) GetReserveStartTime() uint32 {
	if m != nil {
		return m.ReserveStartTime
	}
	return 0
}

func (m *PersonalReserveRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

// 编辑预约请求体
type EditPersonalReserveRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 品牌ID
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 教练ID
	CoachId uint32 `protobuf:"varint,3,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"`
	// 操作人
	OperatorId           uint32   `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditPersonalReserveRequest) Reset()         { *m = EditPersonalReserveRequest{} }
func (m *EditPersonalReserveRequest) String() string { return proto.CompactTextString(m) }
func (*EditPersonalReserveRequest) ProtoMessage()    {}
func (*EditPersonalReserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{7}
}
func (m *EditPersonalReserveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditPersonalReserveRequest.Unmarshal(m, b)
}
func (m *EditPersonalReserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditPersonalReserveRequest.Marshal(b, m, deterministic)
}
func (dst *EditPersonalReserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditPersonalReserveRequest.Merge(dst, src)
}
func (m *EditPersonalReserveRequest) XXX_Size() int {
	return xxx_messageInfo_EditPersonalReserveRequest.Size(m)
}
func (m *EditPersonalReserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditPersonalReserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditPersonalReserveRequest proto.InternalMessageInfo

func (m *EditPersonalReserveRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EditPersonalReserveRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EditPersonalReserveRequest) GetCoachId() uint32 {
	if m != nil {
		return m.CoachId
	}
	return 0
}

func (m *EditPersonalReserveRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

// 取消预约请求体
type CancelPersonalReserveRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 品牌ID
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 操作人
	OperatorId           uint32   `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelPersonalReserveRequest) Reset()         { *m = CancelPersonalReserveRequest{} }
func (m *CancelPersonalReserveRequest) String() string { return proto.CompactTextString(m) }
func (*CancelPersonalReserveRequest) ProtoMessage()    {}
func (*CancelPersonalReserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{8}
}
func (m *CancelPersonalReserveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelPersonalReserveRequest.Unmarshal(m, b)
}
func (m *CancelPersonalReserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelPersonalReserveRequest.Marshal(b, m, deterministic)
}
func (dst *CancelPersonalReserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelPersonalReserveRequest.Merge(dst, src)
}
func (m *CancelPersonalReserveRequest) XXX_Size() int {
	return xxx_messageInfo_CancelPersonalReserveRequest.Size(m)
}
func (m *CancelPersonalReserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelPersonalReserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelPersonalReserveRequest proto.InternalMessageInfo

func (m *CancelPersonalReserveRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CancelPersonalReserveRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CancelPersonalReserveRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

// 签到消费请求体
type CheckinPersonalReserveRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 品牌ID
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 操作人
	OperatorId           uint32   `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckinPersonalReserveRequest) Reset()         { *m = CheckinPersonalReserveRequest{} }
func (m *CheckinPersonalReserveRequest) String() string { return proto.CompactTextString(m) }
func (*CheckinPersonalReserveRequest) ProtoMessage()    {}
func (*CheckinPersonalReserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{9}
}
func (m *CheckinPersonalReserveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckinPersonalReserveRequest.Unmarshal(m, b)
}
func (m *CheckinPersonalReserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckinPersonalReserveRequest.Marshal(b, m, deterministic)
}
func (dst *CheckinPersonalReserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckinPersonalReserveRequest.Merge(dst, src)
}
func (m *CheckinPersonalReserveRequest) XXX_Size() int {
	return xxx_messageInfo_CheckinPersonalReserveRequest.Size(m)
}
func (m *CheckinPersonalReserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckinPersonalReserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckinPersonalReserveRequest proto.InternalMessageInfo

func (m *CheckinPersonalReserveRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CheckinPersonalReserveRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CheckinPersonalReserveRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

// 添加预约私教课响应
type AddPersonalReserveResponse struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 新增储蓄卡ID
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPersonalReserveResponse) Reset()         { *m = AddPersonalReserveResponse{} }
func (m *AddPersonalReserveResponse) String() string { return proto.CompactTextString(m) }
func (*AddPersonalReserveResponse) ProtoMessage()    {}
func (*AddPersonalReserveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{10}
}
func (m *AddPersonalReserveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPersonalReserveResponse.Unmarshal(m, b)
}
func (m *AddPersonalReserveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPersonalReserveResponse.Marshal(b, m, deterministic)
}
func (dst *AddPersonalReserveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPersonalReserveResponse.Merge(dst, src)
}
func (m *AddPersonalReserveResponse) XXX_Size() int {
	return xxx_messageInfo_AddPersonalReserveResponse.Size(m)
}
func (m *AddPersonalReserveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPersonalReserveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPersonalReserveResponse proto.InternalMessageInfo

func (m *AddPersonalReserveResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AddPersonalReserveResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 私教课预约查看请求体
type ViewPersonalReserveRequest struct {
	// 公共请求头
	Header *common.CommonHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 私教课预约ID
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewPersonalReserveRequest) Reset()         { *m = ViewPersonalReserveRequest{} }
func (m *ViewPersonalReserveRequest) String() string { return proto.CompactTextString(m) }
func (*ViewPersonalReserveRequest) ProtoMessage()    {}
func (*ViewPersonalReserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{11}
}
func (m *ViewPersonalReserveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewPersonalReserveRequest.Unmarshal(m, b)
}
func (m *ViewPersonalReserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewPersonalReserveRequest.Marshal(b, m, deterministic)
}
func (dst *ViewPersonalReserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewPersonalReserveRequest.Merge(dst, src)
}
func (m *ViewPersonalReserveRequest) XXX_Size() int {
	return xxx_messageInfo_ViewPersonalReserveRequest.Size(m)
}
func (m *ViewPersonalReserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewPersonalReserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewPersonalReserveRequest proto.InternalMessageInfo

func (m *ViewPersonalReserveRequest) GetHeader() *common.CommonHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ViewPersonalReserveRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 私教课预约返回体
type ViewPersonalReserveResponse struct {
	// 公共相应参数
	Status *common.BusinessStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 预约ID
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 会员名称
	MemberName string `protobuf:"bytes,3,opt,name=member_name,json=memberName,proto3" json:"member_name,omitempty"`
	// 上课教练ID
	CoachId uint32 `protobuf:"varint,4,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"`
	// 上课教练名称
	CoachName string `protobuf:"bytes,5,opt,name=coach_name,json=coachName,proto3" json:"coach_name,omitempty"`
	// 课程名称
	CourseName string `protobuf:"bytes,6,opt,name=course_name,json=courseName,proto3" json:"course_name,omitempty"`
	// 消费方式
	ConsumerType string `protobuf:"bytes,7,opt,name=consumer_type,json=consumerType,proto3" json:"consumer_type,omitempty"`
	// 预约日期
	ReserveDate uint32 `protobuf:"varint,8,opt,name=reserve_date,json=reserveDate,proto3" json:"reserve_date,omitempty"`
	// 预约时间
	ReserveTime uint32 `protobuf:"varint,9,opt,name=reserve_time,json=reserveTime,proto3" json:"reserve_time,omitempty"`
	// 预约状态
	ReserveStatus ReserveStatus `protobuf:"varint,10,opt,name=reserve_status,json=reserveStatus,proto3,enum=scheduling.ReserveStatus" json:"reserve_status,omitempty"`
	// 签到状态
	IsCheckin            IsCheckin `protobuf:"varint,11,opt,name=is_checkin,json=isCheckin,proto3,enum=scheduling.IsCheckin" json:"is_checkin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ViewPersonalReserveResponse) Reset()         { *m = ViewPersonalReserveResponse{} }
func (m *ViewPersonalReserveResponse) String() string { return proto.CompactTextString(m) }
func (*ViewPersonalReserveResponse) ProtoMessage()    {}
func (*ViewPersonalReserveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_personal_course_schedule_519d0d5d828c1901, []int{12}
}
func (m *ViewPersonalReserveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ViewPersonalReserveResponse.Unmarshal(m, b)
}
func (m *ViewPersonalReserveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ViewPersonalReserveResponse.Marshal(b, m, deterministic)
}
func (dst *ViewPersonalReserveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewPersonalReserveResponse.Merge(dst, src)
}
func (m *ViewPersonalReserveResponse) XXX_Size() int {
	return xxx_messageInfo_ViewPersonalReserveResponse.Size(m)
}
func (m *ViewPersonalReserveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewPersonalReserveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ViewPersonalReserveResponse proto.InternalMessageInfo

func (m *ViewPersonalReserveResponse) GetStatus() *common.BusinessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ViewPersonalReserveResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ViewPersonalReserveResponse) GetMemberName() string {
	if m != nil {
		return m.MemberName
	}
	return ""
}

func (m *ViewPersonalReserveResponse) GetCoachId() uint32 {
	if m != nil {
		return m.CoachId
	}
	return 0
}

func (m *ViewPersonalReserveResponse) GetCoachName() string {
	if m != nil {
		return m.CoachName
	}
	return ""
}

func (m *ViewPersonalReserveResponse) GetCourseName() string {
	if m != nil {
		return m.CourseName
	}
	return ""
}

func (m *ViewPersonalReserveResponse) GetConsumerType() string {
	if m != nil {
		return m.ConsumerType
	}
	return ""
}

func (m *ViewPersonalReserveResponse) GetReserveDate() uint32 {
	if m != nil {
		return m.ReserveDate
	}
	return 0
}

func (m *ViewPersonalReserveResponse) GetReserveTime() uint32 {
	if m != nil {
		return m.ReserveTime
	}
	return 0
}

func (m *ViewPersonalReserveResponse) GetReserveStatus() ReserveStatus {
	if m != nil {
		return m.ReserveStatus
	}
	return ReserveStatus_RESERVE_STATUS_INIT
}

func (m *ViewPersonalReserveResponse) GetIsCheckin() IsCheckin {
	if m != nil {
		return m.IsCheckin
	}
	return IsCheckin_IS_CHECKIN_FAIL
}

func init() {
	proto.RegisterType((*PersonalScheduleRequest)(nil), "scheduling.PersonalScheduleRequest")
	proto.RegisterType((*PersonalSchedules)(nil), "scheduling.PersonalSchedules")
	proto.RegisterType((*PersonalScheduleTimes)(nil), "scheduling.PersonalScheduleTimes")
	proto.RegisterType((*AddPersonalScheduleResponse)(nil), "scheduling.AddPersonalScheduleResponse")
	proto.RegisterType((*CommonScheduleResponse)(nil), "scheduling.CommonScheduleResponse")
	proto.RegisterType((*CopyPersonalScheduleRequest)(nil), "scheduling.CopyPersonalScheduleRequest")
	proto.RegisterType((*PersonalReserveRequest)(nil), "scheduling.PersonalReserveRequest")
	proto.RegisterType((*EditPersonalReserveRequest)(nil), "scheduling.EditPersonalReserveRequest")
	proto.RegisterType((*CancelPersonalReserveRequest)(nil), "scheduling.CancelPersonalReserveRequest")
	proto.RegisterType((*CheckinPersonalReserveRequest)(nil), "scheduling.CheckinPersonalReserveRequest")
	proto.RegisterType((*AddPersonalReserveResponse)(nil), "scheduling.AddPersonalReserveResponse")
	proto.RegisterType((*ViewPersonalReserveRequest)(nil), "scheduling.ViewPersonalReserveRequest")
	proto.RegisterType((*ViewPersonalReserveResponse)(nil), "scheduling.ViewPersonalReserveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PersonalCourseScheduleServerClient is the client API for PersonalCourseScheduleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersonalCourseScheduleServerClient interface {
	// 新增私教课排期
	AddPersonalSchedule(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_AddPersonalScheduleClient, error)
	// 编辑私教课排期
	EditPersonalSchedule(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_EditPersonalScheduleClient, error)
	// 复制排期
	CopyPersonalSchedule(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_CopyPersonalScheduleClient, error)
	// 添加预约私教课
	AddPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_AddPersonalReserveClient, error)
	// 编辑预约私教课
	EditPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_EditPersonalReserveClient, error)
	// 预约详情
	ViewPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_ViewPersonalReserveClient, error)
	// 取消预约
	CancelPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_CancelPersonalReserveClient, error)
	// 签到消费
	CheckinPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_CheckinPersonalReserveClient, error)
}

type personalCourseScheduleServerClient struct {
	cc *grpc.ClientConn
}

func NewPersonalCourseScheduleServerClient(cc *grpc.ClientConn) PersonalCourseScheduleServerClient {
	return &personalCourseScheduleServerClient{cc}
}

func (c *personalCourseScheduleServerClient) AddPersonalSchedule(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_AddPersonalScheduleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonalCourseScheduleServer_serviceDesc.Streams[0], "/scheduling.PersonalCourseScheduleServer/AddPersonalSchedule", opts...)
	if err != nil {
		return nil, err
	}
	x := &personalCourseScheduleServerAddPersonalScheduleClient{stream}
	return x, nil
}

type PersonalCourseScheduleServer_AddPersonalScheduleClient interface {
	Send(*PersonalScheduleRequest) error
	Recv() (*CommonScheduleResponse, error)
	grpc.ClientStream
}

type personalCourseScheduleServerAddPersonalScheduleClient struct {
	grpc.ClientStream
}

func (x *personalCourseScheduleServerAddPersonalScheduleClient) Send(m *PersonalScheduleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personalCourseScheduleServerAddPersonalScheduleClient) Recv() (*CommonScheduleResponse, error) {
	m := new(CommonScheduleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personalCourseScheduleServerClient) EditPersonalSchedule(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_EditPersonalScheduleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonalCourseScheduleServer_serviceDesc.Streams[1], "/scheduling.PersonalCourseScheduleServer/EditPersonalSchedule", opts...)
	if err != nil {
		return nil, err
	}
	x := &personalCourseScheduleServerEditPersonalScheduleClient{stream}
	return x, nil
}

type PersonalCourseScheduleServer_EditPersonalScheduleClient interface {
	Send(*PersonalScheduleRequest) error
	Recv() (*CommonScheduleResponse, error)
	grpc.ClientStream
}

type personalCourseScheduleServerEditPersonalScheduleClient struct {
	grpc.ClientStream
}

func (x *personalCourseScheduleServerEditPersonalScheduleClient) Send(m *PersonalScheduleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personalCourseScheduleServerEditPersonalScheduleClient) Recv() (*CommonScheduleResponse, error) {
	m := new(CommonScheduleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personalCourseScheduleServerClient) CopyPersonalSchedule(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_CopyPersonalScheduleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonalCourseScheduleServer_serviceDesc.Streams[2], "/scheduling.PersonalCourseScheduleServer/CopyPersonalSchedule", opts...)
	if err != nil {
		return nil, err
	}
	x := &personalCourseScheduleServerCopyPersonalScheduleClient{stream}
	return x, nil
}

type PersonalCourseScheduleServer_CopyPersonalScheduleClient interface {
	Send(*CopyPersonalScheduleRequest) error
	Recv() (*CommonScheduleResponse, error)
	grpc.ClientStream
}

type personalCourseScheduleServerCopyPersonalScheduleClient struct {
	grpc.ClientStream
}

func (x *personalCourseScheduleServerCopyPersonalScheduleClient) Send(m *CopyPersonalScheduleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personalCourseScheduleServerCopyPersonalScheduleClient) Recv() (*CommonScheduleResponse, error) {
	m := new(CommonScheduleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personalCourseScheduleServerClient) AddPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_AddPersonalReserveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonalCourseScheduleServer_serviceDesc.Streams[3], "/scheduling.PersonalCourseScheduleServer/AddPersonalReserve", opts...)
	if err != nil {
		return nil, err
	}
	x := &personalCourseScheduleServerAddPersonalReserveClient{stream}
	return x, nil
}

type PersonalCourseScheduleServer_AddPersonalReserveClient interface {
	Send(*PersonalReserveRequest) error
	Recv() (*AddPersonalReserveResponse, error)
	grpc.ClientStream
}

type personalCourseScheduleServerAddPersonalReserveClient struct {
	grpc.ClientStream
}

func (x *personalCourseScheduleServerAddPersonalReserveClient) Send(m *PersonalReserveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personalCourseScheduleServerAddPersonalReserveClient) Recv() (*AddPersonalReserveResponse, error) {
	m := new(AddPersonalReserveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personalCourseScheduleServerClient) EditPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_EditPersonalReserveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonalCourseScheduleServer_serviceDesc.Streams[4], "/scheduling.PersonalCourseScheduleServer/EditPersonalReserve", opts...)
	if err != nil {
		return nil, err
	}
	x := &personalCourseScheduleServerEditPersonalReserveClient{stream}
	return x, nil
}

type PersonalCourseScheduleServer_EditPersonalReserveClient interface {
	Send(*EditPersonalReserveRequest) error
	Recv() (*CommonScheduleResponse, error)
	grpc.ClientStream
}

type personalCourseScheduleServerEditPersonalReserveClient struct {
	grpc.ClientStream
}

func (x *personalCourseScheduleServerEditPersonalReserveClient) Send(m *EditPersonalReserveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personalCourseScheduleServerEditPersonalReserveClient) Recv() (*CommonScheduleResponse, error) {
	m := new(CommonScheduleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personalCourseScheduleServerClient) ViewPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_ViewPersonalReserveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonalCourseScheduleServer_serviceDesc.Streams[5], "/scheduling.PersonalCourseScheduleServer/ViewPersonalReserve", opts...)
	if err != nil {
		return nil, err
	}
	x := &personalCourseScheduleServerViewPersonalReserveClient{stream}
	return x, nil
}

type PersonalCourseScheduleServer_ViewPersonalReserveClient interface {
	Send(*ViewPersonalReserveRequest) error
	Recv() (*ViewPersonalReserveResponse, error)
	grpc.ClientStream
}

type personalCourseScheduleServerViewPersonalReserveClient struct {
	grpc.ClientStream
}

func (x *personalCourseScheduleServerViewPersonalReserveClient) Send(m *ViewPersonalReserveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personalCourseScheduleServerViewPersonalReserveClient) Recv() (*ViewPersonalReserveResponse, error) {
	m := new(ViewPersonalReserveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personalCourseScheduleServerClient) CancelPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_CancelPersonalReserveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonalCourseScheduleServer_serviceDesc.Streams[6], "/scheduling.PersonalCourseScheduleServer/CancelPersonalReserve", opts...)
	if err != nil {
		return nil, err
	}
	x := &personalCourseScheduleServerCancelPersonalReserveClient{stream}
	return x, nil
}

type PersonalCourseScheduleServer_CancelPersonalReserveClient interface {
	Send(*CancelPersonalReserveRequest) error
	Recv() (*CommonScheduleResponse, error)
	grpc.ClientStream
}

type personalCourseScheduleServerCancelPersonalReserveClient struct {
	grpc.ClientStream
}

func (x *personalCourseScheduleServerCancelPersonalReserveClient) Send(m *CancelPersonalReserveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personalCourseScheduleServerCancelPersonalReserveClient) Recv() (*CommonScheduleResponse, error) {
	m := new(CommonScheduleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personalCourseScheduleServerClient) CheckinPersonalReserve(ctx context.Context, opts ...grpc.CallOption) (PersonalCourseScheduleServer_CheckinPersonalReserveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersonalCourseScheduleServer_serviceDesc.Streams[7], "/scheduling.PersonalCourseScheduleServer/CheckinPersonalReserve", opts...)
	if err != nil {
		return nil, err
	}
	x := &personalCourseScheduleServerCheckinPersonalReserveClient{stream}
	return x, nil
}

type PersonalCourseScheduleServer_CheckinPersonalReserveClient interface {
	Send(*CheckinPersonalReserveRequest) error
	Recv() (*CommonScheduleResponse, error)
	grpc.ClientStream
}

type personalCourseScheduleServerCheckinPersonalReserveClient struct {
	grpc.ClientStream
}

func (x *personalCourseScheduleServerCheckinPersonalReserveClient) Send(m *CheckinPersonalReserveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personalCourseScheduleServerCheckinPersonalReserveClient) Recv() (*CommonScheduleResponse, error) {
	m := new(CommonScheduleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonalCourseScheduleServerServer is the server API for PersonalCourseScheduleServer service.
type PersonalCourseScheduleServerServer interface {
	// 新增私教课排期
	AddPersonalSchedule(PersonalCourseScheduleServer_AddPersonalScheduleServer) error
	// 编辑私教课排期
	EditPersonalSchedule(PersonalCourseScheduleServer_EditPersonalScheduleServer) error
	// 复制排期
	CopyPersonalSchedule(PersonalCourseScheduleServer_CopyPersonalScheduleServer) error
	// 添加预约私教课
	AddPersonalReserve(PersonalCourseScheduleServer_AddPersonalReserveServer) error
	// 编辑预约私教课
	EditPersonalReserve(PersonalCourseScheduleServer_EditPersonalReserveServer) error
	// 预约详情
	ViewPersonalReserve(PersonalCourseScheduleServer_ViewPersonalReserveServer) error
	// 取消预约
	CancelPersonalReserve(PersonalCourseScheduleServer_CancelPersonalReserveServer) error
	// 签到消费
	CheckinPersonalReserve(PersonalCourseScheduleServer_CheckinPersonalReserveServer) error
}

func RegisterPersonalCourseScheduleServerServer(s *grpc.Server, srv PersonalCourseScheduleServerServer) {
	s.RegisterService(&_PersonalCourseScheduleServer_serviceDesc, srv)
}

func _PersonalCourseScheduleServer_AddPersonalSchedule_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonalCourseScheduleServerServer).AddPersonalSchedule(&personalCourseScheduleServerAddPersonalScheduleServer{stream})
}

type PersonalCourseScheduleServer_AddPersonalScheduleServer interface {
	Send(*CommonScheduleResponse) error
	Recv() (*PersonalScheduleRequest, error)
	grpc.ServerStream
}

type personalCourseScheduleServerAddPersonalScheduleServer struct {
	grpc.ServerStream
}

func (x *personalCourseScheduleServerAddPersonalScheduleServer) Send(m *CommonScheduleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personalCourseScheduleServerAddPersonalScheduleServer) Recv() (*PersonalScheduleRequest, error) {
	m := new(PersonalScheduleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonalCourseScheduleServer_EditPersonalSchedule_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonalCourseScheduleServerServer).EditPersonalSchedule(&personalCourseScheduleServerEditPersonalScheduleServer{stream})
}

type PersonalCourseScheduleServer_EditPersonalScheduleServer interface {
	Send(*CommonScheduleResponse) error
	Recv() (*PersonalScheduleRequest, error)
	grpc.ServerStream
}

type personalCourseScheduleServerEditPersonalScheduleServer struct {
	grpc.ServerStream
}

func (x *personalCourseScheduleServerEditPersonalScheduleServer) Send(m *CommonScheduleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personalCourseScheduleServerEditPersonalScheduleServer) Recv() (*PersonalScheduleRequest, error) {
	m := new(PersonalScheduleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonalCourseScheduleServer_CopyPersonalSchedule_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonalCourseScheduleServerServer).CopyPersonalSchedule(&personalCourseScheduleServerCopyPersonalScheduleServer{stream})
}

type PersonalCourseScheduleServer_CopyPersonalScheduleServer interface {
	Send(*CommonScheduleResponse) error
	Recv() (*CopyPersonalScheduleRequest, error)
	grpc.ServerStream
}

type personalCourseScheduleServerCopyPersonalScheduleServer struct {
	grpc.ServerStream
}

func (x *personalCourseScheduleServerCopyPersonalScheduleServer) Send(m *CommonScheduleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personalCourseScheduleServerCopyPersonalScheduleServer) Recv() (*CopyPersonalScheduleRequest, error) {
	m := new(CopyPersonalScheduleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonalCourseScheduleServer_AddPersonalReserve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonalCourseScheduleServerServer).AddPersonalReserve(&personalCourseScheduleServerAddPersonalReserveServer{stream})
}

type PersonalCourseScheduleServer_AddPersonalReserveServer interface {
	Send(*AddPersonalReserveResponse) error
	Recv() (*PersonalReserveRequest, error)
	grpc.ServerStream
}

type personalCourseScheduleServerAddPersonalReserveServer struct {
	grpc.ServerStream
}

func (x *personalCourseScheduleServerAddPersonalReserveServer) Send(m *AddPersonalReserveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personalCourseScheduleServerAddPersonalReserveServer) Recv() (*PersonalReserveRequest, error) {
	m := new(PersonalReserveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonalCourseScheduleServer_EditPersonalReserve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonalCourseScheduleServerServer).EditPersonalReserve(&personalCourseScheduleServerEditPersonalReserveServer{stream})
}

type PersonalCourseScheduleServer_EditPersonalReserveServer interface {
	Send(*CommonScheduleResponse) error
	Recv() (*EditPersonalReserveRequest, error)
	grpc.ServerStream
}

type personalCourseScheduleServerEditPersonalReserveServer struct {
	grpc.ServerStream
}

func (x *personalCourseScheduleServerEditPersonalReserveServer) Send(m *CommonScheduleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personalCourseScheduleServerEditPersonalReserveServer) Recv() (*EditPersonalReserveRequest, error) {
	m := new(EditPersonalReserveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonalCourseScheduleServer_ViewPersonalReserve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonalCourseScheduleServerServer).ViewPersonalReserve(&personalCourseScheduleServerViewPersonalReserveServer{stream})
}

type PersonalCourseScheduleServer_ViewPersonalReserveServer interface {
	Send(*ViewPersonalReserveResponse) error
	Recv() (*ViewPersonalReserveRequest, error)
	grpc.ServerStream
}

type personalCourseScheduleServerViewPersonalReserveServer struct {
	grpc.ServerStream
}

func (x *personalCourseScheduleServerViewPersonalReserveServer) Send(m *ViewPersonalReserveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personalCourseScheduleServerViewPersonalReserveServer) Recv() (*ViewPersonalReserveRequest, error) {
	m := new(ViewPersonalReserveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonalCourseScheduleServer_CancelPersonalReserve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonalCourseScheduleServerServer).CancelPersonalReserve(&personalCourseScheduleServerCancelPersonalReserveServer{stream})
}

type PersonalCourseScheduleServer_CancelPersonalReserveServer interface {
	Send(*CommonScheduleResponse) error
	Recv() (*CancelPersonalReserveRequest, error)
	grpc.ServerStream
}

type personalCourseScheduleServerCancelPersonalReserveServer struct {
	grpc.ServerStream
}

func (x *personalCourseScheduleServerCancelPersonalReserveServer) Send(m *CommonScheduleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personalCourseScheduleServerCancelPersonalReserveServer) Recv() (*CancelPersonalReserveRequest, error) {
	m := new(CancelPersonalReserveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonalCourseScheduleServer_CheckinPersonalReserve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonalCourseScheduleServerServer).CheckinPersonalReserve(&personalCourseScheduleServerCheckinPersonalReserveServer{stream})
}

type PersonalCourseScheduleServer_CheckinPersonalReserveServer interface {
	Send(*CommonScheduleResponse) error
	Recv() (*CheckinPersonalReserveRequest, error)
	grpc.ServerStream
}

type personalCourseScheduleServerCheckinPersonalReserveServer struct {
	grpc.ServerStream
}

func (x *personalCourseScheduleServerCheckinPersonalReserveServer) Send(m *CommonScheduleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personalCourseScheduleServerCheckinPersonalReserveServer) Recv() (*CheckinPersonalReserveRequest, error) {
	m := new(CheckinPersonalReserveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PersonalCourseScheduleServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduling.PersonalCourseScheduleServer",
	HandlerType: (*PersonalCourseScheduleServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddPersonalSchedule",
			Handler:       _PersonalCourseScheduleServer_AddPersonalSchedule_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EditPersonalSchedule",
			Handler:       _PersonalCourseScheduleServer_EditPersonalSchedule_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CopyPersonalSchedule",
			Handler:       _PersonalCourseScheduleServer_CopyPersonalSchedule_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddPersonalReserve",
			Handler:       _PersonalCourseScheduleServer_AddPersonalReserve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EditPersonalReserve",
			Handler:       _PersonalCourseScheduleServer_EditPersonalReserve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ViewPersonalReserve",
			Handler:       _PersonalCourseScheduleServer_ViewPersonalReserve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CancelPersonalReserve",
			Handler:       _PersonalCourseScheduleServer_CancelPersonalReserve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CheckinPersonalReserve",
			Handler:       _PersonalCourseScheduleServer_CheckinPersonalReserve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "personal_course_schedule.proto",
}

func init() {
	proto.RegisterFile("personal_course_schedule.proto", fileDescriptor_personal_course_schedule_519d0d5d828c1901)
}

var fileDescriptor_personal_course_schedule_519d0d5d828c1901 = []byte{
	// 975 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0xed, 0xc4, 0x8e, 0x8f, 0x13, 0x93, 0x4e, 0x7e, 0xeb, 0x34, 0x34, 0xdd, 0xa2, 0xd6,
	0x48, 0xc5, 0x41, 0x86, 0x1b, 0xe0, 0x06, 0x6a, 0x2a, 0xd5, 0x12, 0x42, 0xe9, 0xba, 0x20, 0x51,
	0x15, 0xad, 0xd6, 0x3b, 0xa3, 0x78, 0x89, 0xbd, 0xb3, 0xec, 0xcc, 0x82, 0x7c, 0x01, 0x77, 0xbc,
	0x02, 0x6f, 0xc1, 0x1d, 0x97, 0x3c, 0x01, 0x2f, 0xc0, 0x35, 0x6f, 0x82, 0xe6, 0xcc, 0xec, 0x7a,
	0xd7, 0xbb, 0x0e, 0x96, 0x48, 0x44, 0x2f, 0xaa, 0x7a, 0xbe, 0xf3, 0x37, 0xe7, 0xe7, 0x3b, 0xb3,
	0x81, 0xb7, 0x43, 0x16, 0x09, 0x1e, 0xb8, 0x53, 0xc7, 0xe3, 0x71, 0x24, 0x98, 0x23, 0xbc, 0x09,
	0xa3, 0xf1, 0x94, 0xf5, 0xc2, 0x88, 0x4b, 0x4e, 0xc0, 0x9c, 0xfd, 0xe0, 0xb2, 0xb3, 0xed, 0xf1,
	0xd9, 0x8c, 0x07, 0x5a, 0xd2, 0xd9, 0x5d, 0x48, 0x34, 0x62, 0xfd, 0x52, 0x85, 0xa3, 0x0b, 0xe3,
	0x6e, 0x64, 0xdc, 0xd8, 0xec, 0xfb, 0x98, 0x09, 0x49, 0x9e, 0x40, 0x7d, 0xc2, 0x5c, 0xca, 0xa2,
	0xe3, 0xca, 0x59, 0xa5, 0xdb, 0xea, 0xef, 0xf7, 0x8c, 0xb3, 0x01, 0xfe, 0xf7, 0x1c, 0x65, 0xb6,
	0xd1, 0x21, 0x77, 0x61, 0x6b, 0x1c, 0xb9, 0x01, 0x75, 0x7c, 0x7a, 0x5c, 0x3d, 0xab, 0x74, 0x77,
	0xec, 0x06, 0x9e, 0x87, 0x94, 0x1c, 0x41, 0x43, 0x4c, 0x78, 0xa8, 0x24, 0x35, 0x94, 0xd4, 0xd5,
	0x71, 0x48, 0x95, 0x8d, 0xc7, 0x5d, 0x6f, 0xa2, 0x24, 0x1b, 0xda, 0x06, 0xcf, 0x43, 0x4a, 0xbe,
	0x00, 0x92, 0xa6, 0x99, 0xe4, 0x27, 0x8e, 0x37, 0xcf, 0x6a, 0xdd, 0x56, 0xff, 0xb4, 0x97, 0xc9,
	0x63, 0xf9, 0xf6, 0xc2, 0xbe, 0x13, 0x2e, 0x43, 0xe4, 0x3e, 0xb4, 0x78, 0xc8, 0x22, 0x57, 0xf2,
	0x48, 0xc5, 0xaa, 0x63, 0x2c, 0x48, 0xa0, 0x21, 0xb5, 0x7e, 0xaf, 0xc0, 0x9d, 0x8b, 0x32, 0xb3,
	0x24, 0xb6, 0x32, 0xab, 0x68, 0xb3, 0x04, 0x1a, 0x52, 0xf2, 0x10, 0x76, 0x52, 0x05, 0xea, 0x4a,
	0x66, 0x32, 0xdf, 0x4e, 0xc0, 0xcf, 0x5d, 0xc9, 0xc8, 0x37, 0x70, 0x54, 0x48, 0xc5, 0x91, 0xfe,
	0x8c, 0x89, 0xe3, 0x1a, 0xe6, 0xf3, 0xe0, 0xba, 0x7c, 0x5e, 0x2a, 0x45, 0xfb, 0x20, 0x2c, 0x83,
	0xad, 0x17, 0x70, 0x50, 0xaa, 0x4f, 0x4e, 0x01, 0x84, 0x74, 0x23, 0x89, 0x71, 0xb0, 0xea, 0x4d,
	0xbb, 0x89, 0x88, 0x92, 0xab, 0xc2, 0xb3, 0x80, 0x6a, 0xe1, 0x06, 0x0a, 0x1b, 0x2c, 0xa0, 0x4a,
	0x64, 0x7d, 0x0b, 0x27, 0x9f, 0x51, 0x5a, 0x9c, 0x09, 0x11, 0xf2, 0x40, 0x30, 0xd2, 0x83, 0xba,
	0x90, 0xae, 0x8c, 0x85, 0x19, 0x8a, 0xc3, 0x64, 0x28, 0x9e, 0xc6, 0xc2, 0x0f, 0x98, 0x10, 0x23,
	0x94, 0xda, 0x46, 0x8b, 0xb4, 0xa1, 0x9a, 0x0e, 0x44, 0xd5, 0xa7, 0xd6, 0x73, 0x38, 0xd4, 0xe3,
	0xf3, 0x5f, 0x3d, 0x5b, 0x7f, 0x55, 0xe1, 0x64, 0xc0, 0xc3, 0xf9, 0x1b, 0x39, 0xbe, 0x8f, 0xe0,
	0x2d, 0x8f, 0x87, 0x73, 0x27, 0xd3, 0x84, 0x4d, 0xd4, 0xd8, 0x51, 0xf0, 0x28, 0x6d, 0x84, 0x05,
	0x08, 0x38, 0x69, 0x37, 0xf4, 0x68, 0xb6, 0x14, 0xf8, 0x4c, 0x77, 0x84, 0x74, 0x61, 0xd7, 0x0d,
	0xc3, 0x69, 0xce, 0x59, 0x03, 0xd5, 0xda, 0x88, 0x2f, 0xbc, 0xbd, 0x03, 0x1a, 0x59, 0xb8, 0xdb,
	0xd2, 0xf3, 0x88, 0x68, 0xe2, 0x6f, 0x89, 0x0c, 0xcd, 0x02, 0x19, 0x7e, 0xab, 0xc1, 0x61, 0x52,
	0x55, 0x9b, 0x09, 0x16, 0xfd, 0xf0, 0x66, 0x14, 0xf5, 0x04, 0x9a, 0x33, 0x36, 0x1b, 0x33, 0xbc,
	0xb6, 0x2e, 0xe7, 0x96, 0x06, 0xb4, 0xd0, 0xac, 0xc3, 0x94, 0xe0, 0x5b, 0x1a, 0x18, 0x52, 0xf2,
	0x31, 0x6c, 0x87, 0x11, 0xa7, 0xb1, 0x27, 0x1d, 0x39, 0x0f, 0x75, 0xf9, 0xda, 0xfd, 0xa3, 0x1c,
	0xef, 0xb4, 0xfc, 0xe5, 0x3c, 0x64, 0x76, 0x2b, 0x5c, 0x1c, 0x14, 0xc7, 0x3d, 0x1e, 0x88, 0x78,
	0xc6, 0x22, 0x6d, 0x6c, 0x6a, 0x9a, 0x80, 0xa8, 0xf4, 0x04, 0x48, 0xa4, 0x2b, 0x65, 0xba, 0x84,
	0xdb, 0x40, 0x97, 0x76, 0xd7, 0x48, 0xb0, 0x4f, 0xb8, 0x11, 0x0a, 0xda, 0xd8, 0x2b, 0x28, 0x6a,
	0x97, 0xf5, 0xab, 0x55, 0xe8, 0xd7, 0xaf, 0x15, 0xe8, 0x3c, 0xa3, 0xbe, 0xbc, 0x91, 0x9e, 0x2d,
	0x11, 0x36, 0xd7, 0x8f, 0x5a, 0xbe, 0x1f, 0x4b, 0x17, 0xdb, 0x28, 0x5c, 0xec, 0x27, 0xb8, 0x37,
	0x70, 0x03, 0x8f, 0x4d, 0x6f, 0xe5, 0x66, 0x4b, 0xe1, 0x6b, 0x85, 0xf0, 0x3f, 0xc3, 0xe9, 0x60,
	0xc2, 0xbc, 0x2b, 0x3f, 0xf8, 0x7f, 0xe2, 0xbf, 0x86, 0x4e, 0x66, 0x95, 0xa6, 0xb1, 0x6f, 0x68,
	0x93, 0xbe, 0x82, 0xce, 0xd7, 0x3e, 0xfb, 0xf1, 0x36, 0x52, 0xb3, 0xfe, 0xa8, 0xc1, 0x49, 0xa9,
	0xf3, 0x9b, 0xb9, 0xbb, 0x2a, 0x9d, 0x61, 0x72, 0xe0, 0xa6, 0xef, 0x13, 0x68, 0xe8, 0x4b, 0x57,
	0x3f, 0x50, 0xab, 0xb6, 0xc0, 0x29, 0x80, 0x16, 0xa1, 0xe9, 0xa6, 0x7e, 0xda, 0x10, 0x41, 0xcb,
	0xfb, 0xd0, 0x32, 0x7b, 0x00, 0xe5, 0x75, 0xed, 0x5a, 0x43, 0xa8, 0x50, 0xe0, 0x73, 0x03, 0x55,
	0xf2, 0x7c, 0x7e, 0x00, 0xdb, 0x09, 0x43, 0x91, 0xc9, 0x9a, 0xf3, 0x2d, 0x83, 0x21, 0x89, 0x33,
	0x2a, 0x48, 0xdf, 0x66, 0x4e, 0x05, 0x99, 0xfb, 0x29, 0xb4, 0x33, 0x3c, 0x57, 0xe5, 0x02, 0x5c,
	0x3c, 0x77, 0xb3, 0x8b, 0xc7, 0x4e, 0xf9, 0xae, 0x2a, 0xb6, 0x13, 0x65, 0x8f, 0xe4, 0x43, 0x00,
	0x5f, 0x38, 0x9e, 0x9e, 0x62, 0xa4, 0x7e, 0xbb, 0x7f, 0x90, 0xb5, 0x1e, 0x0a, 0x33, 0xe2, 0x76,
	0xd3, 0x4f, 0x7e, 0xf6, 0xff, 0xae, 0xc3, 0xbd, 0xa4, 0x75, 0x03, 0xcc, 0x3c, 0x79, 0x1c, 0x47,
	0xca, 0x77, 0x44, 0xc6, 0xb0, 0x57, 0xf2, 0xc8, 0x93, 0x87, 0xd7, 0x7d, 0x88, 0x98, 0xc9, 0xea,
	0x58, 0x59, 0xa5, 0xf2, 0xb7, 0xbc, 0x5b, 0x79, 0xbf, 0x42, 0x3c, 0xd8, 0xcf, 0x2e, 0xa5, 0xdb,
	0x09, 0x72, 0x09, 0xfb, 0x65, 0xdf, 0x00, 0xe4, 0x71, 0xde, 0x7e, 0xe5, 0x57, 0xc2, 0xda, 0x81,
	0x28, 0x90, 0x22, 0x97, 0x89, 0x55, 0x96, 0x4b, 0x9e, 0x89, 0x9d, 0x47, 0x59, 0x9d, 0xd5, 0xfb,
	0x00, 0xa3, 0x30, 0xd8, 0x2b, 0x59, 0xe4, 0x24, 0xe7, 0x62, 0xf5, 0xa6, 0x5f, 0x3b, 0x99, 0xef,
	0x60, 0xaf, 0x84, 0xdd, 0xf9, 0x30, 0xab, 0x77, 0x4b, 0xe7, 0xf1, 0xbf, 0xea, 0x65, 0x62, 0xf9,
	0x70, 0x50, 0xfa, 0x06, 0x90, 0x6e, 0xee, 0xb2, 0xd7, 0x3c, 0x13, 0x6b, 0xa7, 0x75, 0x05, 0x87,
	0xe5, 0xfb, 0x9e, 0xbc, 0x9b, 0xf3, 0x70, 0xdd, 0x9b, 0xb0, 0x6e, 0xb0, 0xa7, 0x2f, 0x5e, 0x7d,
	0x74, 0xe9, 0xcb, 0xa9, 0x3b, 0xee, 0x09, 0x39, 0xa7, 0x3d, 0x2f, 0x38, 0x8f, 0x25, 0x57, 0xff,
	0xde, 0x13, 0xf4, 0xea, 0xfc, 0x92, 0x9f, 0xe3, 0x1f, 0x58, 0xe7, 0x0b, 0x67, 0x9f, 0x2c, 0x7e,
	0xfe, 0x59, 0xdd, 0xfb, 0x4a, 0xf2, 0x0b, 0xa5, 0xf0, 0x7a, 0x94, 0xa2, 0xe3, 0x3a, 0x9a, 0x7c,
	0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xe6, 0x8d, 0xd0, 0xe1, 0x0d, 0x00, 0x00,
}
