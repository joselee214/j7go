// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// TuanApply represents a row from 'aypcddg.tuan_apply'.
type TuanApply struct {
	Taid        int             `json:"taid"`        // taid
	Tcid        sql.NullInt64   `json:"tcid"`        // tcid
	Fid         sql.NullInt64   `json:"fid"`         // fid
	Gid         sql.NullInt64   `json:"gid"`         // gid
	Type        sql.NullBool    `json:"type"`        // type
	Tuancount   sql.NullInt64   `json:"tuancount"`   // tuancount
	Price       sql.NullFloat64 `json:"price"`       // price
	Stepprice   sql.NullString  `json:"stepprice"`   // stepprice
	Prepay      sql.NullFloat64 `json:"prepay"`      // prepay
	Starttime   sql.NullInt64   `json:"starttime"`   // starttime
	Endtime     sql.NullInt64   `json:"endtime"`     // endtime
	Addby       sql.NullInt64   `json:"addby"`       // addby
	Updated     sql.NullInt64   `json:"updated"`     // updated
	Created     sql.NullInt64   `json:"created"`     // created
	Refauseword sql.NullString  `json:"refauseword"` // refauseword
	Status      sql.NullBool    `json:"status"`      // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TuanApply exists in the database.
func (ta *TuanApply) Exists() bool { //tuan_apply
	return ta._exists
}

// Deleted provides information if the TuanApply has been deleted from the database.
func (ta *TuanApply) Deleted() bool {
	return ta._deleted
}

// Get table name
func GetTuanApplyTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "tuan_apply", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the TuanApply to the database.
func (ta *TuanApply) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ta._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTuanApplyTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`tcid, fid, gid, type, tuancount, price, stepprice, prepay, starttime, endtime, addby, updated, created, refauseword, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ta.Tcid, ta.Fid, ta.Gid, ta.Type, ta.Tuancount, ta.Price, ta.Stepprice, ta.Prepay, ta.Starttime, ta.Endtime, ta.Addby, ta.Updated, ta.Created, ta.Refauseword, ta.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ta.Tcid, ta.Fid, ta.Gid, ta.Type, ta.Tuancount, ta.Price, ta.Stepprice, ta.Prepay, ta.Starttime, ta.Endtime, ta.Addby, ta.Updated, ta.Created, ta.Refauseword, ta.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, ta.Tcid, ta.Fid, ta.Gid, ta.Type, ta.Tuancount, ta.Price, ta.Stepprice, ta.Prepay, ta.Starttime, ta.Endtime, ta.Addby, ta.Updated, ta.Created, ta.Refauseword, ta.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ta.Taid = int(id)
	ta._exists = true

	return nil
}

// Update updates the TuanApply in the database.
func (ta *TuanApply) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ta._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTuanApplyTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`tcid = ?, fid = ?, gid = ?, type = ?, tuancount = ?, price = ?, stepprice = ?, prepay = ?, starttime = ?, endtime = ?, addby = ?, updated = ?, created = ?, refauseword = ?, status = ?` +
		` WHERE taid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ta.Tcid, ta.Fid, ta.Gid, ta.Type, ta.Tuancount, ta.Price, ta.Stepprice, ta.Prepay, ta.Starttime, ta.Endtime, ta.Addby, ta.Updated, ta.Created, ta.Refauseword, ta.Status, ta.Taid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ta.Tcid, ta.Fid, ta.Gid, ta.Type, ta.Tuancount, ta.Price, ta.Stepprice, ta.Prepay, ta.Starttime, ta.Endtime, ta.Addby, ta.Updated, ta.Created, ta.Refauseword, ta.Status, ta.Taid)
	} else {
		_, err = dbConn.Exec(sqlstr, ta.Tcid, ta.Fid, ta.Gid, ta.Type, ta.Tuancount, ta.Price, ta.Stepprice, ta.Prepay, ta.Starttime, ta.Endtime, ta.Addby, ta.Updated, ta.Created, ta.Refauseword, ta.Status, ta.Taid)
	}
	return err
}

// Save saves the TuanApply to the database.
func (ta *TuanApply) Save(ctx context.Context) error {
	if ta.Exists() {
		return ta.Update(ctx)
	}

	return ta.Insert(ctx)
}

// Delete deletes the TuanApply from the database.
func (ta *TuanApply) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ta._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTuanApplyTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE taid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ta.Taid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ta.Taid)
	} else {
		_, err = dbConn.Exec(sqlstr, ta.Taid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ta._deleted = true

	return nil
}

// TuanApplyByTaid retrieves a row from 'aypcddg.tuan_apply' as a TuanApply.
//
// Generated from index 'tuan_apply_taid_pkey'.
func TuanApplyByTaid(ctx context.Context, taid int, key ...interface{}) (*TuanApply, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetTuanApplyTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`taid, tcid, fid, gid, type, tuancount, price, stepprice, prepay, starttime, endtime, addby, updated, created, refauseword, status ` +
		`FROM ` + tableName +
		` WHERE taid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, taid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ta := TuanApply{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, taid).Scan(&ta.Taid, &ta.Tcid, &ta.Fid, &ta.Gid, &ta.Type, &ta.Tuancount, &ta.Price, &ta.Stepprice, &ta.Prepay, &ta.Starttime, &ta.Endtime, &ta.Addby, &ta.Updated, &ta.Created, &ta.Refauseword, &ta.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, taid).Scan(&ta.Taid, &ta.Tcid, &ta.Fid, &ta.Gid, &ta.Type, &ta.Tuancount, &ta.Price, &ta.Stepprice, &ta.Prepay, &ta.Starttime, &ta.Endtime, &ta.Addby, &ta.Updated, &ta.Created, &ta.Refauseword, &ta.Status)
		if err != nil {
			return nil, err
		}
	}

	return &ta, nil
}
