// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsCategoryAttr represents a row from 'aypcddg.goods_category_attr'.
type GoodsCategoryAttr struct {
	Gcaid  uint           `json:"gcaid"`   // gcaid
	Gcid   uint           `json:"gcid"`    // gcid
	Fid    int            `json:"fid"`     // fid
	IsSpec sql.NullString `json:"is_spec"` // is_spec
	Title  sql.NullString `json:"title"`   // title
	Seq    int16          `json:"seq"`     // seq
	Tp     sql.NullString `json:"tp"`      // tp
	Vals   sql.NullString `json:"vals"`    // vals
	Status bool           `json:"status"`  // status
	Gid    sql.NullInt64  `json:"gid"`     // gid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsCategoryAttr exists in the database.
func (gca *GoodsCategoryAttr) Exists() bool { //goods_category_attr
	return gca._exists
}

// Deleted provides information if the GoodsCategoryAttr has been deleted from the database.
func (gca *GoodsCategoryAttr) Deleted() bool {
	return gca._deleted
}

// Get table name
func GetGoodsCategoryAttrTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_category_attr", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsCategoryAttr to the database.
func (gca *GoodsCategoryAttr) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gca._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsCategoryAttrTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`gcid, fid, is_spec, title, seq, tp, vals, status, gid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gca.Gcid, gca.Fid, gca.IsSpec, gca.Title, gca.Seq, gca.Tp, gca.Vals, gca.Status, gca.Gid)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gca.Gcid, gca.Fid, gca.IsSpec, gca.Title, gca.Seq, gca.Tp, gca.Vals, gca.Status, gca.Gid)
	} else {
		res, err = dbConn.Exec(sqlstr, gca.Gcid, gca.Fid, gca.IsSpec, gca.Title, gca.Seq, gca.Tp, gca.Vals, gca.Status, gca.Gid)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gca.Gcaid = uint(id)
	gca._exists = true

	return nil
}

// Update updates the GoodsCategoryAttr in the database.
func (gca *GoodsCategoryAttr) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gca._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsCategoryAttrTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`gcid = ?, fid = ?, is_spec = ?, title = ?, seq = ?, tp = ?, vals = ?, status = ?, gid = ?` +
		` WHERE gcaid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gca.Gcid, gca.Fid, gca.IsSpec, gca.Title, gca.Seq, gca.Tp, gca.Vals, gca.Status, gca.Gid, gca.Gcaid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gca.Gcid, gca.Fid, gca.IsSpec, gca.Title, gca.Seq, gca.Tp, gca.Vals, gca.Status, gca.Gid, gca.Gcaid)
	} else {
		_, err = dbConn.Exec(sqlstr, gca.Gcid, gca.Fid, gca.IsSpec, gca.Title, gca.Seq, gca.Tp, gca.Vals, gca.Status, gca.Gid, gca.Gcaid)
	}
	return err
}

// Save saves the GoodsCategoryAttr to the database.
func (gca *GoodsCategoryAttr) Save(ctx context.Context) error {
	if gca.Exists() {
		return gca.Update(ctx)
	}

	return gca.Insert(ctx)
}

// Delete deletes the GoodsCategoryAttr from the database.
func (gca *GoodsCategoryAttr) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gca._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsCategoryAttrTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE gcaid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gca.Gcaid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gca.Gcaid)
	} else {
		_, err = dbConn.Exec(sqlstr, gca.Gcaid)
	}

	if err != nil {
		return err
	}

	// set deleted
	gca._deleted = true

	return nil
}

// GoodsCategoryAttrsByFid retrieves a row from 'aypcddg.goods_category_attr' as a GoodsCategoryAttr.
//
// Generated from index 'fid'.
func GoodsCategoryAttrsByFid(ctx context.Context, fid int, key ...interface{}) ([]*GoodsCategoryAttr, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsCategoryAttrTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gcaid, gcid, fid, is_spec, title, seq, tp, vals, status, gid ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsCategoryAttr, 0)
	for queryData.Next() {
		gca := GoodsCategoryAttr{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gca.Gcaid, &gca.Gcid, &gca.Fid, &gca.IsSpec, &gca.Title, &gca.Seq, &gca.Tp, &gca.Vals, &gca.Status, &gca.Gid)
		if err != nil {
			return nil, err
		}

		res = append(res, &gca)
	}

	return res, nil
}

// GoodsCategoryAttrsByGcid retrieves a row from 'aypcddg.goods_category_attr' as a GoodsCategoryAttr.
//
// Generated from index 'gcid'.
func GoodsCategoryAttrsByGcid(ctx context.Context, gcid uint, key ...interface{}) ([]*GoodsCategoryAttr, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsCategoryAttrTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gcaid, gcid, fid, is_spec, title, seq, tp, vals, status, gid ` +
		`FROM ` + tableName +
		` WHERE gcid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gcid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gcid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gcid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsCategoryAttr, 0)
	for queryData.Next() {
		gca := GoodsCategoryAttr{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gca.Gcaid, &gca.Gcid, &gca.Fid, &gca.IsSpec, &gca.Title, &gca.Seq, &gca.Tp, &gca.Vals, &gca.Status, &gca.Gid)
		if err != nil {
			return nil, err
		}

		res = append(res, &gca)
	}

	return res, nil
}

// GoodsCategoryAttrByGcaid retrieves a row from 'aypcddg.goods_category_attr' as a GoodsCategoryAttr.
//
// Generated from index 'goods_category_attr_gcaid_pkey'.
func GoodsCategoryAttrByGcaid(ctx context.Context, gcaid uint, key ...interface{}) (*GoodsCategoryAttr, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsCategoryAttrTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gcaid, gcid, fid, is_spec, title, seq, tp, vals, status, gid ` +
		`FROM ` + tableName +
		` WHERE gcaid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gcaid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gca := GoodsCategoryAttr{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, gcaid).Scan(&gca.Gcaid, &gca.Gcid, &gca.Fid, &gca.IsSpec, &gca.Title, &gca.Seq, &gca.Tp, &gca.Vals, &gca.Status, &gca.Gid)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, gcaid).Scan(&gca.Gcaid, &gca.Gcid, &gca.Fid, &gca.IsSpec, &gca.Title, &gca.Seq, &gca.Tp, &gca.Vals, &gca.Status, &gca.Gid)
		if err != nil {
			return nil, err
		}
	}

	return &gca, nil
}

// GoodsCategoryAttrsBySeq retrieves a row from 'aypcddg.goods_category_attr' as a GoodsCategoryAttr.
//
// Generated from index 'seq'.
func GoodsCategoryAttrsBySeq(ctx context.Context, seq int16, key ...interface{}) ([]*GoodsCategoryAttr, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsCategoryAttrTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gcaid, gcid, fid, is_spec, title, seq, tp, vals, status, gid ` +
		`FROM ` + tableName +
		` WHERE seq = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, seq)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, seq)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, seq)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsCategoryAttr, 0)
	for queryData.Next() {
		gca := GoodsCategoryAttr{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gca.Gcaid, &gca.Gcid, &gca.Fid, &gca.IsSpec, &gca.Title, &gca.Seq, &gca.Tp, &gca.Vals, &gca.Status, &gca.Gid)
		if err != nil {
			return nil, err
		}

		res = append(res, &gca)
	}

	return res, nil
}

// GoodsCategoryAttrsByStatus retrieves a row from 'aypcddg.goods_category_attr' as a GoodsCategoryAttr.
//
// Generated from index 'status'.
func GoodsCategoryAttrsByStatus(ctx context.Context, status bool, key ...interface{}) ([]*GoodsCategoryAttr, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsCategoryAttrTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gcaid, gcid, fid, is_spec, title, seq, tp, vals, status, gid ` +
		`FROM ` + tableName +
		` WHERE status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsCategoryAttr, 0)
	for queryData.Next() {
		gca := GoodsCategoryAttr{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gca.Gcaid, &gca.Gcid, &gca.Fid, &gca.IsSpec, &gca.Title, &gca.Seq, &gca.Tp, &gca.Vals, &gca.Status, &gca.Gid)
		if err != nil {
			return nil, err
		}

		res = append(res, &gca)
	}

	return res, nil
}
