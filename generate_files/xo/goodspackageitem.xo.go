// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsPackageItem represents a row from 'aypcddg.goods_package_item'.
type GoodsPackageItem struct {
	Gpid      int `json:"gpid"`      // gpid
	Packageid int `json:"packageid"` // packageid
	Gid       int `json:"gid"`       // gid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsPackageItem exists in the database.
func (gpi *GoodsPackageItem) Exists() bool { //goods_package_item
	return gpi._exists
}

// Deleted provides information if the GoodsPackageItem has been deleted from the database.
func (gpi *GoodsPackageItem) Deleted() bool {
	return gpi._deleted
}

// Get table name
func GetGoodsPackageItemTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_package_item", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsPackageItem to the database.
func (gpi *GoodsPackageItem) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gpi._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPackageItemTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`packageid, gid` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gpi.Packageid, gpi.Gid)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gpi.Packageid, gpi.Gid)
	} else {
		res, err = dbConn.Exec(sqlstr, gpi.Packageid, gpi.Gid)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gpi.Gpid = int(id)
	gpi._exists = true

	return nil
}

// Update updates the GoodsPackageItem in the database.
func (gpi *GoodsPackageItem) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gpi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPackageItemTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`packageid = ?, gid = ?` +
		` WHERE gpid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gpi.Packageid, gpi.Gid, gpi.Gpid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gpi.Packageid, gpi.Gid, gpi.Gpid)
	} else {
		_, err = dbConn.Exec(sqlstr, gpi.Packageid, gpi.Gid, gpi.Gpid)
	}
	return err
}

// Save saves the GoodsPackageItem to the database.
func (gpi *GoodsPackageItem) Save(ctx context.Context) error {
	if gpi.Exists() {
		return gpi.Update(ctx)
	}

	return gpi.Insert(ctx)
}

// Delete deletes the GoodsPackageItem from the database.
func (gpi *GoodsPackageItem) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gpi._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPackageItemTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE gpid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gpi.Gpid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gpi.Gpid)
	} else {
		_, err = dbConn.Exec(sqlstr, gpi.Gpid)
	}

	if err != nil {
		return err
	}

	// set deleted
	gpi._deleted = true

	return nil
}

// GoodsPackageItemByGpid retrieves a row from 'aypcddg.goods_package_item' as a GoodsPackageItem.
//
// Generated from index 'goods_package_item_gpid_pkey'.
func GoodsPackageItemByGpid(ctx context.Context, gpid int, key ...interface{}) (*GoodsPackageItem, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsPackageItemTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gpid, packageid, gid ` +
		`FROM ` + tableName +
		` WHERE gpid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gpid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gpi := GoodsPackageItem{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, gpid).Scan(&gpi.Gpid, &gpi.Packageid, &gpi.Gid)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, gpid).Scan(&gpi.Gpid, &gpi.Packageid, &gpi.Gid)
		if err != nil {
			return nil, err
		}
	}

	return &gpi, nil
}

// GoodsPackageItemsByPackageidGid retrieves a row from 'aypcddg.goods_package_item' as a GoodsPackageItem.
//
// Generated from index 'packageid'.
func GoodsPackageItemsByPackageidGid(ctx context.Context, packageid int, gid int, key ...interface{}) ([]*GoodsPackageItem, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsPackageItemTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gpid, packageid, gid ` +
		`FROM ` + tableName +
		` WHERE packageid = ? AND gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, packageid, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, packageid, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, packageid, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsPackageItem, 0)
	for queryData.Next() {
		gpi := GoodsPackageItem{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gpi.Gpid, &gpi.Packageid, &gpi.Gid)
		if err != nil {
			return nil, err
		}

		res = append(res, &gpi)
	}

	return res, nil
}
