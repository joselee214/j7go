// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// ComponentFactory represents a row from 'aypcddg.component_factory'.
type ComponentFactory struct {
	ID        uint           `json:"id"`         // id
	FactoryID int            `json:"factory_id"` // factory_id
	Status    sql.NullInt64  `json:"status"`     // status
	Remark    sql.NullString `json:"remark"`     // remark
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ComponentFactory exists in the database.
func (cf *ComponentFactory) Exists() bool { //component_factory
	return cf._exists
}

// Deleted provides information if the ComponentFactory has been deleted from the database.
func (cf *ComponentFactory) Deleted() bool {
	return cf._deleted
}

// Get table name
func GetComponentFactoryTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "component_factory", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ComponentFactory to the database.
func (cf *ComponentFactory) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if cf._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetComponentFactoryTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`factory_id, status, remark, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cf.FactoryID, cf.Status, cf.Remark, cf.CreatedAt, cf.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, cf.FactoryID, cf.Status, cf.Remark, cf.CreatedAt, cf.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, cf.FactoryID, cf.Status, cf.Remark, cf.CreatedAt, cf.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cf.ID = uint(id)
	cf._exists = true

	return nil
}

// Update updates the ComponentFactory in the database.
func (cf *ComponentFactory) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetComponentFactoryTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`factory_id = ?, status = ?, remark = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cf.FactoryID, cf.Status, cf.Remark, cf.CreatedAt, cf.UpdatedAt, cf.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cf.FactoryID, cf.Status, cf.Remark, cf.CreatedAt, cf.UpdatedAt, cf.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cf.FactoryID, cf.Status, cf.Remark, cf.CreatedAt, cf.UpdatedAt, cf.ID)
	}
	return err
}

// Save saves the ComponentFactory to the database.
func (cf *ComponentFactory) Save(ctx context.Context) error {
	if cf.Exists() {
		return cf.Update(ctx)
	}

	return cf.Insert(ctx)
}

// Delete deletes the ComponentFactory from the database.
func (cf *ComponentFactory) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cf._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetComponentFactoryTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cf.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cf.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cf.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	cf._deleted = true

	return nil
}

// ComponentFactoryByFactoryID retrieves a row from 'aypcddg.component_factory' as a ComponentFactory.
//
// Generated from index 'component_factory_factory_id_unique'.
func ComponentFactoryByFactoryID(ctx context.Context, factoryID int, key ...interface{}) (*ComponentFactory, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetComponentFactoryTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, factory_id, status, remark, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE factory_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, factoryID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	cf := ComponentFactory{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, factoryID).Scan(&cf.ID, &cf.FactoryID, &cf.Status, &cf.Remark, &cf.CreatedAt, &cf.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, factoryID).Scan(&cf.ID, &cf.FactoryID, &cf.Status, &cf.Remark, &cf.CreatedAt, &cf.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &cf, nil
}

// ComponentFactoryByID retrieves a row from 'aypcddg.component_factory' as a ComponentFactory.
//
// Generated from index 'component_factory_id_pkey'.
func ComponentFactoryByID(ctx context.Context, id uint, key ...interface{}) (*ComponentFactory, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetComponentFactoryTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, factory_id, status, remark, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	cf := ComponentFactory{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&cf.ID, &cf.FactoryID, &cf.Status, &cf.Remark, &cf.CreatedAt, &cf.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&cf.ID, &cf.FactoryID, &cf.Status, &cf.Remark, &cf.CreatedAt, &cf.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &cf, nil
}
