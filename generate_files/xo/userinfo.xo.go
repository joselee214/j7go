// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// UserInfo represents a row from 'aypcddg.user_info'.
type UserInfo struct {
	UID         uint           `json:"uid"`          // uid
	Nickname    sql.NullString `json:"nickname"`     // nickname
	ShopID      uint           `json:"shop_id"`      // shop_id
	Gender      bool           `json:"gender"`       // gender
	Birthday    sql.NullString `json:"birthday"`     // birthday
	PayPoint    int            `json:"pay_point"`    // pay_point
	PayedAmount float64        `json:"payed_amount"` // payed_amount
	UserLevel   int16          `json:"user_level"`   // user_level
	CashLeft    float64        `json:"cash_left"`    // cash_left
	PayType     sql.NullString `json:"pay_type"`     // pay_type
	Avatar      sql.NullString `json:"avatar"`       // avatar
	Realname    sql.NullString `json:"realname"`     // realname
	Icard       sql.NullString `json:"icard"`        // icard
	Tag         sql.NullString `json:"tag"`          // tag

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserInfo exists in the database.
func (ui *UserInfo) Exists() bool { //user_info
	return ui._exists
}

// Deleted provides information if the UserInfo has been deleted from the database.
func (ui *UserInfo) Deleted() bool {
	return ui._deleted
}

// Get table name
func GetUserInfoTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "user_info", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UserInfo to the database.
func (ui *UserInfo) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ui._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, nickname, shop_id, gender, birthday, pay_point, payed_amount, user_level, cash_left, pay_type, avatar, realname, icard, tag` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ui.UID, ui.Nickname, ui.ShopID, ui.Gender, ui.Birthday, ui.PayPoint, ui.PayedAmount, ui.UserLevel, ui.CashLeft, ui.PayType, ui.Avatar, ui.Realname, ui.Icard, ui.Tag)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, ui.UID, ui.Nickname, ui.ShopID, ui.Gender, ui.Birthday, ui.PayPoint, ui.PayedAmount, ui.UserLevel, ui.CashLeft, ui.PayType, ui.Avatar, ui.Realname, ui.Icard, ui.Tag)
	} else {
		res, err = dbConn.Exec(sqlstr, ui.UID, ui.Nickname, ui.ShopID, ui.Gender, ui.Birthday, ui.PayPoint, ui.PayedAmount, ui.UserLevel, ui.CashLeft, ui.PayType, ui.Avatar, ui.Realname, ui.Icard, ui.Tag)
	}

	if err != nil {
		return err
	}

	// set existence
	ui._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ui.UID = uint(id)
	ui._exists = true

	return nil
}

// Update updates the UserInfo in the database.
func (ui *UserInfo) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ui._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`nickname = ?, shop_id = ?, gender = ?, birthday = ?, pay_point = ?, payed_amount = ?, user_level = ?, cash_left = ?, pay_type = ?, avatar = ?, realname = ?, icard = ?, tag = ?` +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ui.Nickname, ui.ShopID, ui.Gender, ui.Birthday, ui.PayPoint, ui.PayedAmount, ui.UserLevel, ui.CashLeft, ui.PayType, ui.Avatar, ui.Realname, ui.Icard, ui.Tag, ui.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ui.Nickname, ui.ShopID, ui.Gender, ui.Birthday, ui.PayPoint, ui.PayedAmount, ui.UserLevel, ui.CashLeft, ui.PayType, ui.Avatar, ui.Realname, ui.Icard, ui.Tag, ui.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, ui.Nickname, ui.ShopID, ui.Gender, ui.Birthday, ui.PayPoint, ui.PayedAmount, ui.UserLevel, ui.CashLeft, ui.PayType, ui.Avatar, ui.Realname, ui.Icard, ui.Tag, ui.UID)
	}
	return err
}

// Save saves the UserInfo to the database.
func (ui *UserInfo) Save(ctx context.Context) error {
	if ui.Exists() {
		return ui.Update(ctx)
	}

	return ui.Insert(ctx)
}

// Delete deletes the UserInfo from the database.
func (ui *UserInfo) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ui._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserInfoTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ui.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ui.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, ui.UID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ui._deleted = true

	return nil
}

// UserInfoByUID retrieves a row from 'aypcddg.user_info' as a UserInfo.
//
// Generated from index 'uid'.
func UserInfoByUID(ctx context.Context, uid uint, key ...interface{}) (*UserInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, nickname, shop_id, gender, birthday, pay_point, payed_amount, user_level, cash_left, pay_type, avatar, realname, icard, tag ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ui := UserInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid).Scan(&ui.UID, &ui.Nickname, &ui.ShopID, &ui.Gender, &ui.Birthday, &ui.PayPoint, &ui.PayedAmount, &ui.UserLevel, &ui.CashLeft, &ui.PayType, &ui.Avatar, &ui.Realname, &ui.Icard, &ui.Tag)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid).Scan(&ui.UID, &ui.Nickname, &ui.ShopID, &ui.Gender, &ui.Birthday, &ui.PayPoint, &ui.PayedAmount, &ui.UserLevel, &ui.CashLeft, &ui.PayType, &ui.Avatar, &ui.Realname, &ui.Icard, &ui.Tag)
		if err != nil {
			return nil, err
		}
	}

	return &ui, nil
}

// UserInfoByUID retrieves a row from 'aypcddg.user_info' as a UserInfo.
//
// Generated from index 'user_info_uid_pkey'.
func UserInfoByUID(ctx context.Context, uid uint, key ...interface{}) (*UserInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, nickname, shop_id, gender, birthday, pay_point, payed_amount, user_level, cash_left, pay_type, avatar, realname, icard, tag ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ui := UserInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid).Scan(&ui.UID, &ui.Nickname, &ui.ShopID, &ui.Gender, &ui.Birthday, &ui.PayPoint, &ui.PayedAmount, &ui.UserLevel, &ui.CashLeft, &ui.PayType, &ui.Avatar, &ui.Realname, &ui.Icard, &ui.Tag)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid).Scan(&ui.UID, &ui.Nickname, &ui.ShopID, &ui.Gender, &ui.Birthday, &ui.PayPoint, &ui.PayedAmount, &ui.UserLevel, &ui.CashLeft, &ui.PayType, &ui.Avatar, &ui.Realname, &ui.Icard, &ui.Tag)
		if err != nil {
			return nil, err
		}
	}

	return &ui, nil
}

// UserInfosByUserLevel retrieves a row from 'aypcddg.user_info' as a UserInfo.
//
// Generated from index 'user_level'.
func UserInfosByUserLevel(ctx context.Context, userLevel int16, key ...interface{}) ([]*UserInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, nickname, shop_id, gender, birthday, pay_point, payed_amount, user_level, cash_left, pay_type, avatar, realname, icard, tag ` +
		`FROM ` + tableName +
		` WHERE user_level = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, userLevel)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, userLevel)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, userLevel)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*UserInfo, 0)
	for queryData.Next() {
		ui := UserInfo{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&ui.UID, &ui.Nickname, &ui.ShopID, &ui.Gender, &ui.Birthday, &ui.PayPoint, &ui.PayedAmount, &ui.UserLevel, &ui.CashLeft, &ui.PayType, &ui.Avatar, &ui.Realname, &ui.Icard, &ui.Tag)
		if err != nil {
			return nil, err
		}

		res = append(res, &ui)
	}

	return res, nil
}
