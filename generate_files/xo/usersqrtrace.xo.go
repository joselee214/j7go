// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// UsersQrTrace represents a row from 'aypcddg.users_qr_trace'.
type UsersQrTrace struct {
	ID      int            `json:"id"`      // id
	Openid  string         `json:"openid"`  // openid
	Unionid sql.NullString `json:"unionid"` // unionid
	Appid   sql.NullString `json:"appid"`   // appid
	UID     sql.NullInt64  `json:"uid"`     // uid
	Gcode   sql.NullString `json:"gcode"`   // gcode
	Tcode   sql.NullString `json:"tcode"`   // tcode
	Tuid    sql.NullInt64  `json:"tuid"`    // tuid
	Tfid    sql.NullInt64  `json:"tfid"`    // tfid
	Tsid    sql.NullInt64  `json:"tsid"`    // tsid
	Gof     sql.NullInt64  `json:"gof"`     // gof
	Gog     sql.NullInt64  `json:"gog"`     // gog
	Goc     sql.NullInt64  `json:"goc"`     // goc
	Gos     sql.NullInt64  `json:"gos"`     // gos
	Updated mysql.NullTime `json:"updated"` // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UsersQrTrace exists in the database.
func (uqt *UsersQrTrace) Exists() bool { //users_qr_trace
	return uqt._exists
}

// Deleted provides information if the UsersQrTrace has been deleted from the database.
func (uqt *UsersQrTrace) Deleted() bool {
	return uqt._deleted
}

// Get table name
func GetUsersQrTraceTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "users_qr_trace", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UsersQrTrace to the database.
func (uqt *UsersQrTrace) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if uqt._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersQrTraceTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`openid, unionid, appid, uid, gcode, tcode, tuid, tfid, tsid, gof, gog, goc, gos, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uqt.Openid, uqt.Unionid, uqt.Appid, uqt.UID, uqt.Gcode, uqt.Tcode, uqt.Tuid, uqt.Tfid, uqt.Tsid, uqt.Gof, uqt.Gog, uqt.Goc, uqt.Gos, uqt.Updated)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, uqt.Openid, uqt.Unionid, uqt.Appid, uqt.UID, uqt.Gcode, uqt.Tcode, uqt.Tuid, uqt.Tfid, uqt.Tsid, uqt.Gof, uqt.Gog, uqt.Goc, uqt.Gos, uqt.Updated)
	} else {
		res, err = dbConn.Exec(sqlstr, uqt.Openid, uqt.Unionid, uqt.Appid, uqt.UID, uqt.Gcode, uqt.Tcode, uqt.Tuid, uqt.Tfid, uqt.Tsid, uqt.Gof, uqt.Gog, uqt.Goc, uqt.Gos, uqt.Updated)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	uqt.ID = int(id)
	uqt._exists = true

	return nil
}

// Update updates the UsersQrTrace in the database.
func (uqt *UsersQrTrace) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if uqt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersQrTraceTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`openid = ?, unionid = ?, appid = ?, uid = ?, gcode = ?, tcode = ?, tuid = ?, tfid = ?, tsid = ?, gof = ?, gog = ?, goc = ?, gos = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uqt.Openid, uqt.Unionid, uqt.Appid, uqt.UID, uqt.Gcode, uqt.Tcode, uqt.Tuid, uqt.Tfid, uqt.Tsid, uqt.Gof, uqt.Gog, uqt.Goc, uqt.Gos, uqt.Updated, uqt.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, uqt.Openid, uqt.Unionid, uqt.Appid, uqt.UID, uqt.Gcode, uqt.Tcode, uqt.Tuid, uqt.Tfid, uqt.Tsid, uqt.Gof, uqt.Gog, uqt.Goc, uqt.Gos, uqt.Updated, uqt.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, uqt.Openid, uqt.Unionid, uqt.Appid, uqt.UID, uqt.Gcode, uqt.Tcode, uqt.Tuid, uqt.Tfid, uqt.Tsid, uqt.Gof, uqt.Gog, uqt.Goc, uqt.Gos, uqt.Updated, uqt.ID)
	}
	return err
}

// Save saves the UsersQrTrace to the database.
func (uqt *UsersQrTrace) Save(ctx context.Context) error {
	if uqt.Exists() {
		return uqt.Update(ctx)
	}

	return uqt.Insert(ctx)
}

// Delete deletes the UsersQrTrace from the database.
func (uqt *UsersQrTrace) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if uqt._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersQrTraceTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uqt.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, uqt.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, uqt.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	uqt._deleted = true

	return nil
}

// UsersQrTraceByID retrieves a row from 'aypcddg.users_qr_trace' as a UsersQrTrace.
//
// Generated from index 'users_qr_trace_id_pkey'.
func UsersQrTraceByID(ctx context.Context, id int, key ...interface{}) (*UsersQrTrace, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUsersQrTraceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, openid, unionid, appid, uid, gcode, tcode, tuid, tfid, tsid, gof, gog, goc, gos, updated ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	uqt := UsersQrTrace{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&uqt.ID, &uqt.Openid, &uqt.Unionid, &uqt.Appid, &uqt.UID, &uqt.Gcode, &uqt.Tcode, &uqt.Tuid, &uqt.Tfid, &uqt.Tsid, &uqt.Gof, &uqt.Gog, &uqt.Goc, &uqt.Gos, &uqt.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&uqt.ID, &uqt.Openid, &uqt.Unionid, &uqt.Appid, &uqt.UID, &uqt.Gcode, &uqt.Tcode, &uqt.Tuid, &uqt.Tfid, &uqt.Tsid, &uqt.Gof, &uqt.Gog, &uqt.Goc, &uqt.Gos, &uqt.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &uqt, nil
}
