// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BizAsyncJob represents a row from 'aypcddg.biz_async_job'.
type BizAsyncJob struct {
	ID         uint64         `json:"id"`          // id
	UID        int            `json:"uid"`         // uid
	RelationID int            `json:"relation_id"` // relation_id
	Type       string         `json:"type"`        // type
	Body       sql.NullString `json:"body"`        // body
	Ret        sql.NullString `json:"ret"`         // ret
	Exception  sql.NullString `json:"exception"`   // exception
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BizAsyncJob exists in the database.
func (baj *BizAsyncJob) Exists() bool { //biz_async_job
	return baj._exists
}

// Deleted provides information if the BizAsyncJob has been deleted from the database.
func (baj *BizAsyncJob) Deleted() bool {
	return baj._deleted
}

// Get table name
func GetBizAsyncJobTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "biz_async_job", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BizAsyncJob to the database.
func (baj *BizAsyncJob) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if baj._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBizAsyncJobTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, relation_id, type, body, ret, exception, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, baj.UID, baj.RelationID, baj.Type, baj.Body, baj.Ret, baj.Exception, baj.CreatedAt, baj.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, baj.UID, baj.RelationID, baj.Type, baj.Body, baj.Ret, baj.Exception, baj.CreatedAt, baj.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, baj.UID, baj.RelationID, baj.Type, baj.Body, baj.Ret, baj.Exception, baj.CreatedAt, baj.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	baj.ID = uint64(id)
	baj._exists = true

	return nil
}

// Update updates the BizAsyncJob in the database.
func (baj *BizAsyncJob) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if baj._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBizAsyncJobTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, relation_id = ?, type = ?, body = ?, ret = ?, exception = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, baj.UID, baj.RelationID, baj.Type, baj.Body, baj.Ret, baj.Exception, baj.CreatedAt, baj.UpdatedAt, baj.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, baj.UID, baj.RelationID, baj.Type, baj.Body, baj.Ret, baj.Exception, baj.CreatedAt, baj.UpdatedAt, baj.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, baj.UID, baj.RelationID, baj.Type, baj.Body, baj.Ret, baj.Exception, baj.CreatedAt, baj.UpdatedAt, baj.ID)
	}
	return err
}

// Save saves the BizAsyncJob to the database.
func (baj *BizAsyncJob) Save(ctx context.Context) error {
	if baj.Exists() {
		return baj.Update(ctx)
	}

	return baj.Insert(ctx)
}

// Delete deletes the BizAsyncJob from the database.
func (baj *BizAsyncJob) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if baj._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBizAsyncJobTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, baj.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, baj.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, baj.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	baj._deleted = true

	return nil
}

// BizAsyncJobByID retrieves a row from 'aypcddg.biz_async_job' as a BizAsyncJob.
//
// Generated from index 'biz_async_job_id_pkey'.
func BizAsyncJobByID(ctx context.Context, id uint64, key ...interface{}) (*BizAsyncJob, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBizAsyncJobTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, relation_id, type, body, ret, exception, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	baj := BizAsyncJob{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&baj.ID, &baj.UID, &baj.RelationID, &baj.Type, &baj.Body, &baj.Ret, &baj.Exception, &baj.CreatedAt, &baj.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&baj.ID, &baj.UID, &baj.RelationID, &baj.Type, &baj.Body, &baj.Ret, &baj.Exception, &baj.CreatedAt, &baj.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &baj, nil
}
