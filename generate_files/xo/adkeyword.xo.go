// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// AdKeyword represents a row from 'aypcddg.ad_keyword'.
type AdKeyword struct {
	Akid        int     `json:"akid"`        // akid
	Aiid        int     `json:"aiid"`        // aiid
	PosStart    int     `json:"pos_start"`   // pos_start
	PosEnd      int     `json:"pos_end"`     // pos_end
	Dailybudget float64 `json:"dailybudget"` // dailybudget
	Chargingway int     `json:"chargingway"` // chargingway
	Price       float64 `json:"price"`       // price
	Starttime   int     `json:"starttime"`   // starttime
	Endtime     int     `json:"endtime"`     // endtime
	Addby       int     `json:"addby"`       // addby
	Updated     int     `json:"updated"`     // updated
	Created     int     `json:"created"`     // created
	Status      int8    `json:"status"`      // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AdKeyword exists in the database.
func (ak *AdKeyword) Exists() bool { //ad_keyword
	return ak._exists
}

// Deleted provides information if the AdKeyword has been deleted from the database.
func (ak *AdKeyword) Deleted() bool {
	return ak._deleted
}

// Get table name
func GetAdKeywordTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "ad_keyword", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AdKeyword to the database.
func (ak *AdKeyword) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ak._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdKeywordTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`aiid, pos_start, pos_end, dailybudget, chargingway, price, starttime, endtime, addby, updated, created, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ak.Aiid, ak.PosStart, ak.PosEnd, ak.Dailybudget, ak.Chargingway, ak.Price, ak.Starttime, ak.Endtime, ak.Addby, ak.Updated, ak.Created, ak.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ak.Aiid, ak.PosStart, ak.PosEnd, ak.Dailybudget, ak.Chargingway, ak.Price, ak.Starttime, ak.Endtime, ak.Addby, ak.Updated, ak.Created, ak.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, ak.Aiid, ak.PosStart, ak.PosEnd, ak.Dailybudget, ak.Chargingway, ak.Price, ak.Starttime, ak.Endtime, ak.Addby, ak.Updated, ak.Created, ak.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ak.Akid = int(id)
	ak._exists = true

	return nil
}

// Update updates the AdKeyword in the database.
func (ak *AdKeyword) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ak._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdKeywordTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`aiid = ?, pos_start = ?, pos_end = ?, dailybudget = ?, chargingway = ?, price = ?, starttime = ?, endtime = ?, addby = ?, updated = ?, created = ?, status = ?` +
		` WHERE akid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ak.Aiid, ak.PosStart, ak.PosEnd, ak.Dailybudget, ak.Chargingway, ak.Price, ak.Starttime, ak.Endtime, ak.Addby, ak.Updated, ak.Created, ak.Status, ak.Akid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ak.Aiid, ak.PosStart, ak.PosEnd, ak.Dailybudget, ak.Chargingway, ak.Price, ak.Starttime, ak.Endtime, ak.Addby, ak.Updated, ak.Created, ak.Status, ak.Akid)
	} else {
		_, err = dbConn.Exec(sqlstr, ak.Aiid, ak.PosStart, ak.PosEnd, ak.Dailybudget, ak.Chargingway, ak.Price, ak.Starttime, ak.Endtime, ak.Addby, ak.Updated, ak.Created, ak.Status, ak.Akid)
	}
	return err
}

// Save saves the AdKeyword to the database.
func (ak *AdKeyword) Save(ctx context.Context) error {
	if ak.Exists() {
		return ak.Update(ctx)
	}

	return ak.Insert(ctx)
}

// Delete deletes the AdKeyword from the database.
func (ak *AdKeyword) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ak._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdKeywordTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE akid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ak.Akid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ak.Akid)
	} else {
		_, err = dbConn.Exec(sqlstr, ak.Akid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ak._deleted = true

	return nil
}

// AdKeywordByAkid retrieves a row from 'aypcddg.ad_keyword' as a AdKeyword.
//
// Generated from index 'ad_keyword_akid_pkey'.
func AdKeywordByAkid(ctx context.Context, akid int, key ...interface{}) (*AdKeyword, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdKeywordTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`akid, aiid, pos_start, pos_end, dailybudget, chargingway, price, starttime, endtime, addby, updated, created, status ` +
		`FROM ` + tableName +
		` WHERE akid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, akid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ak := AdKeyword{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, akid).Scan(&ak.Akid, &ak.Aiid, &ak.PosStart, &ak.PosEnd, &ak.Dailybudget, &ak.Chargingway, &ak.Price, &ak.Starttime, &ak.Endtime, &ak.Addby, &ak.Updated, &ak.Created, &ak.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, akid).Scan(&ak.Akid, &ak.Aiid, &ak.PosStart, &ak.PosEnd, &ak.Dailybudget, &ak.Chargingway, &ak.Price, &ak.Starttime, &ak.Endtime, &ak.Addby, &ak.Updated, &ak.Created, &ak.Status)
		if err != nil {
			return nil, err
		}
	}

	return &ak, nil
}
