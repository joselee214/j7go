// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// MidAdminException represents a row from 'aypcddg.mid_admin_exceptions'.
type MidAdminException struct {
	ID        uint           `json:"id"`         // id
	Type      string         `json:"type"`       // type
	Code      string         `json:"code"`       // code
	Message   string         `json:"message"`    // message
	File      string         `json:"file"`       // file
	Line      int            `json:"line"`       // line
	Trace     string         `json:"trace"`      // trace
	Method    string         `json:"method"`     // method
	Path      string         `json:"path"`       // path
	Query     string         `json:"query"`      // query
	Body      string         `json:"body"`       // body
	Cookies   string         `json:"cookies"`    // cookies
	Headers   string         `json:"headers"`    // headers
	IP        string         `json:"ip"`         // ip
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MidAdminException exists in the database.
func (mae *MidAdminException) Exists() bool { //mid_admin_exceptions
	return mae._exists
}

// Deleted provides information if the MidAdminException has been deleted from the database.
func (mae *MidAdminException) Deleted() bool {
	return mae._deleted
}

// Get table name
func GetMidAdminExceptionTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "mid_admin_exceptions", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the MidAdminException to the database.
func (mae *MidAdminException) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if mae._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminExceptionTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`type, code, message, file, line, trace, method, path, query, body, cookies, headers, ip, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mae.Type, mae.Code, mae.Message, mae.File, mae.Line, mae.Trace, mae.Method, mae.Path, mae.Query, mae.Body, mae.Cookies, mae.Headers, mae.IP, mae.CreatedAt, mae.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, mae.Type, mae.Code, mae.Message, mae.File, mae.Line, mae.Trace, mae.Method, mae.Path, mae.Query, mae.Body, mae.Cookies, mae.Headers, mae.IP, mae.CreatedAt, mae.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, mae.Type, mae.Code, mae.Message, mae.File, mae.Line, mae.Trace, mae.Method, mae.Path, mae.Query, mae.Body, mae.Cookies, mae.Headers, mae.IP, mae.CreatedAt, mae.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mae.ID = uint(id)
	mae._exists = true

	return nil
}

// Update updates the MidAdminException in the database.
func (mae *MidAdminException) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mae._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminExceptionTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`type = ?, code = ?, message = ?, file = ?, line = ?, trace = ?, method = ?, path = ?, query = ?, body = ?, cookies = ?, headers = ?, ip = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mae.Type, mae.Code, mae.Message, mae.File, mae.Line, mae.Trace, mae.Method, mae.Path, mae.Query, mae.Body, mae.Cookies, mae.Headers, mae.IP, mae.CreatedAt, mae.UpdatedAt, mae.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mae.Type, mae.Code, mae.Message, mae.File, mae.Line, mae.Trace, mae.Method, mae.Path, mae.Query, mae.Body, mae.Cookies, mae.Headers, mae.IP, mae.CreatedAt, mae.UpdatedAt, mae.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mae.Type, mae.Code, mae.Message, mae.File, mae.Line, mae.Trace, mae.Method, mae.Path, mae.Query, mae.Body, mae.Cookies, mae.Headers, mae.IP, mae.CreatedAt, mae.UpdatedAt, mae.ID)
	}
	return err
}

// Save saves the MidAdminException to the database.
func (mae *MidAdminException) Save(ctx context.Context) error {
	if mae.Exists() {
		return mae.Update(ctx)
	}

	return mae.Insert(ctx)
}

// Delete deletes the MidAdminException from the database.
func (mae *MidAdminException) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mae._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminExceptionTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mae.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mae.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mae.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	mae._deleted = true

	return nil
}

// MidAdminExceptionByID retrieves a row from 'aypcddg.mid_admin_exceptions' as a MidAdminException.
//
// Generated from index 'mid_admin_exceptions_id_pkey'.
func MidAdminExceptionByID(ctx context.Context, id uint, key ...interface{}) (*MidAdminException, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidAdminExceptionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, type, code, message, file, line, trace, method, path, query, body, cookies, headers, ip, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mae := MidAdminException{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&mae.ID, &mae.Type, &mae.Code, &mae.Message, &mae.File, &mae.Line, &mae.Trace, &mae.Method, &mae.Path, &mae.Query, &mae.Body, &mae.Cookies, &mae.Headers, &mae.IP, &mae.CreatedAt, &mae.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&mae.ID, &mae.Type, &mae.Code, &mae.Message, &mae.File, &mae.Line, &mae.Trace, &mae.Method, &mae.Path, &mae.Query, &mae.Body, &mae.Cookies, &mae.Headers, &mae.IP, &mae.CreatedAt, &mae.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mae, nil
}
