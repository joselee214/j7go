// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsCommentHitLog represents a row from 'aypcddg.goods_comment_hit_log'.
type GoodsCommentHitLog struct {
	ID             int           `json:"id"`               // id
	UID            int           `json:"uid"`              // uid
	GoodsCommentID int           `json:"goods_comment_id"` // goods_comment_id
	ThreadID       int           `json:"thread_id"`        // thread_id
	ReplyID        int           `json:"reply_id"`         // reply_id
	Type           sql.NullInt64 `json:"type"`             // type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsCommentHitLog exists in the database.
func (gchl *GoodsCommentHitLog) Exists() bool { //goods_comment_hit_log
	return gchl._exists
}

// Deleted provides information if the GoodsCommentHitLog has been deleted from the database.
func (gchl *GoodsCommentHitLog) Deleted() bool {
	return gchl._deleted
}

// Get table name
func GetGoodsCommentHitLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_comment_hit_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsCommentHitLog to the database.
func (gchl *GoodsCommentHitLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gchl._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsCommentHitLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, goods_comment_id, thread_id, reply_id, type` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gchl.UID, gchl.GoodsCommentID, gchl.ThreadID, gchl.ReplyID, gchl.Type)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gchl.UID, gchl.GoodsCommentID, gchl.ThreadID, gchl.ReplyID, gchl.Type)
	} else {
		res, err = dbConn.Exec(sqlstr, gchl.UID, gchl.GoodsCommentID, gchl.ThreadID, gchl.ReplyID, gchl.Type)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gchl.ID = int(id)
	gchl._exists = true

	return nil
}

// Update updates the GoodsCommentHitLog in the database.
func (gchl *GoodsCommentHitLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gchl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsCommentHitLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, goods_comment_id = ?, thread_id = ?, reply_id = ?, type = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gchl.UID, gchl.GoodsCommentID, gchl.ThreadID, gchl.ReplyID, gchl.Type, gchl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gchl.UID, gchl.GoodsCommentID, gchl.ThreadID, gchl.ReplyID, gchl.Type, gchl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, gchl.UID, gchl.GoodsCommentID, gchl.ThreadID, gchl.ReplyID, gchl.Type, gchl.ID)
	}
	return err
}

// Save saves the GoodsCommentHitLog to the database.
func (gchl *GoodsCommentHitLog) Save(ctx context.Context) error {
	if gchl.Exists() {
		return gchl.Update(ctx)
	}

	return gchl.Insert(ctx)
}

// Delete deletes the GoodsCommentHitLog from the database.
func (gchl *GoodsCommentHitLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gchl._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsCommentHitLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gchl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gchl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, gchl.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	gchl._deleted = true

	return nil
}

// GoodsCommentHitLogByID retrieves a row from 'aypcddg.goods_comment_hit_log' as a GoodsCommentHitLog.
//
// Generated from index 'goods_comment_hit_log_id_pkey'.
func GoodsCommentHitLogByID(ctx context.Context, id int, key ...interface{}) (*GoodsCommentHitLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsCommentHitLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, goods_comment_id, thread_id, reply_id, type ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gchl := GoodsCommentHitLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&gchl.ID, &gchl.UID, &gchl.GoodsCommentID, &gchl.ThreadID, &gchl.ReplyID, &gchl.Type)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&gchl.ID, &gchl.UID, &gchl.GoodsCommentID, &gchl.ThreadID, &gchl.ReplyID, &gchl.Type)
		if err != nil {
			return nil, err
		}
	}

	return &gchl, nil
}
