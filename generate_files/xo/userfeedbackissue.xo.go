// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// UserFeedBackIssue represents a row from 'aypcddg.user_feed_back_issue'.
type UserFeedBackIssue struct {
	ID           uint64         `json:"id"`             // id
	Title        string         `json:"title"`          // title
	Description  string         `json:"description"`    // description
	Seq          int8           `json:"seq"`            // seq
	Status       int8           `json:"status"`         // status
	Platform     string         `json:"platform"`       // platform
	MidAdminName sql.NullString `json:"mid_admin_name"` // mid_admin_name
	MidAdminID   int            `json:"mid_admin_id"`   // mid_admin_id
	IsDelete     int8           `json:"is_delete"`      // is_delete
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserFeedBackIssue exists in the database.
func (ufbi *UserFeedBackIssue) Exists() bool { //user_feed_back_issue
	return ufbi._exists
}

// Deleted provides information if the UserFeedBackIssue has been deleted from the database.
func (ufbi *UserFeedBackIssue) Deleted() bool {
	return ufbi._deleted
}

// Get table name
func GetUserFeedBackIssueTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "user_feed_back_issue", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UserFeedBackIssue to the database.
func (ufbi *UserFeedBackIssue) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ufbi._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserFeedBackIssueTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, description, seq, status, platform, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ufbi.Title, ufbi.Description, ufbi.Seq, ufbi.Status, ufbi.Platform, ufbi.MidAdminName, ufbi.MidAdminID, ufbi.IsDelete, ufbi.CreatedAt, ufbi.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ufbi.Title, ufbi.Description, ufbi.Seq, ufbi.Status, ufbi.Platform, ufbi.MidAdminName, ufbi.MidAdminID, ufbi.IsDelete, ufbi.CreatedAt, ufbi.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, ufbi.Title, ufbi.Description, ufbi.Seq, ufbi.Status, ufbi.Platform, ufbi.MidAdminName, ufbi.MidAdminID, ufbi.IsDelete, ufbi.CreatedAt, ufbi.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ufbi.ID = uint64(id)
	ufbi._exists = true

	return nil
}

// Update updates the UserFeedBackIssue in the database.
func (ufbi *UserFeedBackIssue) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ufbi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserFeedBackIssueTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, description = ?, seq = ?, status = ?, platform = ?, mid_admin_name = ?, mid_admin_id = ?, is_delete = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ufbi.Title, ufbi.Description, ufbi.Seq, ufbi.Status, ufbi.Platform, ufbi.MidAdminName, ufbi.MidAdminID, ufbi.IsDelete, ufbi.CreatedAt, ufbi.UpdatedAt, ufbi.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ufbi.Title, ufbi.Description, ufbi.Seq, ufbi.Status, ufbi.Platform, ufbi.MidAdminName, ufbi.MidAdminID, ufbi.IsDelete, ufbi.CreatedAt, ufbi.UpdatedAt, ufbi.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ufbi.Title, ufbi.Description, ufbi.Seq, ufbi.Status, ufbi.Platform, ufbi.MidAdminName, ufbi.MidAdminID, ufbi.IsDelete, ufbi.CreatedAt, ufbi.UpdatedAt, ufbi.ID)
	}
	return err
}

// Save saves the UserFeedBackIssue to the database.
func (ufbi *UserFeedBackIssue) Save(ctx context.Context) error {
	if ufbi.Exists() {
		return ufbi.Update(ctx)
	}

	return ufbi.Insert(ctx)
}

// Delete deletes the UserFeedBackIssue from the database.
func (ufbi *UserFeedBackIssue) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ufbi._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserFeedBackIssueTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ufbi.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ufbi.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ufbi.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ufbi._deleted = true

	return nil
}

// UserFeedBackIssuesByPlatformStatus retrieves a row from 'aypcddg.user_feed_back_issue' as a UserFeedBackIssue.
//
// Generated from index 'idx_platform_status'.
func UserFeedBackIssuesByPlatformStatus(ctx context.Context, platform string, status int8, key ...interface{}) ([]*UserFeedBackIssue, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserFeedBackIssueTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, description, seq, status, platform, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE platform = ? AND status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, platform, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, platform, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, platform, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*UserFeedBackIssue, 0)
	for queryData.Next() {
		ufbi := UserFeedBackIssue{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&ufbi.ID, &ufbi.Title, &ufbi.Description, &ufbi.Seq, &ufbi.Status, &ufbi.Platform, &ufbi.MidAdminName, &ufbi.MidAdminID, &ufbi.IsDelete, &ufbi.CreatedAt, &ufbi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ufbi)
	}

	return res, nil
}

// UserFeedBackIssueByID retrieves a row from 'aypcddg.user_feed_back_issue' as a UserFeedBackIssue.
//
// Generated from index 'user_feed_back_issue_id_pkey'.
func UserFeedBackIssueByID(ctx context.Context, id uint64, key ...interface{}) (*UserFeedBackIssue, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserFeedBackIssueTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, description, seq, status, platform, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ufbi := UserFeedBackIssue{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ufbi.ID, &ufbi.Title, &ufbi.Description, &ufbi.Seq, &ufbi.Status, &ufbi.Platform, &ufbi.MidAdminName, &ufbi.MidAdminID, &ufbi.IsDelete, &ufbi.CreatedAt, &ufbi.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ufbi.ID, &ufbi.Title, &ufbi.Description, &ufbi.Seq, &ufbi.Status, &ufbi.Platform, &ufbi.MidAdminName, &ufbi.MidAdminID, &ufbi.IsDelete, &ufbi.CreatedAt, &ufbi.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &ufbi, nil
}
