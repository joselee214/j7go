// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// OrderLog represents a row from 'aypcddg.order_log'.
type OrderLog struct {
	Lid         uint           `json:"lid"`          // lid
	Oid         uint           `json:"oid"`          // oid
	OrderStatus sql.NullInt64  `json:"order_status"` // order_status
	Operator    sql.NullString `json:"operator"`     // operator
	OperatorUID sql.NullInt64  `json:"operator_uid"` // operator_uid
	Message     sql.NullString `json:"message"`      // message
	Note        sql.NullString `json:"note"`         // note
	Created     sql.NullInt64  `json:"created"`      // created

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrderLog exists in the database.
func (ol *OrderLog) Exists() bool { //order_log
	return ol._exists
}

// Deleted provides information if the OrderLog has been deleted from the database.
func (ol *OrderLog) Deleted() bool {
	return ol._deleted
}

// Get table name
func GetOrderLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "order_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrderLog to the database.
func (ol *OrderLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ol._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`oid, order_status, operator, operator_uid, message, note, created` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ol.Oid, ol.OrderStatus, ol.Operator, ol.OperatorUID, ol.Message, ol.Note, ol.Created)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ol.Oid, ol.OrderStatus, ol.Operator, ol.OperatorUID, ol.Message, ol.Note, ol.Created)
	} else {
		res, err = dbConn.Exec(sqlstr, ol.Oid, ol.OrderStatus, ol.Operator, ol.OperatorUID, ol.Message, ol.Note, ol.Created)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ol.Lid = uint(id)
	ol._exists = true

	return nil
}

// Update updates the OrderLog in the database.
func (ol *OrderLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ol._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`oid = ?, order_status = ?, operator = ?, operator_uid = ?, message = ?, note = ?, created = ?` +
		` WHERE lid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ol.Oid, ol.OrderStatus, ol.Operator, ol.OperatorUID, ol.Message, ol.Note, ol.Created, ol.Lid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ol.Oid, ol.OrderStatus, ol.Operator, ol.OperatorUID, ol.Message, ol.Note, ol.Created, ol.Lid)
	} else {
		_, err = dbConn.Exec(sqlstr, ol.Oid, ol.OrderStatus, ol.Operator, ol.OperatorUID, ol.Message, ol.Note, ol.Created, ol.Lid)
	}
	return err
}

// Save saves the OrderLog to the database.
func (ol *OrderLog) Save(ctx context.Context) error {
	if ol.Exists() {
		return ol.Update(ctx)
	}

	return ol.Insert(ctx)
}

// Delete deletes the OrderLog from the database.
func (ol *OrderLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ol._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE lid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ol.Lid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ol.Lid)
	} else {
		_, err = dbConn.Exec(sqlstr, ol.Lid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ol._deleted = true

	return nil
}

// OrderLogByLid retrieves a row from 'aypcddg.order_log' as a OrderLog.
//
// Generated from index 'order_log_lid_pkey'.
func OrderLogByLid(ctx context.Context, lid uint, key ...interface{}) (*OrderLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrderLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`lid, oid, order_status, operator, operator_uid, message, note, created ` +
		`FROM ` + tableName +
		` WHERE lid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, lid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ol := OrderLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, lid).Scan(&ol.Lid, &ol.Oid, &ol.OrderStatus, &ol.Operator, &ol.OperatorUID, &ol.Message, &ol.Note, &ol.Created)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, lid).Scan(&ol.Lid, &ol.Oid, &ol.OrderStatus, &ol.Operator, &ol.OperatorUID, &ol.Message, &ol.Note, &ol.Created)
		if err != nil {
			return nil, err
		}
	}

	return &ol, nil
}
