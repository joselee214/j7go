// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// CustomerAppraiseMember represents a row from 'aypcddg.customer_appraise_member'.
type CustomerAppraiseMember struct {
	ID       uint           `json:"id"`       // id
	Username sql.NullString `json:"username"` // username
	Keyword  sql.NullString `json:"keyword"`  // keyword
	Content  sql.NullString `json:"content"`  // content

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CustomerAppraiseMember exists in the database.
func (cam *CustomerAppraiseMember) Exists() bool { //customer_appraise_member
	return cam._exists
}

// Deleted provides information if the CustomerAppraiseMember has been deleted from the database.
func (cam *CustomerAppraiseMember) Deleted() bool {
	return cam._deleted
}

// Get table name
func GetCustomerAppraiseMemberTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "customer_appraise_member", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CustomerAppraiseMember to the database.
func (cam *CustomerAppraiseMember) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if cam._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCustomerAppraiseMemberTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`username, keyword, content` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cam.Username, cam.Keyword, cam.Content)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, cam.Username, cam.Keyword, cam.Content)
	} else {
		res, err = dbConn.Exec(sqlstr, cam.Username, cam.Keyword, cam.Content)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cam.ID = uint(id)
	cam._exists = true

	return nil
}

// Update updates the CustomerAppraiseMember in the database.
func (cam *CustomerAppraiseMember) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cam._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCustomerAppraiseMemberTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`username = ?, keyword = ?, content = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cam.Username, cam.Keyword, cam.Content, cam.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cam.Username, cam.Keyword, cam.Content, cam.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cam.Username, cam.Keyword, cam.Content, cam.ID)
	}
	return err
}

// Save saves the CustomerAppraiseMember to the database.
func (cam *CustomerAppraiseMember) Save(ctx context.Context) error {
	if cam.Exists() {
		return cam.Update(ctx)
	}

	return cam.Insert(ctx)
}

// Delete deletes the CustomerAppraiseMember from the database.
func (cam *CustomerAppraiseMember) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cam._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCustomerAppraiseMemberTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cam.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cam.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cam.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	cam._deleted = true

	return nil
}

// CustomerAppraiseMemberByID retrieves a row from 'aypcddg.customer_appraise_member' as a CustomerAppraiseMember.
//
// Generated from index 'customer_appraise_member_id_pkey'.
func CustomerAppraiseMemberByID(ctx context.Context, id uint, key ...interface{}) (*CustomerAppraiseMember, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCustomerAppraiseMemberTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, username, keyword, content ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	cam := CustomerAppraiseMember{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&cam.ID, &cam.Username, &cam.Keyword, &cam.Content)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&cam.ID, &cam.Username, &cam.Keyword, &cam.Content)
		if err != nil {
			return nil, err
		}
	}

	return &cam, nil
}
