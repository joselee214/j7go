// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// LogisticAction represents a row from 'aypcddg.logistic_action'.
type LogisticAction struct {
	Aid  uint           `json:"aid"`  // aid
	Desc sql.NullString `json:"desc"` // desc

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LogisticAction exists in the database.
func (la *LogisticAction) Exists() bool { //logistic_action
	return la._exists
}

// Deleted provides information if the LogisticAction has been deleted from the database.
func (la *LogisticAction) Deleted() bool {
	return la._deleted
}

// Get table name
func GetLogisticActionTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "logistic_action", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the LogisticAction to the database.
func (la *LogisticAction) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if la._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLogisticActionTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`desc` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, la.Desc)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, la.Desc)
	} else {
		res, err = dbConn.Exec(sqlstr, la.Desc)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	la.Aid = uint(id)
	la._exists = true

	return nil
}

// Update updates the LogisticAction in the database.
func (la *LogisticAction) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if la._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLogisticActionTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`desc = ?` +
		` WHERE aid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, la.Desc, la.Aid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, la.Desc, la.Aid)
	} else {
		_, err = dbConn.Exec(sqlstr, la.Desc, la.Aid)
	}
	return err
}

// Save saves the LogisticAction to the database.
func (la *LogisticAction) Save(ctx context.Context) error {
	if la.Exists() {
		return la.Update(ctx)
	}

	return la.Insert(ctx)
}

// Delete deletes the LogisticAction from the database.
func (la *LogisticAction) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if la._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetLogisticActionTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE aid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, la.Aid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, la.Aid)
	} else {
		_, err = dbConn.Exec(sqlstr, la.Aid)
	}

	if err != nil {
		return err
	}

	// set deleted
	la._deleted = true

	return nil
}

// LogisticActionByAid retrieves a row from 'aypcddg.logistic_action' as a LogisticAction.
//
// Generated from index 'logistic_action_aid_pkey'.
func LogisticActionByAid(ctx context.Context, aid uint, key ...interface{}) (*LogisticAction, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetLogisticActionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`aid, desc ` +
		`FROM ` + tableName +
		` WHERE aid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	la := LogisticAction{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, aid).Scan(&la.Aid, &la.Desc)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, aid).Scan(&la.Aid, &la.Desc)
		if err != nil {
			return nil, err
		}
	}

	return &la, nil
}
