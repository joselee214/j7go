// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryGroup represents a row from 'aypcddg.factory_group'.
type FactoryGroup struct {
	Fgid    uint           `json:"fgid"`    // fgid
	Fid     uint           `json:"fid"`     // fid
	Fbid    uint           `json:"fbid"`    // fbid
	Title   sql.NullString `json:"title"`   // title
	Pic     sql.NullString `json:"pic"`     // pic
	Created uint           `json:"created"` // created

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryGroup exists in the database.
func (fg *FactoryGroup) Exists() bool { //factory_group
	return fg._exists
}

// Deleted provides information if the FactoryGroup has been deleted from the database.
func (fg *FactoryGroup) Deleted() bool {
	return fg._deleted
}

// Get table name
func GetFactoryGroupTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_group", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryGroup to the database.
func (fg *FactoryGroup) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fg._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryGroupTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, fbid, title, pic, created` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fg.Fid, fg.Fbid, fg.Title, fg.Pic, fg.Created)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fg.Fid, fg.Fbid, fg.Title, fg.Pic, fg.Created)
	} else {
		res, err = dbConn.Exec(sqlstr, fg.Fid, fg.Fbid, fg.Title, fg.Pic, fg.Created)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fg.Fgid = uint(id)
	fg._exists = true

	return nil
}

// Update updates the FactoryGroup in the database.
func (fg *FactoryGroup) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryGroupTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, fbid = ?, title = ?, pic = ?, created = ?` +
		` WHERE fgid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fg.Fid, fg.Fbid, fg.Title, fg.Pic, fg.Created, fg.Fgid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fg.Fid, fg.Fbid, fg.Title, fg.Pic, fg.Created, fg.Fgid)
	} else {
		_, err = dbConn.Exec(sqlstr, fg.Fid, fg.Fbid, fg.Title, fg.Pic, fg.Created, fg.Fgid)
	}
	return err
}

// Save saves the FactoryGroup to the database.
func (fg *FactoryGroup) Save(ctx context.Context) error {
	if fg.Exists() {
		return fg.Update(ctx)
	}

	return fg.Insert(ctx)
}

// Delete deletes the FactoryGroup from the database.
func (fg *FactoryGroup) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fg._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryGroupTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE fgid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fg.Fgid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fg.Fgid)
	} else {
		_, err = dbConn.Exec(sqlstr, fg.Fgid)
	}

	if err != nil {
		return err
	}

	// set deleted
	fg._deleted = true

	return nil
}

// FactoryGroupByFgid retrieves a row from 'aypcddg.factory_group' as a FactoryGroup.
//
// Generated from index 'factory_group_fgid_pkey'.
func FactoryGroupByFgid(ctx context.Context, fgid uint, key ...interface{}) (*FactoryGroup, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryGroupTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fgid, fid, fbid, title, pic, created ` +
		`FROM ` + tableName +
		` WHERE fgid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fgid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fg := FactoryGroup{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fgid).Scan(&fg.Fgid, &fg.Fid, &fg.Fbid, &fg.Title, &fg.Pic, &fg.Created)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fgid).Scan(&fg.Fgid, &fg.Fid, &fg.Fbid, &fg.Title, &fg.Pic, &fg.Created)
		if err != nil {
			return nil, err
		}
	}

	return &fg, nil
}

// FactoryGroupsByFid retrieves a row from 'aypcddg.factory_group' as a FactoryGroup.
//
// Generated from index 'fid'.
func FactoryGroupsByFid(ctx context.Context, fid uint, key ...interface{}) ([]*FactoryGroup, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryGroupTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fgid, fid, fbid, title, pic, created ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryGroup, 0)
	for queryData.Next() {
		fg := FactoryGroup{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fg.Fgid, &fg.Fid, &fg.Fbid, &fg.Title, &fg.Pic, &fg.Created)
		if err != nil {
			return nil, err
		}

		res = append(res, &fg)
	}

	return res, nil
}
