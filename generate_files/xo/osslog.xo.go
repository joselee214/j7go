// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// OssLog represents a row from 'aypcddg.oss_log'.
type OssLog struct {
	ID           int64          `json:"id"`           // id
	Phpc         int8           `json:"phpc"`         // phpc
	Format       sql.NullString `json:"format"`       // format
	OssPath      sql.NullString `json:"oss_path"`     // oss_path
	Pid          sql.NullInt64  `json:"pid"`          // pid
	Type         sql.NullString `json:"type"`         // type
	AddTime      int            `json:"add_time"`     // add_time
	Localfserver string         `json:"localfserver"` // localfserver
	Localpath    string         `json:"localpath"`    // localpath
	Uploaded     int            `json:"uploaded"`     // uploaded
	Isdeleted    int8           `json:"isdeleted"`    // isdeleted
	FSha         string         `json:"f_sha"`        // f_sha
	UCount       int            `json:"u_count"`      // u_count
	Width        int            `json:"width"`        // width
	Height       int            `json:"height"`       // height
	Size         int            `json:"size"`         // size
	Mime         string         `json:"mime"`         // mime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OssLog exists in the database.
func (ol *OssLog) Exists() bool { //oss_log
	return ol._exists
}

// Deleted provides information if the OssLog has been deleted from the database.
func (ol *OssLog) Deleted() bool {
	return ol._deleted
}

// Get table name
func GetOssLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "oss_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OssLog to the database.
func (ol *OssLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ol._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOssLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`phpc, format, oss_path, pid, type, add_time, localfserver, localpath, uploaded, isdeleted, f_sha, u_count, width, height, size, mime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ol.Phpc, ol.Format, ol.OssPath, ol.Pid, ol.Type, ol.AddTime, ol.Localfserver, ol.Localpath, ol.Uploaded, ol.Isdeleted, ol.FSha, ol.UCount, ol.Width, ol.Height, ol.Size, ol.Mime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ol.Phpc, ol.Format, ol.OssPath, ol.Pid, ol.Type, ol.AddTime, ol.Localfserver, ol.Localpath, ol.Uploaded, ol.Isdeleted, ol.FSha, ol.UCount, ol.Width, ol.Height, ol.Size, ol.Mime)
	} else {
		res, err = dbConn.Exec(sqlstr, ol.Phpc, ol.Format, ol.OssPath, ol.Pid, ol.Type, ol.AddTime, ol.Localfserver, ol.Localpath, ol.Uploaded, ol.Isdeleted, ol.FSha, ol.UCount, ol.Width, ol.Height, ol.Size, ol.Mime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ol.ID = int64(id)
	ol._exists = true

	return nil
}

// Update updates the OssLog in the database.
func (ol *OssLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ol._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOssLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`phpc = ?, format = ?, oss_path = ?, pid = ?, type = ?, add_time = ?, localfserver = ?, localpath = ?, uploaded = ?, isdeleted = ?, f_sha = ?, u_count = ?, width = ?, height = ?, size = ?, mime = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ol.Phpc, ol.Format, ol.OssPath, ol.Pid, ol.Type, ol.AddTime, ol.Localfserver, ol.Localpath, ol.Uploaded, ol.Isdeleted, ol.FSha, ol.UCount, ol.Width, ol.Height, ol.Size, ol.Mime, ol.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ol.Phpc, ol.Format, ol.OssPath, ol.Pid, ol.Type, ol.AddTime, ol.Localfserver, ol.Localpath, ol.Uploaded, ol.Isdeleted, ol.FSha, ol.UCount, ol.Width, ol.Height, ol.Size, ol.Mime, ol.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ol.Phpc, ol.Format, ol.OssPath, ol.Pid, ol.Type, ol.AddTime, ol.Localfserver, ol.Localpath, ol.Uploaded, ol.Isdeleted, ol.FSha, ol.UCount, ol.Width, ol.Height, ol.Size, ol.Mime, ol.ID)
	}
	return err
}

// Save saves the OssLog to the database.
func (ol *OssLog) Save(ctx context.Context) error {
	if ol.Exists() {
		return ol.Update(ctx)
	}

	return ol.Insert(ctx)
}

// Delete deletes the OssLog from the database.
func (ol *OssLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ol._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOssLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ol.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ol.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ol.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ol._deleted = true

	return nil
}

// OssLogsByFShaIsdeleted retrieves a row from 'aypcddg.oss_log' as a OssLog.
//
// Generated from index 'deleted_fsha'.
func OssLogsByFShaIsdeleted(ctx context.Context, fSha string, isdeleted int8, key ...interface{}) ([]*OssLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOssLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, phpc, format, oss_path, pid, type, add_time, localfserver, localpath, uploaded, isdeleted, f_sha, u_count, width, height, size, mime ` +
		`FROM ` + tableName +
		` WHERE f_sha = ? AND isdeleted = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fSha, isdeleted)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fSha, isdeleted)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fSha, isdeleted)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*OssLog, 0)
	for queryData.Next() {
		ol := OssLog{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&ol.ID, &ol.Phpc, &ol.Format, &ol.OssPath, &ol.Pid, &ol.Type, &ol.AddTime, &ol.Localfserver, &ol.Localpath, &ol.Uploaded, &ol.Isdeleted, &ol.FSha, &ol.UCount, &ol.Width, &ol.Height, &ol.Size, &ol.Mime)
		if err != nil {
			return nil, err
		}

		res = append(res, &ol)
	}

	return res, nil
}

// OssLogByID retrieves a row from 'aypcddg.oss_log' as a OssLog.
//
// Generated from index 'oss_log_id_pkey'.
func OssLogByID(ctx context.Context, id int64, key ...interface{}) (*OssLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOssLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, phpc, format, oss_path, pid, type, add_time, localfserver, localpath, uploaded, isdeleted, f_sha, u_count, width, height, size, mime ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ol := OssLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ol.ID, &ol.Phpc, &ol.Format, &ol.OssPath, &ol.Pid, &ol.Type, &ol.AddTime, &ol.Localfserver, &ol.Localpath, &ol.Uploaded, &ol.Isdeleted, &ol.FSha, &ol.UCount, &ol.Width, &ol.Height, &ol.Size, &ol.Mime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ol.ID, &ol.Phpc, &ol.Format, &ol.OssPath, &ol.Pid, &ol.Type, &ol.AddTime, &ol.Localfserver, &ol.Localpath, &ol.Uploaded, &ol.Isdeleted, &ol.FSha, &ol.UCount, &ol.Width, &ol.Height, &ol.Size, &ol.Mime)
		if err != nil {
			return nil, err
		}
	}

	return &ol, nil
}
