// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// UserInvoice represents a row from 'aypcddg.user_invoice'.
type UserInvoice struct {
	Invoiceid int            `json:"invoiceid"`  // invoiceid
	UID       int            `json:"uid"`        // uid
	Type      int8           `json:"type"`       // type
	TitleType int8           `json:"title_type"` // title_type
	Title     sql.NullString `json:"title"`      // title
	Content   sql.NullString `json:"content"`    // content
	IsDefault int8           `json:"is_default"` // is_default

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserInvoice exists in the database.
func (ui *UserInvoice) Exists() bool { //user_invoice
	return ui._exists
}

// Deleted provides information if the UserInvoice has been deleted from the database.
func (ui *UserInvoice) Deleted() bool {
	return ui._deleted
}

// Get table name
func GetUserInvoiceTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "user_invoice", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UserInvoice to the database.
func (ui *UserInvoice) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ui._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserInvoiceTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, type, title_type, title, content, is_default` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ui.UID, ui.Type, ui.TitleType, ui.Title, ui.Content, ui.IsDefault)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ui.UID, ui.Type, ui.TitleType, ui.Title, ui.Content, ui.IsDefault)
	} else {
		res, err = dbConn.Exec(sqlstr, ui.UID, ui.Type, ui.TitleType, ui.Title, ui.Content, ui.IsDefault)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ui.Invoiceid = int(id)
	ui._exists = true

	return nil
}

// Update updates the UserInvoice in the database.
func (ui *UserInvoice) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ui._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserInvoiceTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, type = ?, title_type = ?, title = ?, content = ?, is_default = ?` +
		` WHERE invoiceid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ui.UID, ui.Type, ui.TitleType, ui.Title, ui.Content, ui.IsDefault, ui.Invoiceid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ui.UID, ui.Type, ui.TitleType, ui.Title, ui.Content, ui.IsDefault, ui.Invoiceid)
	} else {
		_, err = dbConn.Exec(sqlstr, ui.UID, ui.Type, ui.TitleType, ui.Title, ui.Content, ui.IsDefault, ui.Invoiceid)
	}
	return err
}

// Save saves the UserInvoice to the database.
func (ui *UserInvoice) Save(ctx context.Context) error {
	if ui.Exists() {
		return ui.Update(ctx)
	}

	return ui.Insert(ctx)
}

// Delete deletes the UserInvoice from the database.
func (ui *UserInvoice) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ui._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserInvoiceTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE invoiceid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ui.Invoiceid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ui.Invoiceid)
	} else {
		_, err = dbConn.Exec(sqlstr, ui.Invoiceid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ui._deleted = true

	return nil
}

// UserInvoicesByUID retrieves a row from 'aypcddg.user_invoice' as a UserInvoice.
//
// Generated from index 'uid'.
func UserInvoicesByUID(ctx context.Context, uid int, key ...interface{}) ([]*UserInvoice, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserInvoiceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`invoiceid, uid, type, title_type, title, content, is_default ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*UserInvoice, 0)
	for queryData.Next() {
		ui := UserInvoice{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&ui.Invoiceid, &ui.UID, &ui.Type, &ui.TitleType, &ui.Title, &ui.Content, &ui.IsDefault)
		if err != nil {
			return nil, err
		}

		res = append(res, &ui)
	}

	return res, nil
}

// UserInvoiceByInvoiceid retrieves a row from 'aypcddg.user_invoice' as a UserInvoice.
//
// Generated from index 'user_invoice_invoiceid_pkey'.
func UserInvoiceByInvoiceid(ctx context.Context, invoiceid int, key ...interface{}) (*UserInvoice, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserInvoiceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`invoiceid, uid, type, title_type, title, content, is_default ` +
		`FROM ` + tableName +
		` WHERE invoiceid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, invoiceid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ui := UserInvoice{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, invoiceid).Scan(&ui.Invoiceid, &ui.UID, &ui.Type, &ui.TitleType, &ui.Title, &ui.Content, &ui.IsDefault)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, invoiceid).Scan(&ui.Invoiceid, &ui.UID, &ui.Type, &ui.TitleType, &ui.Title, &ui.Content, &ui.IsDefault)
		if err != nil {
			return nil, err
		}
	}

	return &ui, nil
}
