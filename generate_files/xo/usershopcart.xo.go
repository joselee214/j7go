// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// UserShopcart represents a row from 'aypcddg.user_shopcart'.
type UserShopcart struct {
	UID        uint64         `json:"uid"`        // uid
	Cart       sql.NullString `json:"cart"`       // cart
	Updatetime sql.NullInt64  `json:"updatetime"` // updatetime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserShopcart exists in the database.
func (us *UserShopcart) Exists() bool { //user_shopcart
	return us._exists
}

// Deleted provides information if the UserShopcart has been deleted from the database.
func (us *UserShopcart) Deleted() bool {
	return us._deleted
}

// Get table name
func GetUserShopcartTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "user_shopcart", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UserShopcart to the database.
func (us *UserShopcart) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if us._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserShopcartTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, cart, updatetime` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, us.UID, us.Cart, us.Updatetime)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, us.UID, us.Cart, us.Updatetime)
	} else {
		res, err = dbConn.Exec(sqlstr, us.UID, us.Cart, us.Updatetime)
	}

	if err != nil {
		return err
	}

	// set existence
	us._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	us.UID = uint64(id)
	us._exists = true

	return nil
}

// Update updates the UserShopcart in the database.
func (us *UserShopcart) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if us._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserShopcartTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`cart = ?, updatetime = ?` +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, us.Cart, us.Updatetime, us.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, us.Cart, us.Updatetime, us.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, us.Cart, us.Updatetime, us.UID)
	}
	return err
}

// Save saves the UserShopcart to the database.
func (us *UserShopcart) Save(ctx context.Context) error {
	if us.Exists() {
		return us.Update(ctx)
	}

	return us.Insert(ctx)
}

// Delete deletes the UserShopcart from the database.
func (us *UserShopcart) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if us._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserShopcartTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, us.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, us.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, us.UID)
	}

	if err != nil {
		return err
	}

	// set deleted
	us._deleted = true

	return nil
}

// UserShopcartByUID retrieves a row from 'aypcddg.user_shopcart' as a UserShopcart.
//
// Generated from index 'user_shopcart_uid_pkey'.
func UserShopcartByUID(ctx context.Context, uid uint64, key ...interface{}) (*UserShopcart, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserShopcartTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, cart, updatetime ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	us := UserShopcart{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid).Scan(&us.UID, &us.Cart, &us.Updatetime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid).Scan(&us.UID, &us.Cart, &us.Updatetime)
		if err != nil {
			return nil, err
		}
	}

	return &us, nil
}
