// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// CmsType represents a row from 'aypcddg.cms_type'.
type CmsType struct {
	ID    int            `json:"id"`    // id
	Pid   sql.NullInt64  `json:"pid"`   // pid
	Title sql.NullString `json:"title"` // title
	Alias string         `json:"alias"` // alias

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CmsType exists in the database.
func (ct *CmsType) Exists() bool { //cms_type
	return ct._exists
}

// Deleted provides information if the CmsType has been deleted from the database.
func (ct *CmsType) Deleted() bool {
	return ct._deleted
}

// Get table name
func GetCmsTypeTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "cms_type", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CmsType to the database.
func (ct *CmsType) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ct._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCmsTypeTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, pid, title` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ct.ID, ct.Pid, ct.Title)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ct.ID, ct.Pid, ct.Title)
	} else {
		res, err = dbConn.Exec(sqlstr, ct.ID, ct.Pid, ct.Title)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ct.Alias = string(id)
	ct._exists = true

	return nil
}

// Update updates the CmsType in the database.
func (ct *CmsType) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ct._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCmsTypeTableName(key...)
	if err != nil {
		return err
	}

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`pid = ?, title = ?` +
		` WHERE id = ? AND alias = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ct.Pid, ct.Title, ct.ID, ct.Alias)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ct.Pid, ct.Title, ct.ID, ct.Alias)
	} else {
		_, err = dbConn.Exec(sqlstr, ct.Pid, ct.Title, ct.ID, ct.Alias)
	}
	return err
}

// Save saves the CmsType to the database.
func (ct *CmsType) Save(ctx context.Context) error {
	if ct.Exists() {
		return ct.Update(ctx)
	}

	return ct.Insert(ctx)
}

// Delete deletes the CmsType from the database.
func (ct *CmsType) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ct._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCmsTypeTableName(key...)
	if err != nil {
		return err
	}
	//2

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE alias = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ct.Alias)))

	if tx != nil {
		_, err = tx.Exec(sqlstr, ct.Alias)
	} else {
		_, err = dbConn.Exec(sqlstr, ct.Alias)
	}
	if err != nil {
		return err
	}

	// set deleted
	ct._deleted = true

	return nil
}

// CmsTypeByAlias retrieves a row from 'aypcddg.cms_type' as a CmsType.
//
// Generated from index 'cms_type_alias_pkey'.
func CmsTypeByAlias(ctx context.Context, alias string, key ...interface{}) (*CmsType, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCmsTypeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, pid, title, alias ` +
		`FROM ` + tableName +
		` WHERE alias = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, alias)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ct := CmsType{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, alias).Scan(&ct.ID, &ct.Pid, &ct.Title, &ct.Alias)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, alias).Scan(&ct.ID, &ct.Pid, &ct.Title, &ct.Alias)
		if err != nil {
			return nil, err
		}
	}

	return &ct, nil
}
