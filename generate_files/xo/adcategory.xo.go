// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// AdCategory represents a row from 'aypcddg.ad_category'.
type AdCategory struct {
	Acid    int            `json:"acid"`    // acid
	Title   sql.NullString `json:"title"`   // title
	URL     sql.NullString `json:"url"`     // url
	Addby   int            `json:"addby"`   // addby
	Updated int            `json:"updated"` // updated
	Created int            `json:"created"` // created
	Status  bool           `json:"status"`  // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AdCategory exists in the database.
func (ac *AdCategory) Exists() bool { //ad_category
	return ac._exists
}

// Deleted provides information if the AdCategory has been deleted from the database.
func (ac *AdCategory) Deleted() bool {
	return ac._deleted
}

// Get table name
func GetAdCategoryTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "ad_category", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AdCategory to the database.
func (ac *AdCategory) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ac._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdCategoryTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, url, addby, updated, created, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ac.Title, ac.URL, ac.Addby, ac.Updated, ac.Created, ac.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ac.Title, ac.URL, ac.Addby, ac.Updated, ac.Created, ac.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, ac.Title, ac.URL, ac.Addby, ac.Updated, ac.Created, ac.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ac.Acid = int(id)
	ac._exists = true

	return nil
}

// Update updates the AdCategory in the database.
func (ac *AdCategory) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ac._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdCategoryTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, url = ?, addby = ?, updated = ?, created = ?, status = ?` +
		` WHERE acid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ac.Title, ac.URL, ac.Addby, ac.Updated, ac.Created, ac.Status, ac.Acid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ac.Title, ac.URL, ac.Addby, ac.Updated, ac.Created, ac.Status, ac.Acid)
	} else {
		_, err = dbConn.Exec(sqlstr, ac.Title, ac.URL, ac.Addby, ac.Updated, ac.Created, ac.Status, ac.Acid)
	}
	return err
}

// Save saves the AdCategory to the database.
func (ac *AdCategory) Save(ctx context.Context) error {
	if ac.Exists() {
		return ac.Update(ctx)
	}

	return ac.Insert(ctx)
}

// Delete deletes the AdCategory from the database.
func (ac *AdCategory) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ac._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdCategoryTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE acid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ac.Acid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ac.Acid)
	} else {
		_, err = dbConn.Exec(sqlstr, ac.Acid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ac._deleted = true

	return nil
}

// AdCategoryByAcid retrieves a row from 'aypcddg.ad_category' as a AdCategory.
//
// Generated from index 'ad_category_acid_pkey'.
func AdCategoryByAcid(ctx context.Context, acid int, key ...interface{}) (*AdCategory, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdCategoryTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`acid, title, url, addby, updated, created, status ` +
		`FROM ` + tableName +
		` WHERE acid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, acid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ac := AdCategory{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, acid).Scan(&ac.Acid, &ac.Title, &ac.URL, &ac.Addby, &ac.Updated, &ac.Created, &ac.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, acid).Scan(&ac.Acid, &ac.Title, &ac.URL, &ac.Addby, &ac.Updated, &ac.Created, &ac.Status)
		if err != nil {
			return nil, err
		}
	}

	return &ac, nil
}
