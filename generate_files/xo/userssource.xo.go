// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// UsersSource represents a row from 'aypcddg.users_source'.
type UsersSource struct {
	UID     int            `json:"uid"`     // uid
	Did     int            `json:"did"`     // did
	Fid     int            `json:"fid"`     // fid
	Sid     int            `json:"sid"`     // sid
	Suid    int            `json:"suid"`    // suid
	Created mysql.NullTime `json:"created"` // created

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UsersSource exists in the database.
func (us *UsersSource) Exists() bool { //users_source
	return us._exists
}

// Deleted provides information if the UsersSource has been deleted from the database.
func (us *UsersSource) Deleted() bool {
	return us._deleted
}

// Get table name
func GetUsersSourceTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "users_source", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UsersSource to the database.
func (us *UsersSource) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if us._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersSourceTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, did, fid, sid, suid, created` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, us.UID, us.Did, us.Fid, us.Sid, us.Suid, us.Created)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, us.UID, us.Did, us.Fid, us.Sid, us.Suid, us.Created)
	} else {
		res, err = dbConn.Exec(sqlstr, us.UID, us.Did, us.Fid, us.Sid, us.Suid, us.Created)
	}

	if err != nil {
		return err
	}

	// set existence
	us._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	us.UID = int(id)
	us._exists = true

	return nil
}

// Update updates the UsersSource in the database.
func (us *UsersSource) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if us._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersSourceTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`did = ?, fid = ?, sid = ?, suid = ?, created = ?` +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, us.Did, us.Fid, us.Sid, us.Suid, us.Created, us.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, us.Did, us.Fid, us.Sid, us.Suid, us.Created, us.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, us.Did, us.Fid, us.Sid, us.Suid, us.Created, us.UID)
	}
	return err
}

// Save saves the UsersSource to the database.
func (us *UsersSource) Save(ctx context.Context) error {
	if us.Exists() {
		return us.Update(ctx)
	}

	return us.Insert(ctx)
}

// Delete deletes the UsersSource from the database.
func (us *UsersSource) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if us._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersSourceTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, us.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, us.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, us.UID)
	}

	if err != nil {
		return err
	}

	// set deleted
	us._deleted = true

	return nil
}

// UsersSourceByUID retrieves a row from 'aypcddg.users_source' as a UsersSource.
//
// Generated from index 'users_source_uid_pkey'.
func UsersSourceByUID(ctx context.Context, uid int, key ...interface{}) (*UsersSource, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUsersSourceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, did, fid, sid, suid, created ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	us := UsersSource{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid).Scan(&us.UID, &us.Did, &us.Fid, &us.Sid, &us.Suid, &us.Created)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid).Scan(&us.UID, &us.Did, &us.Fid, &us.Sid, &us.Suid, &us.Created)
		if err != nil {
			return nil, err
		}
	}

	return &us, nil
}
