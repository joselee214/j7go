// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// HelpDoc represents a row from 'aypcddg.help_docs'.
type HelpDoc struct {
	ID           uint64         `json:"id"`             // id
	Cid          int            `json:"cid"`            // cid
	Title        string         `json:"title"`          // title
	Content      string         `json:"content"`        // content
	Seq          int8           `json:"seq"`            // seq
	Status       int8           `json:"status"`         // status
	MidAdminName sql.NullString `json:"mid_admin_name"` // mid_admin_name
	MidAdminID   int            `json:"mid_admin_id"`   // mid_admin_id
	IsDelete     int8           `json:"is_delete"`      // is_delete
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HelpDoc exists in the database.
func (hd *HelpDoc) Exists() bool { //help_docs
	return hd._exists
}

// Deleted provides information if the HelpDoc has been deleted from the database.
func (hd *HelpDoc) Deleted() bool {
	return hd._deleted
}

// Get table name
func GetHelpDocTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "help_docs", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the HelpDoc to the database.
func (hd *HelpDoc) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if hd._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpDocTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`cid, title, content, seq, status, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hd.Cid, hd.Title, hd.Content, hd.Seq, hd.Status, hd.MidAdminName, hd.MidAdminID, hd.IsDelete, hd.CreatedAt, hd.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, hd.Cid, hd.Title, hd.Content, hd.Seq, hd.Status, hd.MidAdminName, hd.MidAdminID, hd.IsDelete, hd.CreatedAt, hd.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, hd.Cid, hd.Title, hd.Content, hd.Seq, hd.Status, hd.MidAdminName, hd.MidAdminID, hd.IsDelete, hd.CreatedAt, hd.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	hd.ID = uint64(id)
	hd._exists = true

	return nil
}

// Update updates the HelpDoc in the database.
func (hd *HelpDoc) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if hd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpDocTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`cid = ?, title = ?, content = ?, seq = ?, status = ?, mid_admin_name = ?, mid_admin_id = ?, is_delete = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hd.Cid, hd.Title, hd.Content, hd.Seq, hd.Status, hd.MidAdminName, hd.MidAdminID, hd.IsDelete, hd.CreatedAt, hd.UpdatedAt, hd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, hd.Cid, hd.Title, hd.Content, hd.Seq, hd.Status, hd.MidAdminName, hd.MidAdminID, hd.IsDelete, hd.CreatedAt, hd.UpdatedAt, hd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, hd.Cid, hd.Title, hd.Content, hd.Seq, hd.Status, hd.MidAdminName, hd.MidAdminID, hd.IsDelete, hd.CreatedAt, hd.UpdatedAt, hd.ID)
	}
	return err
}

// Save saves the HelpDoc to the database.
func (hd *HelpDoc) Save(ctx context.Context) error {
	if hd.Exists() {
		return hd.Update(ctx)
	}

	return hd.Insert(ctx)
}

// Delete deletes the HelpDoc from the database.
func (hd *HelpDoc) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if hd._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpDocTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, hd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, hd.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	hd._deleted = true

	return nil
}

// HelpDocByID retrieves a row from 'aypcddg.help_docs' as a HelpDoc.
//
// Generated from index 'help_docs_id_pkey'.
func HelpDocByID(ctx context.Context, id uint64, key ...interface{}) (*HelpDoc, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetHelpDocTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, cid, title, content, seq, status, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	hd := HelpDoc{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&hd.ID, &hd.Cid, &hd.Title, &hd.Content, &hd.Seq, &hd.Status, &hd.MidAdminName, &hd.MidAdminID, &hd.IsDelete, &hd.CreatedAt, &hd.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&hd.ID, &hd.Cid, &hd.Title, &hd.Content, &hd.Seq, &hd.Status, &hd.MidAdminName, &hd.MidAdminID, &hd.IsDelete, &hd.CreatedAt, &hd.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &hd, nil
}

// HelpDocsByCidStatusIsDelete retrieves a row from 'aypcddg.help_docs' as a HelpDoc.
//
// Generated from index 'idx_cid_status_is_delete'.
func HelpDocsByCidStatusIsDelete(ctx context.Context, cid int, status int8, isDelete int8, key ...interface{}) ([]*HelpDoc, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetHelpDocTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, cid, title, content, seq, status, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE cid = ? AND status = ? AND is_delete = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cid, status, isDelete)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, cid, status, isDelete)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, cid, status, isDelete)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*HelpDoc, 0)
	for queryData.Next() {
		hd := HelpDoc{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&hd.ID, &hd.Cid, &hd.Title, &hd.Content, &hd.Seq, &hd.Status, &hd.MidAdminName, &hd.MidAdminID, &hd.IsDelete, &hd.CreatedAt, &hd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &hd)
	}

	return res, nil
}
