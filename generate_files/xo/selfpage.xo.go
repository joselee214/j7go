// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// SelfPage represents a row from 'aypcddg.self_pages'.
type SelfPage struct {
	ID        int            `json:"id"`         // id
	LayoutID  uint           `json:"layout_id"`  // layout_id
	Name      sql.NullString `json:"name"`       // name
	HTML      sql.NullString `json:"html"`       // html
	UseLayout sql.NullInt64  `json:"use_layout"` // use_layout
	Fid       sql.NullInt64  `json:"fid"`        // fid
	Fsid      sql.NullInt64  `json:"fsid"`       // fsid
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	URL       sql.NullString `json:"url"`        // url

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SelfPage exists in the database.
func (sp *SelfPage) Exists() bool { //self_pages
	return sp._exists
}

// Deleted provides information if the SelfPage has been deleted from the database.
func (sp *SelfPage) Deleted() bool {
	return sp._deleted
}

// Get table name
func GetSelfPageTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "self_pages", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SelfPage to the database.
func (sp *SelfPage) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfPageTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, name, html, use_layout, fid, fsid, created_at, url` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sp.ID, sp.Name, sp.HTML, sp.UseLayout, sp.Fid, sp.Fsid, sp.CreatedAt, sp.URL)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sp.ID, sp.Name, sp.HTML, sp.UseLayout, sp.Fid, sp.Fsid, sp.CreatedAt, sp.URL)
	} else {
		res, err = dbConn.Exec(sqlstr, sp.ID, sp.Name, sp.HTML, sp.UseLayout, sp.Fid, sp.Fsid, sp.CreatedAt, sp.URL)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sp.LayoutID = uint(id)
	sp._exists = true

	return nil
}

// Update updates the SelfPage in the database.
func (sp *SelfPage) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfPageTableName(key...)
	if err != nil {
		return err
	}

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`name = ?, html = ?, use_layout = ?, fid = ?, fsid = ?, created_at = ?, url = ?` +
		` WHERE id = ? AND layout_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sp.Name, sp.HTML, sp.UseLayout, sp.Fid, sp.Fsid, sp.CreatedAt, sp.URL, sp.ID, sp.LayoutID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sp.Name, sp.HTML, sp.UseLayout, sp.Fid, sp.Fsid, sp.CreatedAt, sp.URL, sp.ID, sp.LayoutID)
	} else {
		_, err = dbConn.Exec(sqlstr, sp.Name, sp.HTML, sp.UseLayout, sp.Fid, sp.Fsid, sp.CreatedAt, sp.URL, sp.ID, sp.LayoutID)
	}
	return err
}

// Save saves the SelfPage to the database.
func (sp *SelfPage) Save(ctx context.Context) error {
	if sp.Exists() {
		return sp.Update(ctx)
	}

	return sp.Insert(ctx)
}

// Delete deletes the SelfPage from the database.
func (sp *SelfPage) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfPageTableName(key...)
	if err != nil {
		return err
	}
	//2

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE layout_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sp.LayoutID)))

	if tx != nil {
		_, err = tx.Exec(sqlstr, sp.LayoutID)
	} else {
		_, err = dbConn.Exec(sqlstr, sp.LayoutID)
	}
	if err != nil {
		return err
	}

	// set deleted
	sp._deleted = true

	return nil
}

// SelfPageByLayoutID retrieves a row from 'aypcddg.self_pages' as a SelfPage.
//
// Generated from index 'self_pages_layout_id_pkey'.
func SelfPageByLayoutID(ctx context.Context, layoutID uint, key ...interface{}) (*SelfPage, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSelfPageTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, layout_id, name, html, use_layout, fid, fsid, created_at, url ` +
		`FROM ` + tableName +
		` WHERE layout_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, layoutID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sp := SelfPage{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, layoutID).Scan(&sp.ID, &sp.LayoutID, &sp.Name, &sp.HTML, &sp.UseLayout, &sp.Fid, &sp.Fsid, &sp.CreatedAt, &sp.URL)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, layoutID).Scan(&sp.ID, &sp.LayoutID, &sp.Name, &sp.HTML, &sp.UseLayout, &sp.Fid, &sp.Fsid, &sp.CreatedAt, &sp.URL)
		if err != nil {
			return nil, err
		}
	}

	return &sp, nil
}

// SelfPagesByName retrieves a row from 'aypcddg.self_pages' as a SelfPage.
//
// Generated from index 'url'.
func SelfPagesByName(ctx context.Context, name sql.NullString, key ...interface{}) ([]*SelfPage, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSelfPageTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, layout_id, name, html, use_layout, fid, fsid, created_at, url ` +
		`FROM ` + tableName +
		` WHERE name = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, name)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, name)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, name)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SelfPage, 0)
	for queryData.Next() {
		sp := SelfPage{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sp.ID, &sp.LayoutID, &sp.Name, &sp.HTML, &sp.UseLayout, &sp.Fid, &sp.Fsid, &sp.CreatedAt, &sp.URL)
		if err != nil {
			return nil, err
		}

		res = append(res, &sp)
	}

	return res, nil
}
