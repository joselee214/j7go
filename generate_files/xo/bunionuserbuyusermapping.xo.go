// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BunionUserBuyUserMapping represents a row from 'aypcddg.bunion_user_buy_user_mapping'.
type BunionUserBuyUserMapping struct {
	ID        uint64         `json:"id"`         // id
	Bunionid  int            `json:"bunionid"`   // bunionid
	Buid      int            `json:"buid"`       // buid
	Isnew     int8           `json:"isnew"`      // isnew
	UID       int64          `json:"uid"`        // uid
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BunionUserBuyUserMapping exists in the database.
func (bubum *BunionUserBuyUserMapping) Exists() bool { //bunion_user_buy_user_mapping
	return bubum._exists
}

// Deleted provides information if the BunionUserBuyUserMapping has been deleted from the database.
func (bubum *BunionUserBuyUserMapping) Deleted() bool {
	return bubum._deleted
}

// Get table name
func GetBunionUserBuyUserMappingTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "bunion_user_buy_user_mapping", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BunionUserBuyUserMapping to the database.
func (bubum *BunionUserBuyUserMapping) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if bubum._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBunionUserBuyUserMappingTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`bunionid, buid, isnew, uid, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bubum.Bunionid, bubum.Buid, bubum.Isnew, bubum.UID, bubum.CreatedAt, bubum.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, bubum.Bunionid, bubum.Buid, bubum.Isnew, bubum.UID, bubum.CreatedAt, bubum.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, bubum.Bunionid, bubum.Buid, bubum.Isnew, bubum.UID, bubum.CreatedAt, bubum.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bubum.ID = uint64(id)
	bubum._exists = true

	return nil
}

// Update updates the BunionUserBuyUserMapping in the database.
func (bubum *BunionUserBuyUserMapping) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bubum._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBunionUserBuyUserMappingTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`bunionid = ?, buid = ?, isnew = ?, uid = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bubum.Bunionid, bubum.Buid, bubum.Isnew, bubum.UID, bubum.CreatedAt, bubum.UpdatedAt, bubum.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bubum.Bunionid, bubum.Buid, bubum.Isnew, bubum.UID, bubum.CreatedAt, bubum.UpdatedAt, bubum.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bubum.Bunionid, bubum.Buid, bubum.Isnew, bubum.UID, bubum.CreatedAt, bubum.UpdatedAt, bubum.ID)
	}
	return err
}

// Save saves the BunionUserBuyUserMapping to the database.
func (bubum *BunionUserBuyUserMapping) Save(ctx context.Context) error {
	if bubum.Exists() {
		return bubum.Update(ctx)
	}

	return bubum.Insert(ctx)
}

// Delete deletes the BunionUserBuyUserMapping from the database.
func (bubum *BunionUserBuyUserMapping) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bubum._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBunionUserBuyUserMappingTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bubum.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bubum.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bubum.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	bubum._deleted = true

	return nil
}

// BunionUserBuyUserMappingByBuid retrieves a row from 'aypcddg.bunion_user_buy_user_mapping' as a BunionUserBuyUserMapping.
//
// Generated from index 'bunion_user_buy_user_mapping_buid_unique'.
func BunionUserBuyUserMappingByBuid(ctx context.Context, buid int, key ...interface{}) (*BunionUserBuyUserMapping, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBunionUserBuyUserMappingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, bunionid, buid, isnew, uid, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE buid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, buid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bubum := BunionUserBuyUserMapping{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, buid).Scan(&bubum.ID, &bubum.Bunionid, &bubum.Buid, &bubum.Isnew, &bubum.UID, &bubum.CreatedAt, &bubum.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, buid).Scan(&bubum.ID, &bubum.Bunionid, &bubum.Buid, &bubum.Isnew, &bubum.UID, &bubum.CreatedAt, &bubum.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &bubum, nil
}

// BunionUserBuyUserMappingByID retrieves a row from 'aypcddg.bunion_user_buy_user_mapping' as a BunionUserBuyUserMapping.
//
// Generated from index 'bunion_user_buy_user_mapping_id_pkey'.
func BunionUserBuyUserMappingByID(ctx context.Context, id uint64, key ...interface{}) (*BunionUserBuyUserMapping, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBunionUserBuyUserMappingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, bunionid, buid, isnew, uid, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bubum := BunionUserBuyUserMapping{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&bubum.ID, &bubum.Bunionid, &bubum.Buid, &bubum.Isnew, &bubum.UID, &bubum.CreatedAt, &bubum.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&bubum.ID, &bubum.Bunionid, &bubum.Buid, &bubum.Isnew, &bubum.UID, &bubum.CreatedAt, &bubum.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &bubum, nil
}

// BunionUserBuyUserMappingByUID retrieves a row from 'aypcddg.bunion_user_buy_user_mapping' as a BunionUserBuyUserMapping.
//
// Generated from index 'bunion_user_buy_user_mapping_uid_unique'.
func BunionUserBuyUserMappingByUID(ctx context.Context, uid int64, key ...interface{}) (*BunionUserBuyUserMapping, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBunionUserBuyUserMappingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, bunionid, buid, isnew, uid, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bubum := BunionUserBuyUserMapping{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid).Scan(&bubum.ID, &bubum.Bunionid, &bubum.Buid, &bubum.Isnew, &bubum.UID, &bubum.CreatedAt, &bubum.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid).Scan(&bubum.ID, &bubum.Bunionid, &bubum.Buid, &bubum.Isnew, &bubum.UID, &bubum.CreatedAt, &bubum.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &bubum, nil
}
