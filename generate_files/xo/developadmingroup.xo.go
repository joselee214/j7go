// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// DevelopAdminGroup represents a row from 'aypcddg.develop_admin_group'.
type DevelopAdminGroup struct {
	ID      uint           `json:"id"`       // id
	Title   sql.NullString `json:"title"`    // title
	CateIds sql.NullString `json:"cate_ids"` // cate_ids

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DevelopAdminGroup exists in the database.
func (dag *DevelopAdminGroup) Exists() bool { //develop_admin_group
	return dag._exists
}

// Deleted provides information if the DevelopAdminGroup has been deleted from the database.
func (dag *DevelopAdminGroup) Deleted() bool {
	return dag._deleted
}

// Get table name
func GetDevelopAdminGroupTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "develop_admin_group", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DevelopAdminGroup to the database.
func (dag *DevelopAdminGroup) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if dag._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDevelopAdminGroupTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, cate_ids` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dag.Title, dag.CateIds)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, dag.Title, dag.CateIds)
	} else {
		res, err = dbConn.Exec(sqlstr, dag.Title, dag.CateIds)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dag.ID = uint(id)
	dag._exists = true

	return nil
}

// Update updates the DevelopAdminGroup in the database.
func (dag *DevelopAdminGroup) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dag._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDevelopAdminGroupTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, cate_ids = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dag.Title, dag.CateIds, dag.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dag.Title, dag.CateIds, dag.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dag.Title, dag.CateIds, dag.ID)
	}
	return err
}

// Save saves the DevelopAdminGroup to the database.
func (dag *DevelopAdminGroup) Save(ctx context.Context) error {
	if dag.Exists() {
		return dag.Update(ctx)
	}

	return dag.Insert(ctx)
}

// Delete deletes the DevelopAdminGroup from the database.
func (dag *DevelopAdminGroup) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dag._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDevelopAdminGroupTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dag.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dag.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dag.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	dag._deleted = true

	return nil
}

// DevelopAdminGroupByID retrieves a row from 'aypcddg.develop_admin_group' as a DevelopAdminGroup.
//
// Generated from index 'develop_admin_group_id_pkey'.
func DevelopAdminGroupByID(ctx context.Context, id uint, key ...interface{}) (*DevelopAdminGroup, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDevelopAdminGroupTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, cate_ids ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dag := DevelopAdminGroup{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&dag.ID, &dag.Title, &dag.CateIds)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&dag.ID, &dag.Title, &dag.CateIds)
		if err != nil {
			return nil, err
		}
	}

	return &dag, nil
}
