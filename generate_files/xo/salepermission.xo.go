// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// SalePermission represents a row from 'aypcddg.sale_permission'.
type SalePermission struct {
	Spid        uint           `json:"spid"`         // spid
	Desc        sql.NullString `json:"desc"`         // desc
	ActionClass sql.NullString `json:"action_class"` // action_class

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SalePermission exists in the database.
func (sp *SalePermission) Exists() bool { //sale_permission
	return sp._exists
}

// Deleted provides information if the SalePermission has been deleted from the database.
func (sp *SalePermission) Deleted() bool {
	return sp._deleted
}

// Get table name
func GetSalePermissionTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "sale_permission", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SalePermission to the database.
func (sp *SalePermission) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSalePermissionTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`spid, desc, action_class` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sp.Spid, sp.Desc, sp.ActionClass)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, sp.Spid, sp.Desc, sp.ActionClass)
	} else {
		res, err = dbConn.Exec(sqlstr, sp.Spid, sp.Desc, sp.ActionClass)
	}

	if err != nil {
		return err
	}

	// set existence
	sp._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sp.Spid = uint(id)
	sp._exists = true

	return nil
}

// Update updates the SalePermission in the database.
func (sp *SalePermission) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSalePermissionTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`desc = ?, action_class = ?` +
		` WHERE spid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sp.Desc, sp.ActionClass, sp.Spid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sp.Desc, sp.ActionClass, sp.Spid)
	} else {
		_, err = dbConn.Exec(sqlstr, sp.Desc, sp.ActionClass, sp.Spid)
	}
	return err
}

// Save saves the SalePermission to the database.
func (sp *SalePermission) Save(ctx context.Context) error {
	if sp.Exists() {
		return sp.Update(ctx)
	}

	return sp.Insert(ctx)
}

// Delete deletes the SalePermission from the database.
func (sp *SalePermission) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSalePermissionTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE spid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sp.Spid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sp.Spid)
	} else {
		_, err = dbConn.Exec(sqlstr, sp.Spid)
	}

	if err != nil {
		return err
	}

	// set deleted
	sp._deleted = true

	return nil
}

// SalePermissionBySpid retrieves a row from 'aypcddg.sale_permission' as a SalePermission.
//
// Generated from index 'sale_permission_spid_pkey'.
func SalePermissionBySpid(ctx context.Context, spid uint, key ...interface{}) (*SalePermission, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSalePermissionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`spid, desc, action_class ` +
		`FROM ` + tableName +
		` WHERE spid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, spid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sp := SalePermission{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, spid).Scan(&sp.Spid, &sp.Desc, &sp.ActionClass)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, spid).Scan(&sp.Spid, &sp.Desc, &sp.ActionClass)
		if err != nil {
			return nil, err
		}
	}

	return &sp, nil
}
