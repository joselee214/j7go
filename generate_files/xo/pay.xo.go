// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Pay represents a row from 'aypcddg.pay'.
type Pay struct {
	Payid          int64           `json:"payid"`            // payid
	UID            int             `json:"uid"`              // uid
	TotalFee       float64         `json:"total_fee"`        // total_fee
	PayType        sql.NullString  `json:"pay_type"`         // pay_type
	BankNumber     sql.NullString  `json:"bank_number"`      // bank_number
	Status         int8            `json:"status"`           // status
	Viewfrom       sql.NullString  `json:"viewfrom"`         // viewfrom
	URL            sql.NullString  `json:"url"`              // url
	Info           sql.NullString  `json:"info"`             // info
	PaidLeftAmount sql.NullFloat64 `json:"paid_left_amount"` // paid_left_amount
	MchID          sql.NullString  `json:"mch_id"`           // mch_id
	PayUniqueNo    string          `json:"pay_unique_no"`    // pay_unique_no

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Pay exists in the database.
func (p *Pay) Exists() bool { //pay
	return p._exists
}

// Deleted provides information if the Pay has been deleted from the database.
func (p *Pay) Deleted() bool {
	return p._deleted
}

// Get table name
func GetPayTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "pay", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Pay to the database.
func (p *Pay) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPayTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, total_fee, pay_type, bank_number, status, viewfrom, url, info, paid_left_amount, mch_id, pay_unique_no` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, p.UID, p.TotalFee, p.PayType, p.BankNumber, p.Status, p.Viewfrom, p.URL, p.Info, p.PaidLeftAmount, p.MchID, p.PayUniqueNo)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, p.UID, p.TotalFee, p.PayType, p.BankNumber, p.Status, p.Viewfrom, p.URL, p.Info, p.PaidLeftAmount, p.MchID, p.PayUniqueNo)
	} else {
		res, err = dbConn.Exec(sqlstr, p.UID, p.TotalFee, p.PayType, p.BankNumber, p.Status, p.Viewfrom, p.URL, p.Info, p.PaidLeftAmount, p.MchID, p.PayUniqueNo)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.Payid = int64(id)
	p._exists = true

	return nil
}

// Update updates the Pay in the database.
func (p *Pay) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPayTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, total_fee = ?, pay_type = ?, bank_number = ?, status = ?, viewfrom = ?, url = ?, info = ?, paid_left_amount = ?, mch_id = ?, pay_unique_no = ?` +
		` WHERE payid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, p.UID, p.TotalFee, p.PayType, p.BankNumber, p.Status, p.Viewfrom, p.URL, p.Info, p.PaidLeftAmount, p.MchID, p.PayUniqueNo, p.Payid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, p.UID, p.TotalFee, p.PayType, p.BankNumber, p.Status, p.Viewfrom, p.URL, p.Info, p.PaidLeftAmount, p.MchID, p.PayUniqueNo, p.Payid)
	} else {
		_, err = dbConn.Exec(sqlstr, p.UID, p.TotalFee, p.PayType, p.BankNumber, p.Status, p.Viewfrom, p.URL, p.Info, p.PaidLeftAmount, p.MchID, p.PayUniqueNo, p.Payid)
	}
	return err
}

// Save saves the Pay to the database.
func (p *Pay) Save(ctx context.Context) error {
	if p.Exists() {
		return p.Update(ctx)
	}

	return p.Insert(ctx)
}

// Delete deletes the Pay from the database.
func (p *Pay) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if p._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPayTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE payid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, p.Payid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, p.Payid)
	} else {
		_, err = dbConn.Exec(sqlstr, p.Payid)
	}

	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PayByPayid retrieves a row from 'aypcddg.pay' as a Pay.
//
// Generated from index 'pay_payid_pkey'.
func PayByPayid(ctx context.Context, payid int64, key ...interface{}) (*Pay, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPayTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`payid, uid, total_fee, pay_type, bank_number, status, viewfrom, url, info, paid_left_amount, mch_id, pay_unique_no ` +
		`FROM ` + tableName +
		` WHERE payid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, payid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	p := Pay{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, payid).Scan(&p.Payid, &p.UID, &p.TotalFee, &p.PayType, &p.BankNumber, &p.Status, &p.Viewfrom, &p.URL, &p.Info, &p.PaidLeftAmount, &p.MchID, &p.PayUniqueNo)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, payid).Scan(&p.Payid, &p.UID, &p.TotalFee, &p.PayType, &p.BankNumber, &p.Status, &p.Viewfrom, &p.URL, &p.Info, &p.PaidLeftAmount, &p.MchID, &p.PayUniqueNo)
		if err != nil {
			return nil, err
		}
	}

	return &p, nil
}

// PaysByUID retrieves a row from 'aypcddg.pay' as a Pay.
//
// Generated from index 'uid'.
func PaysByUID(ctx context.Context, uid int, key ...interface{}) ([]*Pay, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPayTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`payid, uid, total_fee, pay_type, bank_number, status, viewfrom, url, info, paid_left_amount, mch_id, pay_unique_no ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*Pay, 0)
	for queryData.Next() {
		p := Pay{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&p.Payid, &p.UID, &p.TotalFee, &p.PayType, &p.BankNumber, &p.Status, &p.Viewfrom, &p.URL, &p.Info, &p.PaidLeftAmount, &p.MchID, &p.PayUniqueNo)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}
