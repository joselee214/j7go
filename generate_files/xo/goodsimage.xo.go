// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsImage represents a row from 'aypcddg.goods_image'.
type GoodsImage struct {
	Giid  uint64         `json:"giid"`  // giid
	Gid   sql.NullInt64  `json:"gid"`   // gid
	Pgid  int            `json:"pgid"`  // pgid
	Seq   int16          `json:"seq"`   // seq
	URL   sql.NullString `json:"url"`   // url
	Tp    sql.NullString `json:"tp"`    // tp
	Picid int            `json:"picid"` // picid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsImage exists in the database.
func (gi *GoodsImage) Exists() bool { //goods_image
	return gi._exists
}

// Deleted provides information if the GoodsImage has been deleted from the database.
func (gi *GoodsImage) Deleted() bool {
	return gi._deleted
}

// Get table name
func GetGoodsImageTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_image", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsImage to the database.
func (gi *GoodsImage) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gi._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsImageTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`gid, pgid, seq, url, tp, picid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gi.Gid, gi.Pgid, gi.Seq, gi.URL, gi.Tp, gi.Picid)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gi.Gid, gi.Pgid, gi.Seq, gi.URL, gi.Tp, gi.Picid)
	} else {
		res, err = dbConn.Exec(sqlstr, gi.Gid, gi.Pgid, gi.Seq, gi.URL, gi.Tp, gi.Picid)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gi.Giid = uint64(id)
	gi._exists = true

	return nil
}

// Update updates the GoodsImage in the database.
func (gi *GoodsImage) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsImageTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`gid = ?, pgid = ?, seq = ?, url = ?, tp = ?, picid = ?` +
		` WHERE giid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gi.Gid, gi.Pgid, gi.Seq, gi.URL, gi.Tp, gi.Picid, gi.Giid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gi.Gid, gi.Pgid, gi.Seq, gi.URL, gi.Tp, gi.Picid, gi.Giid)
	} else {
		_, err = dbConn.Exec(sqlstr, gi.Gid, gi.Pgid, gi.Seq, gi.URL, gi.Tp, gi.Picid, gi.Giid)
	}
	return err
}

// Save saves the GoodsImage to the database.
func (gi *GoodsImage) Save(ctx context.Context) error {
	if gi.Exists() {
		return gi.Update(ctx)
	}

	return gi.Insert(ctx)
}

// Delete deletes the GoodsImage from the database.
func (gi *GoodsImage) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gi._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsImageTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE giid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gi.Giid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gi.Giid)
	} else {
		_, err = dbConn.Exec(sqlstr, gi.Giid)
	}

	if err != nil {
		return err
	}

	// set deleted
	gi._deleted = true

	return nil
}

// GoodsImagesByGid retrieves a row from 'aypcddg.goods_image' as a GoodsImage.
//
// Generated from index 'gid'.
func GoodsImagesByGid(ctx context.Context, gid sql.NullInt64, key ...interface{}) ([]*GoodsImage, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsImageTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`giid, gid, pgid, seq, url, tp, picid ` +
		`FROM ` + tableName +
		` WHERE gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsImage, 0)
	for queryData.Next() {
		gi := GoodsImage{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gi.Giid, &gi.Gid, &gi.Pgid, &gi.Seq, &gi.URL, &gi.Tp, &gi.Picid)
		if err != nil {
			return nil, err
		}

		res = append(res, &gi)
	}

	return res, nil
}

// GoodsImageByGiid retrieves a row from 'aypcddg.goods_image' as a GoodsImage.
//
// Generated from index 'goods_image_giid_pkey'.
func GoodsImageByGiid(ctx context.Context, giid uint64, key ...interface{}) (*GoodsImage, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsImageTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`giid, gid, pgid, seq, url, tp, picid ` +
		`FROM ` + tableName +
		` WHERE giid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, giid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gi := GoodsImage{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, giid).Scan(&gi.Giid, &gi.Gid, &gi.Pgid, &gi.Seq, &gi.URL, &gi.Tp, &gi.Picid)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, giid).Scan(&gi.Giid, &gi.Gid, &gi.Pgid, &gi.Seq, &gi.URL, &gi.Tp, &gi.Picid)
		if err != nil {
			return nil, err
		}
	}

	return &gi, nil
}
