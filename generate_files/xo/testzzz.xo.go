// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Testzzz represents a row from 'aypcddg.testzzz'.
type Testzzz struct {
	ID int           `json:"id"` // id
	A  sql.NullInt64 `json:"a"`  // a
	B  sql.NullInt64 `json:"b"`  // b
	C  sql.NullInt64 `json:"c"`  // c

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Testzzz exists in the database.
func (t *Testzzz) Exists() bool { //testzzz
	return t._exists
}

// Deleted provides information if the Testzzz has been deleted from the database.
func (t *Testzzz) Deleted() bool {
	return t._deleted
}

// Get table name
func GetTestzzzTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "testzzz", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Testzzz to the database.
func (t *Testzzz) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTestzzzTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`a, b, c` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, t.A, t.B, t.C)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, t.A, t.B, t.C)
	} else {
		res, err = dbConn.Exec(sqlstr, t.A, t.B, t.C)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.ID = int(id)
	t._exists = true

	return nil
}

// Update updates the Testzzz in the database.
func (t *Testzzz) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTestzzzTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`a = ?, b = ?, c = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, t.A, t.B, t.C, t.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, t.A, t.B, t.C, t.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, t.A, t.B, t.C, t.ID)
	}
	return err
}

// Save saves the Testzzz to the database.
func (t *Testzzz) Save(ctx context.Context) error {
	if t.Exists() {
		return t.Update(ctx)
	}

	return t.Insert(ctx)
}

// Delete deletes the Testzzz from the database.
func (t *Testzzz) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if t._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTestzzzTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, t.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, t.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, t.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TestzzzByID retrieves a row from 'aypcddg.testzzz' as a Testzzz.
//
// Generated from index 'testzzz_id_pkey'.
func TestzzzByID(ctx context.Context, id int, key ...interface{}) (*Testzzz, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetTestzzzTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, a, b, c ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	t := Testzzz{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&t.ID, &t.A, &t.B, &t.C)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&t.ID, &t.A, &t.B, &t.C)
		if err != nil {
			return nil, err
		}
	}

	return &t, nil
}
