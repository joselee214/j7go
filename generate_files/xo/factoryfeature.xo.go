// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryFeature represents a row from 'aypcddg.factory_features'.
type FactoryFeature struct {
	Ffid     int16          `json:"ffid"`      // ffid
	Title    sql.NullString `json:"title"`     // title
	Desc     sql.NullString `json:"desc"`      // desc
	OptName  sql.NullString `json:"opt_name"`  // opt_name
	OptValue sql.NullString `json:"opt_value"` // opt_value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryFeature exists in the database.
func (ff *FactoryFeature) Exists() bool { //factory_features
	return ff._exists
}

// Deleted provides information if the FactoryFeature has been deleted from the database.
func (ff *FactoryFeature) Deleted() bool {
	return ff._deleted
}

// Get table name
func GetFactoryFeatureTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_features", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryFeature to the database.
func (ff *FactoryFeature) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ff._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryFeatureTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, desc, opt_name, opt_value` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ff.Title, ff.Desc, ff.OptName, ff.OptValue)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ff.Title, ff.Desc, ff.OptName, ff.OptValue)
	} else {
		res, err = dbConn.Exec(sqlstr, ff.Title, ff.Desc, ff.OptName, ff.OptValue)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ff.Ffid = int16(id)
	ff._exists = true

	return nil
}

// Update updates the FactoryFeature in the database.
func (ff *FactoryFeature) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ff._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryFeatureTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, desc = ?, opt_name = ?, opt_value = ?` +
		` WHERE ffid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ff.Title, ff.Desc, ff.OptName, ff.OptValue, ff.Ffid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ff.Title, ff.Desc, ff.OptName, ff.OptValue, ff.Ffid)
	} else {
		_, err = dbConn.Exec(sqlstr, ff.Title, ff.Desc, ff.OptName, ff.OptValue, ff.Ffid)
	}
	return err
}

// Save saves the FactoryFeature to the database.
func (ff *FactoryFeature) Save(ctx context.Context) error {
	if ff.Exists() {
		return ff.Update(ctx)
	}

	return ff.Insert(ctx)
}

// Delete deletes the FactoryFeature from the database.
func (ff *FactoryFeature) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ff._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryFeatureTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE ffid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ff.Ffid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ff.Ffid)
	} else {
		_, err = dbConn.Exec(sqlstr, ff.Ffid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ff._deleted = true

	return nil
}

// FactoryFeatureByFfid retrieves a row from 'aypcddg.factory_features' as a FactoryFeature.
//
// Generated from index 'factory_features_ffid_pkey'.
func FactoryFeatureByFfid(ctx context.Context, ffid int16, key ...interface{}) (*FactoryFeature, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryFeatureTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`ffid, title, desc, opt_name, opt_value ` +
		`FROM ` + tableName +
		` WHERE ffid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ffid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ff := FactoryFeature{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, ffid).Scan(&ff.Ffid, &ff.Title, &ff.Desc, &ff.OptName, &ff.OptValue)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, ffid).Scan(&ff.Ffid, &ff.Title, &ff.Desc, &ff.OptName, &ff.OptValue)
		if err != nil {
			return nil, err
		}
	}

	return &ff, nil
}
