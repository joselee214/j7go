// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryCategory represents a row from 'aypcddg.factory_category'.
type FactoryCategory struct {
	Fcid    uint           `json:"fcid"`    // fcid
	Fid     uint           `json:"fid"`     // fid
	Pid     uint           `json:"pid"`     // pid
	Title   sql.NullString `json:"title"`   // title
	Pic     sql.NullString `json:"pic"`     // pic
	Seq     int16          `json:"seq"`     // seq
	Created uint           `json:"created"` // created
	Updated uint           `json:"updated"` // updated
	Status  bool           `json:"status"`  // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryCategory exists in the database.
func (fc *FactoryCategory) Exists() bool { //factory_category
	return fc._exists
}

// Deleted provides information if the FactoryCategory has been deleted from the database.
func (fc *FactoryCategory) Deleted() bool {
	return fc._deleted
}

// Get table name
func GetFactoryCategoryTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_category", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryCategory to the database.
func (fc *FactoryCategory) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryCategoryTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, pid, title, pic, seq, created, updated, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fc.Fid, fc.Pid, fc.Title, fc.Pic, fc.Seq, fc.Created, fc.Updated, fc.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fc.Fid, fc.Pid, fc.Title, fc.Pic, fc.Seq, fc.Created, fc.Updated, fc.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, fc.Fid, fc.Pid, fc.Title, fc.Pic, fc.Seq, fc.Created, fc.Updated, fc.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fc.Fcid = uint(id)
	fc._exists = true

	return nil
}

// Update updates the FactoryCategory in the database.
func (fc *FactoryCategory) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryCategoryTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, pid = ?, title = ?, pic = ?, seq = ?, created = ?, updated = ?, status = ?` +
		` WHERE fcid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fc.Fid, fc.Pid, fc.Title, fc.Pic, fc.Seq, fc.Created, fc.Updated, fc.Status, fc.Fcid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fc.Fid, fc.Pid, fc.Title, fc.Pic, fc.Seq, fc.Created, fc.Updated, fc.Status, fc.Fcid)
	} else {
		_, err = dbConn.Exec(sqlstr, fc.Fid, fc.Pid, fc.Title, fc.Pic, fc.Seq, fc.Created, fc.Updated, fc.Status, fc.Fcid)
	}
	return err
}

// Save saves the FactoryCategory to the database.
func (fc *FactoryCategory) Save(ctx context.Context) error {
	if fc.Exists() {
		return fc.Update(ctx)
	}

	return fc.Insert(ctx)
}

// Delete deletes the FactoryCategory from the database.
func (fc *FactoryCategory) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryCategoryTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE fcid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fc.Fcid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fc.Fcid)
	} else {
		_, err = dbConn.Exec(sqlstr, fc.Fcid)
	}

	if err != nil {
		return err
	}

	// set deleted
	fc._deleted = true

	return nil
}

// FactoryCategoryByFcid retrieves a row from 'aypcddg.factory_category' as a FactoryCategory.
//
// Generated from index 'factory_category_fcid_pkey'.
func FactoryCategoryByFcid(ctx context.Context, fcid uint, key ...interface{}) (*FactoryCategory, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryCategoryTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fcid, fid, pid, title, pic, seq, created, updated, status ` +
		`FROM ` + tableName +
		` WHERE fcid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fcid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fc := FactoryCategory{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fcid).Scan(&fc.Fcid, &fc.Fid, &fc.Pid, &fc.Title, &fc.Pic, &fc.Seq, &fc.Created, &fc.Updated, &fc.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fcid).Scan(&fc.Fcid, &fc.Fid, &fc.Pid, &fc.Title, &fc.Pic, &fc.Seq, &fc.Created, &fc.Updated, &fc.Status)
		if err != nil {
			return nil, err
		}
	}

	return &fc, nil
}

// FactoryCategoriesByFid retrieves a row from 'aypcddg.factory_category' as a FactoryCategory.
//
// Generated from index 'fid'.
func FactoryCategoriesByFid(ctx context.Context, fid uint, key ...interface{}) ([]*FactoryCategory, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryCategoryTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fcid, fid, pid, title, pic, seq, created, updated, status ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryCategory, 0)
	for queryData.Next() {
		fc := FactoryCategory{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fc.Fcid, &fc.Fid, &fc.Pid, &fc.Title, &fc.Pic, &fc.Seq, &fc.Created, &fc.Updated, &fc.Status)
		if err != nil {
			return nil, err
		}

		res = append(res, &fc)
	}

	return res, nil
}
