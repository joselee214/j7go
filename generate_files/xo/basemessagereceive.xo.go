// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BaseMessageReceive represents a row from 'aypcddg.base_message_receive'.
type BaseMessageReceive struct {
	ID           uint           `json:"id"`            // id
	UserID       int            `json:"user_id"`       // user_id
	Code         string         `json:"code"`          // code
	IdentifierID int            `json:"identifier_id"` // identifier_id
	ParamsJSON   JSON           `json:"params_json"`   // params_json
	Platform     int8           `json:"platform"`      // platform
	Status       int8           `json:"status"`        // status
	ScheduleAt   mysql.NullTime `json:"schedule_at"`   // schedule_at
	CreatedAt    mysql.NullTime `json:"created_at"`    // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`    // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BaseMessageReceive exists in the database.
func (bmr *BaseMessageReceive) Exists() bool { //base_message_receive
	return bmr._exists
}

// Deleted provides information if the BaseMessageReceive has been deleted from the database.
func (bmr *BaseMessageReceive) Deleted() bool {
	return bmr._deleted
}

// Get table name
func GetBaseMessageReceiveTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "base_message_receive", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BaseMessageReceive to the database.
func (bmr *BaseMessageReceive) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if bmr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageReceiveTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`user_id, code, identifier_id, params_json, platform, status, schedule_at, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmr.UserID, bmr.Code, bmr.IdentifierID, bmr.ParamsJSON, bmr.Platform, bmr.Status, bmr.ScheduleAt, bmr.CreatedAt, bmr.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, bmr.UserID, bmr.Code, bmr.IdentifierID, bmr.ParamsJSON, bmr.Platform, bmr.Status, bmr.ScheduleAt, bmr.CreatedAt, bmr.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, bmr.UserID, bmr.Code, bmr.IdentifierID, bmr.ParamsJSON, bmr.Platform, bmr.Status, bmr.ScheduleAt, bmr.CreatedAt, bmr.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bmr.ID = uint(id)
	bmr._exists = true

	return nil
}

// Update updates the BaseMessageReceive in the database.
func (bmr *BaseMessageReceive) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bmr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageReceiveTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`user_id = ?, code = ?, identifier_id = ?, params_json = ?, platform = ?, status = ?, schedule_at = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmr.UserID, bmr.Code, bmr.IdentifierID, bmr.ParamsJSON, bmr.Platform, bmr.Status, bmr.ScheduleAt, bmr.CreatedAt, bmr.UpdatedAt, bmr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bmr.UserID, bmr.Code, bmr.IdentifierID, bmr.ParamsJSON, bmr.Platform, bmr.Status, bmr.ScheduleAt, bmr.CreatedAt, bmr.UpdatedAt, bmr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bmr.UserID, bmr.Code, bmr.IdentifierID, bmr.ParamsJSON, bmr.Platform, bmr.Status, bmr.ScheduleAt, bmr.CreatedAt, bmr.UpdatedAt, bmr.ID)
	}
	return err
}

// Save saves the BaseMessageReceive to the database.
func (bmr *BaseMessageReceive) Save(ctx context.Context) error {
	if bmr.Exists() {
		return bmr.Update(ctx)
	}

	return bmr.Insert(ctx)
}

// Delete deletes the BaseMessageReceive from the database.
func (bmr *BaseMessageReceive) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bmr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageReceiveTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bmr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bmr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	bmr._deleted = true

	return nil
}

// BaseMessageReceiveByID retrieves a row from 'aypcddg.base_message_receive' as a BaseMessageReceive.
//
// Generated from index 'base_message_receive_id_pkey'.
func BaseMessageReceiveByID(ctx context.Context, id uint, key ...interface{}) (*BaseMessageReceive, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseMessageReceiveTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, user_id, code, identifier_id, params_json, platform, status, schedule_at, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bmr := BaseMessageReceive{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&bmr.ID, &bmr.UserID, &bmr.Code, &bmr.IdentifierID, &bmr.ParamsJSON, &bmr.Platform, &bmr.Status, &bmr.ScheduleAt, &bmr.CreatedAt, &bmr.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&bmr.ID, &bmr.UserID, &bmr.Code, &bmr.IdentifierID, &bmr.ParamsJSON, &bmr.Platform, &bmr.Status, &bmr.ScheduleAt, &bmr.CreatedAt, &bmr.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &bmr, nil
}
