// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsPackage represents a row from 'aypcddg.goods_package'.
type GoodsPackage struct {
	Packageid int            `json:"packageid"`  // packageid
	Fid       int            `json:"fid"`        // fid
	Title     sql.NullString `json:"title"`      // title
	Price     float64        `json:"price"`      // price
	Status    int8           `json:"status"`     // status
	StartTime int            `json:"start_time"` // start_time
	EndTime   int            `json:"end_time"`   // end_time
	Stock     int            `json:"stock"`      // stock

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsPackage exists in the database.
func (gp *GoodsPackage) Exists() bool { //goods_package
	return gp._exists
}

// Deleted provides information if the GoodsPackage has been deleted from the database.
func (gp *GoodsPackage) Deleted() bool {
	return gp._deleted
}

// Get table name
func GetGoodsPackageTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_package", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsPackage to the database.
func (gp *GoodsPackage) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPackageTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, title, price, status, start_time, end_time, stock` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gp.Fid, gp.Title, gp.Price, gp.Status, gp.StartTime, gp.EndTime, gp.Stock)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gp.Fid, gp.Title, gp.Price, gp.Status, gp.StartTime, gp.EndTime, gp.Stock)
	} else {
		res, err = dbConn.Exec(sqlstr, gp.Fid, gp.Title, gp.Price, gp.Status, gp.StartTime, gp.EndTime, gp.Stock)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gp.Packageid = int(id)
	gp._exists = true

	return nil
}

// Update updates the GoodsPackage in the database.
func (gp *GoodsPackage) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPackageTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, title = ?, price = ?, status = ?, start_time = ?, end_time = ?, stock = ?` +
		` WHERE packageid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gp.Fid, gp.Title, gp.Price, gp.Status, gp.StartTime, gp.EndTime, gp.Stock, gp.Packageid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gp.Fid, gp.Title, gp.Price, gp.Status, gp.StartTime, gp.EndTime, gp.Stock, gp.Packageid)
	} else {
		_, err = dbConn.Exec(sqlstr, gp.Fid, gp.Title, gp.Price, gp.Status, gp.StartTime, gp.EndTime, gp.Stock, gp.Packageid)
	}
	return err
}

// Save saves the GoodsPackage to the database.
func (gp *GoodsPackage) Save(ctx context.Context) error {
	if gp.Exists() {
		return gp.Update(ctx)
	}

	return gp.Insert(ctx)
}

// Delete deletes the GoodsPackage from the database.
func (gp *GoodsPackage) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPackageTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE packageid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gp.Packageid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gp.Packageid)
	} else {
		_, err = dbConn.Exec(sqlstr, gp.Packageid)
	}

	if err != nil {
		return err
	}

	// set deleted
	gp._deleted = true

	return nil
}

// GoodsPackagesByFid retrieves a row from 'aypcddg.goods_package' as a GoodsPackage.
//
// Generated from index 'fid'.
func GoodsPackagesByFid(ctx context.Context, fid int, key ...interface{}) ([]*GoodsPackage, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsPackageTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`packageid, fid, title, price, status, start_time, end_time, stock ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsPackage, 0)
	for queryData.Next() {
		gp := GoodsPackage{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gp.Packageid, &gp.Fid, &gp.Title, &gp.Price, &gp.Status, &gp.StartTime, &gp.EndTime, &gp.Stock)
		if err != nil {
			return nil, err
		}

		res = append(res, &gp)
	}

	return res, nil
}

// GoodsPackageByPackageid retrieves a row from 'aypcddg.goods_package' as a GoodsPackage.
//
// Generated from index 'goods_package_packageid_pkey'.
func GoodsPackageByPackageid(ctx context.Context, packageid int, key ...interface{}) (*GoodsPackage, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsPackageTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`packageid, fid, title, price, status, start_time, end_time, stock ` +
		`FROM ` + tableName +
		` WHERE packageid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, packageid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gp := GoodsPackage{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, packageid).Scan(&gp.Packageid, &gp.Fid, &gp.Title, &gp.Price, &gp.Status, &gp.StartTime, &gp.EndTime, &gp.Stock)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, packageid).Scan(&gp.Packageid, &gp.Fid, &gp.Title, &gp.Price, &gp.Status, &gp.StartTime, &gp.EndTime, &gp.Stock)
		if err != nil {
			return nil, err
		}
	}

	return &gp, nil
}
