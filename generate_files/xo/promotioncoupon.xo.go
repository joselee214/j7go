// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// PromotionCoupon represents a row from 'aypcddg.promotion_coupon'.
type PromotionCoupon struct {
	Cid           uint           `json:"cid"`             // cid
	Pid           uint           `json:"pid"`             // pid
	Fid           uint           `json:"fid"`             // fid
	Sid           uint           `json:"sid"`             // sid
	Type          sql.NullInt64  `json:"type"`            // type
	Title         sql.NullString `json:"title"`           // title
	BeginTime     uint           `json:"begin_time"`      // begin_time
	EndTime       uint           `json:"end_time"`        // end_time
	Denomination  float64        `json:"denomination"`    // denomination
	TotalNum      uint           `json:"total_num"`       // total_num
	GotNum        uint           `json:"got_num"`         // got_num
	UsedNum       uint           `json:"used_num"`        // used_num
	EachNumLimit  uint           `json:"each_num_limit"`  // each_num_limit
	UserCondValue float64        `json:"user_cond_value"` // user_cond_value
	UseGoodsLimit sql.NullString `json:"use_goods_limit"` // use_goods_limit
	IsShowPublic  int8           `json:"is_show_public"`  // is_show_public
	GetSource     int8           `json:"get_source"`      // get_source
	IsAllowSend   int8           `json:"is_allow_send"`   // is_allow_send
	SkinPic       sql.NullString `json:"skin_pic"`        // skin_pic
	Des           string         `json:"des"`             // des
	Created       uint           `json:"created"`         // created

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PromotionCoupon exists in the database.
func (pc *PromotionCoupon) Exists() bool { //promotion_coupon
	return pc._exists
}

// Deleted provides information if the PromotionCoupon has been deleted from the database.
func (pc *PromotionCoupon) Deleted() bool {
	return pc._deleted
}

// Get table name
func GetPromotionCouponTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "promotion_coupon", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the PromotionCoupon to the database.
func (pc *PromotionCoupon) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPromotionCouponTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`pid, fid, sid, type, title, begin_time, end_time, denomination, total_num, got_num, used_num, each_num_limit, user_cond_value, use_goods_limit, is_show_public, get_source, is_allow_send, skin_pic, des, created` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pc.Pid, pc.Fid, pc.Sid, pc.Type, pc.Title, pc.BeginTime, pc.EndTime, pc.Denomination, pc.TotalNum, pc.GotNum, pc.UsedNum, pc.EachNumLimit, pc.UserCondValue, pc.UseGoodsLimit, pc.IsShowPublic, pc.GetSource, pc.IsAllowSend, pc.SkinPic, pc.Des, pc.Created)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, pc.Pid, pc.Fid, pc.Sid, pc.Type, pc.Title, pc.BeginTime, pc.EndTime, pc.Denomination, pc.TotalNum, pc.GotNum, pc.UsedNum, pc.EachNumLimit, pc.UserCondValue, pc.UseGoodsLimit, pc.IsShowPublic, pc.GetSource, pc.IsAllowSend, pc.SkinPic, pc.Des, pc.Created)
	} else {
		res, err = dbConn.Exec(sqlstr, pc.Pid, pc.Fid, pc.Sid, pc.Type, pc.Title, pc.BeginTime, pc.EndTime, pc.Denomination, pc.TotalNum, pc.GotNum, pc.UsedNum, pc.EachNumLimit, pc.UserCondValue, pc.UseGoodsLimit, pc.IsShowPublic, pc.GetSource, pc.IsAllowSend, pc.SkinPic, pc.Des, pc.Created)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pc.Cid = uint(id)
	pc._exists = true

	return nil
}

// Update updates the PromotionCoupon in the database.
func (pc *PromotionCoupon) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPromotionCouponTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`pid = ?, fid = ?, sid = ?, type = ?, title = ?, begin_time = ?, end_time = ?, denomination = ?, total_num = ?, got_num = ?, used_num = ?, each_num_limit = ?, user_cond_value = ?, use_goods_limit = ?, is_show_public = ?, get_source = ?, is_allow_send = ?, skin_pic = ?, des = ?, created = ?` +
		` WHERE cid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pc.Pid, pc.Fid, pc.Sid, pc.Type, pc.Title, pc.BeginTime, pc.EndTime, pc.Denomination, pc.TotalNum, pc.GotNum, pc.UsedNum, pc.EachNumLimit, pc.UserCondValue, pc.UseGoodsLimit, pc.IsShowPublic, pc.GetSource, pc.IsAllowSend, pc.SkinPic, pc.Des, pc.Created, pc.Cid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pc.Pid, pc.Fid, pc.Sid, pc.Type, pc.Title, pc.BeginTime, pc.EndTime, pc.Denomination, pc.TotalNum, pc.GotNum, pc.UsedNum, pc.EachNumLimit, pc.UserCondValue, pc.UseGoodsLimit, pc.IsShowPublic, pc.GetSource, pc.IsAllowSend, pc.SkinPic, pc.Des, pc.Created, pc.Cid)
	} else {
		_, err = dbConn.Exec(sqlstr, pc.Pid, pc.Fid, pc.Sid, pc.Type, pc.Title, pc.BeginTime, pc.EndTime, pc.Denomination, pc.TotalNum, pc.GotNum, pc.UsedNum, pc.EachNumLimit, pc.UserCondValue, pc.UseGoodsLimit, pc.IsShowPublic, pc.GetSource, pc.IsAllowSend, pc.SkinPic, pc.Des, pc.Created, pc.Cid)
	}
	return err
}

// Save saves the PromotionCoupon to the database.
func (pc *PromotionCoupon) Save(ctx context.Context) error {
	if pc.Exists() {
		return pc.Update(ctx)
	}

	return pc.Insert(ctx)
}

// Delete deletes the PromotionCoupon from the database.
func (pc *PromotionCoupon) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPromotionCouponTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE cid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pc.Cid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pc.Cid)
	} else {
		_, err = dbConn.Exec(sqlstr, pc.Cid)
	}

	if err != nil {
		return err
	}

	// set deleted
	pc._deleted = true

	return nil
}

// PromotionCouponsByCid retrieves a row from 'aypcddg.promotion_coupon' as a PromotionCoupon.
//
// Generated from index 'pcid'.
func PromotionCouponsByCid(ctx context.Context, cid uint, key ...interface{}) ([]*PromotionCoupon, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPromotionCouponTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`cid, pid, fid, sid, type, title, begin_time, end_time, denomination, total_num, got_num, used_num, each_num_limit, user_cond_value, use_goods_limit, is_show_public, get_source, is_allow_send, skin_pic, des, created ` +
		`FROM ` + tableName +
		` WHERE cid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, cid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, cid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*PromotionCoupon, 0)
	for queryData.Next() {
		pc := PromotionCoupon{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&pc.Cid, &pc.Pid, &pc.Fid, &pc.Sid, &pc.Type, &pc.Title, &pc.BeginTime, &pc.EndTime, &pc.Denomination, &pc.TotalNum, &pc.GotNum, &pc.UsedNum, &pc.EachNumLimit, &pc.UserCondValue, &pc.UseGoodsLimit, &pc.IsShowPublic, &pc.GetSource, &pc.IsAllowSend, &pc.SkinPic, &pc.Des, &pc.Created)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PromotionCouponByCid retrieves a row from 'aypcddg.promotion_coupon' as a PromotionCoupon.
//
// Generated from index 'promotion_coupon_cid_pkey'.
func PromotionCouponByCid(ctx context.Context, cid uint, key ...interface{}) (*PromotionCoupon, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPromotionCouponTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`cid, pid, fid, sid, type, title, begin_time, end_time, denomination, total_num, got_num, used_num, each_num_limit, user_cond_value, use_goods_limit, is_show_public, get_source, is_allow_send, skin_pic, des, created ` +
		`FROM ` + tableName +
		` WHERE cid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	pc := PromotionCoupon{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, cid).Scan(&pc.Cid, &pc.Pid, &pc.Fid, &pc.Sid, &pc.Type, &pc.Title, &pc.BeginTime, &pc.EndTime, &pc.Denomination, &pc.TotalNum, &pc.GotNum, &pc.UsedNum, &pc.EachNumLimit, &pc.UserCondValue, &pc.UseGoodsLimit, &pc.IsShowPublic, &pc.GetSource, &pc.IsAllowSend, &pc.SkinPic, &pc.Des, &pc.Created)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, cid).Scan(&pc.Cid, &pc.Pid, &pc.Fid, &pc.Sid, &pc.Type, &pc.Title, &pc.BeginTime, &pc.EndTime, &pc.Denomination, &pc.TotalNum, &pc.GotNum, &pc.UsedNum, &pc.EachNumLimit, &pc.UserCondValue, &pc.UseGoodsLimit, &pc.IsShowPublic, &pc.GetSource, &pc.IsAllowSend, &pc.SkinPic, &pc.Des, &pc.Created)
		if err != nil {
			return nil, err
		}
	}

	return &pc, nil
}
