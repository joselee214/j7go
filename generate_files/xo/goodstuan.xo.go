// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsTuan represents a row from 'aypcddg.goods_tuan'.
type GoodsTuan struct {
	TuanID    int             `json:"tuan_id"`   // tuan_id
	Tcid      sql.NullInt64   `json:"tcid"`      // tcid
	Fid       sql.NullInt64   `json:"fid"`       // fid
	Gid       sql.NullInt64   `json:"gid"`       // gid
	Type      sql.NullBool    `json:"type"`      // type
	Tuancount sql.NullInt64   `json:"tuancount"` // tuancount
	Remainder sql.NullInt64   `json:"remainder"` // remainder
	Price     sql.NullFloat64 `json:"price"`     // price
	Stepprice sql.NullString  `json:"stepprice"` // stepprice
	Prepay    sql.NullFloat64 `json:"prepay"`    // prepay
	Starttime sql.NullInt64   `json:"starttime"` // starttime
	Endtime   sql.NullInt64   `json:"endtime"`   // endtime
	Taid      sql.NullInt64   `json:"taid"`      // taid
	Orderby   sql.NullInt64   `json:"orderby"`   // orderby
	Aduitby   sql.NullInt64   `json:"aduitby"`   // aduitby
	Aduittime sql.NullInt64   `json:"aduittime"` // aduittime
	Status    sql.NullBool    `json:"status"`    // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsTuan exists in the database.
func (gt *GoodsTuan) Exists() bool { //goods_tuan
	return gt._exists
}

// Deleted provides information if the GoodsTuan has been deleted from the database.
func (gt *GoodsTuan) Deleted() bool {
	return gt._deleted
}

// Get table name
func GetGoodsTuanTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_tuan", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsTuan to the database.
func (gt *GoodsTuan) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gt._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsTuanTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`tcid, fid, gid, type, tuancount, remainder, price, stepprice, prepay, starttime, endtime, taid, orderby, aduitby, aduittime, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gt.Tcid, gt.Fid, gt.Gid, gt.Type, gt.Tuancount, gt.Remainder, gt.Price, gt.Stepprice, gt.Prepay, gt.Starttime, gt.Endtime, gt.Taid, gt.Orderby, gt.Aduitby, gt.Aduittime, gt.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gt.Tcid, gt.Fid, gt.Gid, gt.Type, gt.Tuancount, gt.Remainder, gt.Price, gt.Stepprice, gt.Prepay, gt.Starttime, gt.Endtime, gt.Taid, gt.Orderby, gt.Aduitby, gt.Aduittime, gt.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, gt.Tcid, gt.Fid, gt.Gid, gt.Type, gt.Tuancount, gt.Remainder, gt.Price, gt.Stepprice, gt.Prepay, gt.Starttime, gt.Endtime, gt.Taid, gt.Orderby, gt.Aduitby, gt.Aduittime, gt.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gt.TuanID = int(id)
	gt._exists = true

	return nil
}

// Update updates the GoodsTuan in the database.
func (gt *GoodsTuan) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsTuanTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`tcid = ?, fid = ?, gid = ?, type = ?, tuancount = ?, remainder = ?, price = ?, stepprice = ?, prepay = ?, starttime = ?, endtime = ?, taid = ?, orderby = ?, aduitby = ?, aduittime = ?, status = ?` +
		` WHERE tuan_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gt.Tcid, gt.Fid, gt.Gid, gt.Type, gt.Tuancount, gt.Remainder, gt.Price, gt.Stepprice, gt.Prepay, gt.Starttime, gt.Endtime, gt.Taid, gt.Orderby, gt.Aduitby, gt.Aduittime, gt.Status, gt.TuanID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gt.Tcid, gt.Fid, gt.Gid, gt.Type, gt.Tuancount, gt.Remainder, gt.Price, gt.Stepprice, gt.Prepay, gt.Starttime, gt.Endtime, gt.Taid, gt.Orderby, gt.Aduitby, gt.Aduittime, gt.Status, gt.TuanID)
	} else {
		_, err = dbConn.Exec(sqlstr, gt.Tcid, gt.Fid, gt.Gid, gt.Type, gt.Tuancount, gt.Remainder, gt.Price, gt.Stepprice, gt.Prepay, gt.Starttime, gt.Endtime, gt.Taid, gt.Orderby, gt.Aduitby, gt.Aduittime, gt.Status, gt.TuanID)
	}
	return err
}

// Save saves the GoodsTuan to the database.
func (gt *GoodsTuan) Save(ctx context.Context) error {
	if gt.Exists() {
		return gt.Update(ctx)
	}

	return gt.Insert(ctx)
}

// Delete deletes the GoodsTuan from the database.
func (gt *GoodsTuan) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gt._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsTuanTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE tuan_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gt.TuanID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gt.TuanID)
	} else {
		_, err = dbConn.Exec(sqlstr, gt.TuanID)
	}

	if err != nil {
		return err
	}

	// set deleted
	gt._deleted = true

	return nil
}

// GoodsTuanByTaid retrieves a row from 'aypcddg.goods_tuan' as a GoodsTuan.
//
// Generated from index 'NewIndex1'.
func GoodsTuanByTaid(ctx context.Context, taid sql.NullInt64, key ...interface{}) (*GoodsTuan, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsTuanTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`tuan_id, tcid, fid, gid, type, tuancount, remainder, price, stepprice, prepay, starttime, endtime, taid, orderby, aduitby, aduittime, status ` +
		`FROM ` + tableName +
		` WHERE taid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, taid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gt := GoodsTuan{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, taid).Scan(&gt.TuanID, &gt.Tcid, &gt.Fid, &gt.Gid, &gt.Type, &gt.Tuancount, &gt.Remainder, &gt.Price, &gt.Stepprice, &gt.Prepay, &gt.Starttime, &gt.Endtime, &gt.Taid, &gt.Orderby, &gt.Aduitby, &gt.Aduittime, &gt.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, taid).Scan(&gt.TuanID, &gt.Tcid, &gt.Fid, &gt.Gid, &gt.Type, &gt.Tuancount, &gt.Remainder, &gt.Price, &gt.Stepprice, &gt.Prepay, &gt.Starttime, &gt.Endtime, &gt.Taid, &gt.Orderby, &gt.Aduitby, &gt.Aduittime, &gt.Status)
		if err != nil {
			return nil, err
		}
	}

	return &gt, nil
}

// GoodsTuanByTuanID retrieves a row from 'aypcddg.goods_tuan' as a GoodsTuan.
//
// Generated from index 'goods_tuan_tuan_id_pkey'.
func GoodsTuanByTuanID(ctx context.Context, tuanID int, key ...interface{}) (*GoodsTuan, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsTuanTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`tuan_id, tcid, fid, gid, type, tuancount, remainder, price, stepprice, prepay, starttime, endtime, taid, orderby, aduitby, aduittime, status ` +
		`FROM ` + tableName +
		` WHERE tuan_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tuanID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gt := GoodsTuan{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, tuanID).Scan(&gt.TuanID, &gt.Tcid, &gt.Fid, &gt.Gid, &gt.Type, &gt.Tuancount, &gt.Remainder, &gt.Price, &gt.Stepprice, &gt.Prepay, &gt.Starttime, &gt.Endtime, &gt.Taid, &gt.Orderby, &gt.Aduitby, &gt.Aduittime, &gt.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, tuanID).Scan(&gt.TuanID, &gt.Tcid, &gt.Fid, &gt.Gid, &gt.Type, &gt.Tuancount, &gt.Remainder, &gt.Price, &gt.Stepprice, &gt.Prepay, &gt.Starttime, &gt.Endtime, &gt.Taid, &gt.Orderby, &gt.Aduitby, &gt.Aduittime, &gt.Status)
		if err != nil {
			return nil, err
		}
	}

	return &gt, nil
}
