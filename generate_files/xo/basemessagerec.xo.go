// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BaseMessageRec represents a row from 'aypcddg.base_message_rec'.
type BaseMessageRec struct {
	ID         uint           `json:"id"`          // id
	Title      string         `json:"title"`       // title
	Platform   int8           `json:"platform"`    // platform
	SourceType string         `json:"source_type"` // source_type
	Code       string         `json:"code"`        // code
	Channel    int8           `json:"channel"`     // channel
	UserID     int            `json:"user_id"`     // user_id
	SendStatus int8           `json:"send_status"` // send_status
	TemplateID int            `json:"template_id"` // template_id
	ResultJSON JSON           `json:"result_json"` // result_json
	ParamJSON  JSON           `json:"param_json"`  // param_json
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BaseMessageRec exists in the database.
func (bmr *BaseMessageRec) Exists() bool { //base_message_rec
	return bmr._exists
}

// Deleted provides information if the BaseMessageRec has been deleted from the database.
func (bmr *BaseMessageRec) Deleted() bool {
	return bmr._deleted
}

// Get table name
func GetBaseMessageRecTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "base_message_rec", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BaseMessageRec to the database.
func (bmr *BaseMessageRec) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if bmr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageRecTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, title, platform, source_type, code, channel, user_id, send_status, template_id, result_json, param_json, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmr.ID, bmr.Title, bmr.Platform, bmr.SourceType, bmr.Code, bmr.Channel, bmr.UserID, bmr.SendStatus, bmr.TemplateID, bmr.ResultJSON, bmr.ParamJSON, bmr.CreatedAt, bmr.UpdatedAt)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, bmr.ID, bmr.Title, bmr.Platform, bmr.SourceType, bmr.Code, bmr.Channel, bmr.UserID, bmr.SendStatus, bmr.TemplateID, bmr.ResultJSON, bmr.ParamJSON, bmr.CreatedAt, bmr.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, bmr.ID, bmr.Title, bmr.Platform, bmr.SourceType, bmr.Code, bmr.Channel, bmr.UserID, bmr.SendStatus, bmr.TemplateID, bmr.ResultJSON, bmr.ParamJSON, bmr.CreatedAt, bmr.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// set existence
	bmr._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bmr.ID = uint(id)
	bmr._exists = true

	return nil
}

// Update updates the BaseMessageRec in the database.
func (bmr *BaseMessageRec) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bmr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageRecTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, platform = ?, source_type = ?, code = ?, channel = ?, user_id = ?, send_status = ?, template_id = ?, result_json = ?, param_json = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmr.Title, bmr.Platform, bmr.SourceType, bmr.Code, bmr.Channel, bmr.UserID, bmr.SendStatus, bmr.TemplateID, bmr.ResultJSON, bmr.ParamJSON, bmr.CreatedAt, bmr.UpdatedAt, bmr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bmr.Title, bmr.Platform, bmr.SourceType, bmr.Code, bmr.Channel, bmr.UserID, bmr.SendStatus, bmr.TemplateID, bmr.ResultJSON, bmr.ParamJSON, bmr.CreatedAt, bmr.UpdatedAt, bmr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bmr.Title, bmr.Platform, bmr.SourceType, bmr.Code, bmr.Channel, bmr.UserID, bmr.SendStatus, bmr.TemplateID, bmr.ResultJSON, bmr.ParamJSON, bmr.CreatedAt, bmr.UpdatedAt, bmr.ID)
	}
	return err
}

// Save saves the BaseMessageRec to the database.
func (bmr *BaseMessageRec) Save(ctx context.Context) error {
	if bmr.Exists() {
		return bmr.Update(ctx)
	}

	return bmr.Insert(ctx)
}

// Delete deletes the BaseMessageRec from the database.
func (bmr *BaseMessageRec) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bmr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageRecTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bmr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bmr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	bmr._deleted = true

	return nil
}

// BaseMessageRecByID retrieves a row from 'aypcddg.base_message_rec' as a BaseMessageRec.
//
// Generated from index 'base_message_rec_id_pkey'.
func BaseMessageRecByID(ctx context.Context, id uint, key ...interface{}) (*BaseMessageRec, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseMessageRecTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, platform, source_type, code, channel, user_id, send_status, template_id, result_json, param_json, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bmr := BaseMessageRec{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&bmr.ID, &bmr.Title, &bmr.Platform, &bmr.SourceType, &bmr.Code, &bmr.Channel, &bmr.UserID, &bmr.SendStatus, &bmr.TemplateID, &bmr.ResultJSON, &bmr.ParamJSON, &bmr.CreatedAt, &bmr.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&bmr.ID, &bmr.Title, &bmr.Platform, &bmr.SourceType, &bmr.Code, &bmr.Channel, &bmr.UserID, &bmr.SendStatus, &bmr.TemplateID, &bmr.ResultJSON, &bmr.ParamJSON, &bmr.CreatedAt, &bmr.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &bmr, nil
}
