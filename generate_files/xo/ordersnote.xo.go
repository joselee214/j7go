// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// OrdersNote represents a row from 'aypcddg.orders_note'.
type OrdersNote struct {
	Onid      uint           `json:"onid"`       // onid
	Fid       sql.NullInt64  `json:"fid"`        // fid
	Orderid   sql.NullInt64  `json:"orderid"`    // orderid
	Note      string         `json:"note"`       // note
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrdersNote exists in the database.
func (on *OrdersNote) Exists() bool { //orders_note
	return on._exists
}

// Deleted provides information if the OrdersNote has been deleted from the database.
func (on *OrdersNote) Deleted() bool {
	return on._deleted
}

// Get table name
func GetOrdersNoteTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "orders_note", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrdersNote to the database.
func (on *OrdersNote) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if on._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersNoteTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, orderid, note, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, on.Fid, on.Orderid, on.Note, on.CreatedAt, on.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, on.Fid, on.Orderid, on.Note, on.CreatedAt, on.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, on.Fid, on.Orderid, on.Note, on.CreatedAt, on.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	on.Onid = uint(id)
	on._exists = true

	return nil
}

// Update updates the OrdersNote in the database.
func (on *OrdersNote) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if on._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersNoteTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, orderid = ?, note = ?, created_at = ?, updated_at = ?` +
		` WHERE onid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, on.Fid, on.Orderid, on.Note, on.CreatedAt, on.UpdatedAt, on.Onid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, on.Fid, on.Orderid, on.Note, on.CreatedAt, on.UpdatedAt, on.Onid)
	} else {
		_, err = dbConn.Exec(sqlstr, on.Fid, on.Orderid, on.Note, on.CreatedAt, on.UpdatedAt, on.Onid)
	}
	return err
}

// Save saves the OrdersNote to the database.
func (on *OrdersNote) Save(ctx context.Context) error {
	if on.Exists() {
		return on.Update(ctx)
	}

	return on.Insert(ctx)
}

// Delete deletes the OrdersNote from the database.
func (on *OrdersNote) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if on._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrdersNoteTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE onid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, on.Onid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, on.Onid)
	} else {
		_, err = dbConn.Exec(sqlstr, on.Onid)
	}

	if err != nil {
		return err
	}

	// set deleted
	on._deleted = true

	return nil
}

// OrdersNoteByOnid retrieves a row from 'aypcddg.orders_note' as a OrdersNote.
//
// Generated from index 'orders_note_onid_pkey'.
func OrdersNoteByOnid(ctx context.Context, onid uint, key ...interface{}) (*OrdersNote, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrdersNoteTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`onid, fid, orderid, note, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE onid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, onid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	on := OrdersNote{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, onid).Scan(&on.Onid, &on.Fid, &on.Orderid, &on.Note, &on.CreatedAt, &on.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, onid).Scan(&on.Onid, &on.Fid, &on.Orderid, &on.Note, &on.CreatedAt, &on.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &on, nil
}
