// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// SelfLayout represents a row from 'aypcddg.self_layout'.
type SelfLayout struct {
	ID         int            `json:"id"`          // id
	Name       sql.NullString `json:"name"`        // name
	Fid        sql.NullInt64  `json:"fid"`         // fid
	Fsid       sql.NullInt64  `json:"fsid"`        // fsid
	HTMLHead   sql.NullString `json:"html_head"`   // html_head
	HTMLFoot   sql.NullString `json:"html_foot"`   // html_foot
	CSS        sql.NullString `json:"css"`         // css
	Navs       sql.NullString `json:"navs"`        // navs
	TemplateID sql.NullInt64  `json:"template_id"` // template_id
	IndexID    sql.NullString `json:"index_id"`    // index_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SelfLayout exists in the database.
func (sl *SelfLayout) Exists() bool { //self_layout
	return sl._exists
}

// Deleted provides information if the SelfLayout has been deleted from the database.
func (sl *SelfLayout) Deleted() bool {
	return sl._deleted
}

// Get table name
func GetSelfLayoutTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "self_layout", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SelfLayout to the database.
func (sl *SelfLayout) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sl._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfLayoutTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`name, fid, fsid, html_head, html_foot, css, navs, template_id, index_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sl.Name, sl.Fid, sl.Fsid, sl.HTMLHead, sl.HTMLFoot, sl.CSS, sl.Navs, sl.TemplateID, sl.IndexID)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sl.Name, sl.Fid, sl.Fsid, sl.HTMLHead, sl.HTMLFoot, sl.CSS, sl.Navs, sl.TemplateID, sl.IndexID)
	} else {
		res, err = dbConn.Exec(sqlstr, sl.Name, sl.Fid, sl.Fsid, sl.HTMLHead, sl.HTMLFoot, sl.CSS, sl.Navs, sl.TemplateID, sl.IndexID)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sl.ID = int(id)
	sl._exists = true

	return nil
}

// Update updates the SelfLayout in the database.
func (sl *SelfLayout) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfLayoutTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`name = ?, fid = ?, fsid = ?, html_head = ?, html_foot = ?, css = ?, navs = ?, template_id = ?, index_id = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sl.Name, sl.Fid, sl.Fsid, sl.HTMLHead, sl.HTMLFoot, sl.CSS, sl.Navs, sl.TemplateID, sl.IndexID, sl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sl.Name, sl.Fid, sl.Fsid, sl.HTMLHead, sl.HTMLFoot, sl.CSS, sl.Navs, sl.TemplateID, sl.IndexID, sl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sl.Name, sl.Fid, sl.Fsid, sl.HTMLHead, sl.HTMLFoot, sl.CSS, sl.Navs, sl.TemplateID, sl.IndexID, sl.ID)
	}
	return err
}

// Save saves the SelfLayout to the database.
func (sl *SelfLayout) Save(ctx context.Context) error {
	if sl.Exists() {
		return sl.Update(ctx)
	}

	return sl.Insert(ctx)
}

// Delete deletes the SelfLayout from the database.
func (sl *SelfLayout) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sl._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfLayoutTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sl.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sl._deleted = true

	return nil
}

// SelfLayoutByID retrieves a row from 'aypcddg.self_layout' as a SelfLayout.
//
// Generated from index 'self_layout_id_pkey'.
func SelfLayoutByID(ctx context.Context, id int, key ...interface{}) (*SelfLayout, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSelfLayoutTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, name, fid, fsid, html_head, html_foot, css, navs, template_id, index_id ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sl := SelfLayout{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sl.ID, &sl.Name, &sl.Fid, &sl.Fsid, &sl.HTMLHead, &sl.HTMLFoot, &sl.CSS, &sl.Navs, &sl.TemplateID, &sl.IndexID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sl.ID, &sl.Name, &sl.Fid, &sl.Fsid, &sl.HTMLHead, &sl.HTMLFoot, &sl.CSS, &sl.Navs, &sl.TemplateID, &sl.IndexID)
		if err != nil {
			return nil, err
		}
	}

	return &sl, nil
}
