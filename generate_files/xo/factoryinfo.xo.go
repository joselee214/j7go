// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryInfo represents a row from 'aypcddg.factory_info'.
type FactoryInfo struct {
	Fid                           uint           `json:"fid"`                              // fid
	ProvinceID                    sql.NullInt64  `json:"province_id"`                      // province_id
	CityID                        sql.NullInt64  `json:"city_id"`                          // city_id
	DistrictID                    sql.NullInt64  `json:"district_id"`                      // district_id
	Mobile                        sql.NullString `json:"mobile"`                           // mobile
	Qq                            sql.NullString `json:"qq"`                               // qq
	Email                         sql.NullString `json:"email"`                            // email
	Street                        sql.NullString `json:"street"`                           // street
	ShopAddress                   sql.NullString `json:"shop_address"`                     // shop_address
	Phone                         sql.NullString `json:"phone"`                            // phone
	Fax                           sql.NullString `json:"fax"`                              // fax
	Contact                       sql.NullString `json:"contact"`                          // contact
	ContractNumber                sql.NullString `json:"contract_number"`                  // contract_number
	ContractNote                  sql.NullString `json:"contract_note"`                    // contract_note
	CommercialLegal               sql.NullString `json:"commercial_legal"`                 // commercial_legal
	CommercialLicence             sql.NullString `json:"commercial_licence"`               // commercial_licence
	AccountBank                   sql.NullString `json:"account_bank"`                     // account_bank
	AccountNumber                 sql.NullString `json:"account_number"`                   // account_number
	BankName                      sql.NullString `json:"bank_name"`                        // bank_name
	CommercialLicencePic          sql.NullString `json:"commercial_licence_pic"`           // commercial_licence_pic
	TaxPic                        sql.NullString `json:"tax_pic"`                          // tax_pic
	CommercialCodePic             sql.NullString `json:"commercial_code_pic"`              // commercial_code_pic
	BankNamePic                   sql.NullString `json:"bank_name_pic"`                    // bank_name_pic
	CommercialRegPic              sql.NullString `json:"commercial_reg_pic"`               // commercial_reg_pic
	BrandPic                      sql.NullString `json:"brand_pic"`                        // brand_pic
	QualityPic                    sql.NullString `json:"quality_pic"`                      // quality_pic
	LegalIdcardPicFront           sql.NullString `json:"legal_idcard_pic_front"`           // legal_idcard_pic_front
	LegalIdcardPicBack            sql.NullString `json:"legal_idcard_pic_back"`            // legal_idcard_pic_back
	SpecialProductPic             sql.NullString `json:"special_product_pic"`              // special_product_pic
	BusinessType                  int            `json:"business_type"`                    // business_type
	SocialCode                    string         `json:"social_code"`                      // social_code
	FactoryCode                   string         `json:"factory_code"`                     // factory_code
	UserJob                       sql.NullString `json:"user_job"`                         // user_job
	UserIDCardNo                  sql.NullString `json:"user_id_card_no"`                  // user_id_card_no
	UserIDCardImageFront          sql.NullString `json:"user_id_card_image_front"`         // user_id_card_image_front
	UserIDCardImageBack           sql.NullString `json:"user_id_card_image_back"`          // user_id_card_image_back
	LegalUsername                 sql.NullString `json:"legal_username"`                   // legal_username
	LegalIDCardNo                 sql.NullString `json:"legal_id_card_no"`                 // legal_id_card_no
	LegalProvinceID               sql.NullInt64  `json:"legal_province_id"`                // legal_province_id
	LegalCityID                   sql.NullInt64  `json:"legal_city_id"`                    // legal_city_id
	LegalDistrictID               sql.NullInt64  `json:"legal_district_id"`                // legal_district_id
	LegalDetail                   sql.NullString `json:"legal_detail"`                     // legal_detail
	LegalIDCardImageFront         sql.NullString `json:"legal_id_card_image_front"`        // legal_id_card_image_front
	LegalIDCardImageBack          sql.NullString `json:"legal_id_card_image_back"`         // legal_id_card_image_back
	PowerOfAttorneyImage          sql.NullString `json:"power_of_attorney_image"`          // power_of_attorney_image
	BusinessLicenseImage          sql.NullString `json:"business_license_image"`           // business_license_image
	BusinessLicenseImageAccessory sql.NullString `json:"business_license_image_accessory"` // business_license_image_accessory
	OtherData                     sql.NullString `json:"other_data"`                       // other_data
	Remark                        sql.NullString `json:"remark"`                           // remark

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryInfo exists in the database.
func (fi *FactoryInfo) Exists() bool { //factory_info
	return fi._exists
}

// Deleted provides information if the FactoryInfo has been deleted from the database.
func (fi *FactoryInfo) Deleted() bool {
	return fi._deleted
}

// Get table name
func GetFactoryInfoTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_info", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryInfo to the database.
func (fi *FactoryInfo) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fi._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, province_id, city_id, district_id, mobile, qq, email, street, shop_address, phone, fax, contact, contract_number, contract_note, commercial_legal, commercial_licence, account_bank, account_number, bank_name, commercial_licence_pic, tax_pic, commercial_code_pic, bank_name_pic, commercial_reg_pic, brand_pic, quality_pic, legal_idcard_pic_front, legal_idcard_pic_back, special_product_pic, business_type, social_code, factory_code, user_job, user_id_card_no, user_id_card_image_front, user_id_card_image_back, legal_username, legal_id_card_no, legal_province_id, legal_city_id, legal_district_id, legal_detail, legal_id_card_image_front, legal_id_card_image_back, power_of_attorney_image, business_license_image, business_license_image_accessory, other_data, remark` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fi.Fid, fi.ProvinceID, fi.CityID, fi.DistrictID, fi.Mobile, fi.Qq, fi.Email, fi.Street, fi.ShopAddress, fi.Phone, fi.Fax, fi.Contact, fi.ContractNumber, fi.ContractNote, fi.CommercialLegal, fi.CommercialLicence, fi.AccountBank, fi.AccountNumber, fi.BankName, fi.CommercialLicencePic, fi.TaxPic, fi.CommercialCodePic, fi.BankNamePic, fi.CommercialRegPic, fi.BrandPic, fi.QualityPic, fi.LegalIdcardPicFront, fi.LegalIdcardPicBack, fi.SpecialProductPic, fi.BusinessType, fi.SocialCode, fi.FactoryCode, fi.UserJob, fi.UserIDCardNo, fi.UserIDCardImageFront, fi.UserIDCardImageBack, fi.LegalUsername, fi.LegalIDCardNo, fi.LegalProvinceID, fi.LegalCityID, fi.LegalDistrictID, fi.LegalDetail, fi.LegalIDCardImageFront, fi.LegalIDCardImageBack, fi.PowerOfAttorneyImage, fi.BusinessLicenseImage, fi.BusinessLicenseImageAccessory, fi.OtherData, fi.Remark)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, fi.Fid, fi.ProvinceID, fi.CityID, fi.DistrictID, fi.Mobile, fi.Qq, fi.Email, fi.Street, fi.ShopAddress, fi.Phone, fi.Fax, fi.Contact, fi.ContractNumber, fi.ContractNote, fi.CommercialLegal, fi.CommercialLicence, fi.AccountBank, fi.AccountNumber, fi.BankName, fi.CommercialLicencePic, fi.TaxPic, fi.CommercialCodePic, fi.BankNamePic, fi.CommercialRegPic, fi.BrandPic, fi.QualityPic, fi.LegalIdcardPicFront, fi.LegalIdcardPicBack, fi.SpecialProductPic, fi.BusinessType, fi.SocialCode, fi.FactoryCode, fi.UserJob, fi.UserIDCardNo, fi.UserIDCardImageFront, fi.UserIDCardImageBack, fi.LegalUsername, fi.LegalIDCardNo, fi.LegalProvinceID, fi.LegalCityID, fi.LegalDistrictID, fi.LegalDetail, fi.LegalIDCardImageFront, fi.LegalIDCardImageBack, fi.PowerOfAttorneyImage, fi.BusinessLicenseImage, fi.BusinessLicenseImageAccessory, fi.OtherData, fi.Remark)
	} else {
		res, err = dbConn.Exec(sqlstr, fi.Fid, fi.ProvinceID, fi.CityID, fi.DistrictID, fi.Mobile, fi.Qq, fi.Email, fi.Street, fi.ShopAddress, fi.Phone, fi.Fax, fi.Contact, fi.ContractNumber, fi.ContractNote, fi.CommercialLegal, fi.CommercialLicence, fi.AccountBank, fi.AccountNumber, fi.BankName, fi.CommercialLicencePic, fi.TaxPic, fi.CommercialCodePic, fi.BankNamePic, fi.CommercialRegPic, fi.BrandPic, fi.QualityPic, fi.LegalIdcardPicFront, fi.LegalIdcardPicBack, fi.SpecialProductPic, fi.BusinessType, fi.SocialCode, fi.FactoryCode, fi.UserJob, fi.UserIDCardNo, fi.UserIDCardImageFront, fi.UserIDCardImageBack, fi.LegalUsername, fi.LegalIDCardNo, fi.LegalProvinceID, fi.LegalCityID, fi.LegalDistrictID, fi.LegalDetail, fi.LegalIDCardImageFront, fi.LegalIDCardImageBack, fi.PowerOfAttorneyImage, fi.BusinessLicenseImage, fi.BusinessLicenseImageAccessory, fi.OtherData, fi.Remark)
	}

	if err != nil {
		return err
	}

	// set existence
	fi._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fi.Fid = uint(id)
	fi._exists = true

	return nil
}

// Update updates the FactoryInfo in the database.
func (fi *FactoryInfo) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`province_id = ?, city_id = ?, district_id = ?, mobile = ?, qq = ?, email = ?, street = ?, shop_address = ?, phone = ?, fax = ?, contact = ?, contract_number = ?, contract_note = ?, commercial_legal = ?, commercial_licence = ?, account_bank = ?, account_number = ?, bank_name = ?, commercial_licence_pic = ?, tax_pic = ?, commercial_code_pic = ?, bank_name_pic = ?, commercial_reg_pic = ?, brand_pic = ?, quality_pic = ?, legal_idcard_pic_front = ?, legal_idcard_pic_back = ?, special_product_pic = ?, business_type = ?, social_code = ?, factory_code = ?, user_job = ?, user_id_card_no = ?, user_id_card_image_front = ?, user_id_card_image_back = ?, legal_username = ?, legal_id_card_no = ?, legal_province_id = ?, legal_city_id = ?, legal_district_id = ?, legal_detail = ?, legal_id_card_image_front = ?, legal_id_card_image_back = ?, power_of_attorney_image = ?, business_license_image = ?, business_license_image_accessory = ?, other_data = ?, remark = ?` +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fi.ProvinceID, fi.CityID, fi.DistrictID, fi.Mobile, fi.Qq, fi.Email, fi.Street, fi.ShopAddress, fi.Phone, fi.Fax, fi.Contact, fi.ContractNumber, fi.ContractNote, fi.CommercialLegal, fi.CommercialLicence, fi.AccountBank, fi.AccountNumber, fi.BankName, fi.CommercialLicencePic, fi.TaxPic, fi.CommercialCodePic, fi.BankNamePic, fi.CommercialRegPic, fi.BrandPic, fi.QualityPic, fi.LegalIdcardPicFront, fi.LegalIdcardPicBack, fi.SpecialProductPic, fi.BusinessType, fi.SocialCode, fi.FactoryCode, fi.UserJob, fi.UserIDCardNo, fi.UserIDCardImageFront, fi.UserIDCardImageBack, fi.LegalUsername, fi.LegalIDCardNo, fi.LegalProvinceID, fi.LegalCityID, fi.LegalDistrictID, fi.LegalDetail, fi.LegalIDCardImageFront, fi.LegalIDCardImageBack, fi.PowerOfAttorneyImage, fi.BusinessLicenseImage, fi.BusinessLicenseImageAccessory, fi.OtherData, fi.Remark, fi.Fid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fi.ProvinceID, fi.CityID, fi.DistrictID, fi.Mobile, fi.Qq, fi.Email, fi.Street, fi.ShopAddress, fi.Phone, fi.Fax, fi.Contact, fi.ContractNumber, fi.ContractNote, fi.CommercialLegal, fi.CommercialLicence, fi.AccountBank, fi.AccountNumber, fi.BankName, fi.CommercialLicencePic, fi.TaxPic, fi.CommercialCodePic, fi.BankNamePic, fi.CommercialRegPic, fi.BrandPic, fi.QualityPic, fi.LegalIdcardPicFront, fi.LegalIdcardPicBack, fi.SpecialProductPic, fi.BusinessType, fi.SocialCode, fi.FactoryCode, fi.UserJob, fi.UserIDCardNo, fi.UserIDCardImageFront, fi.UserIDCardImageBack, fi.LegalUsername, fi.LegalIDCardNo, fi.LegalProvinceID, fi.LegalCityID, fi.LegalDistrictID, fi.LegalDetail, fi.LegalIDCardImageFront, fi.LegalIDCardImageBack, fi.PowerOfAttorneyImage, fi.BusinessLicenseImage, fi.BusinessLicenseImageAccessory, fi.OtherData, fi.Remark, fi.Fid)
	} else {
		_, err = dbConn.Exec(sqlstr, fi.ProvinceID, fi.CityID, fi.DistrictID, fi.Mobile, fi.Qq, fi.Email, fi.Street, fi.ShopAddress, fi.Phone, fi.Fax, fi.Contact, fi.ContractNumber, fi.ContractNote, fi.CommercialLegal, fi.CommercialLicence, fi.AccountBank, fi.AccountNumber, fi.BankName, fi.CommercialLicencePic, fi.TaxPic, fi.CommercialCodePic, fi.BankNamePic, fi.CommercialRegPic, fi.BrandPic, fi.QualityPic, fi.LegalIdcardPicFront, fi.LegalIdcardPicBack, fi.SpecialProductPic, fi.BusinessType, fi.SocialCode, fi.FactoryCode, fi.UserJob, fi.UserIDCardNo, fi.UserIDCardImageFront, fi.UserIDCardImageBack, fi.LegalUsername, fi.LegalIDCardNo, fi.LegalProvinceID, fi.LegalCityID, fi.LegalDistrictID, fi.LegalDetail, fi.LegalIDCardImageFront, fi.LegalIDCardImageBack, fi.PowerOfAttorneyImage, fi.BusinessLicenseImage, fi.BusinessLicenseImageAccessory, fi.OtherData, fi.Remark, fi.Fid)
	}
	return err
}

// Save saves the FactoryInfo to the database.
func (fi *FactoryInfo) Save(ctx context.Context) error {
	if fi.Exists() {
		return fi.Update(ctx)
	}

	return fi.Insert(ctx)
}

// Delete deletes the FactoryInfo from the database.
func (fi *FactoryInfo) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fi._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryInfoTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fi.Fid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fi.Fid)
	} else {
		_, err = dbConn.Exec(sqlstr, fi.Fid)
	}

	if err != nil {
		return err
	}

	// set deleted
	fi._deleted = true

	return nil
}

// FactoryInfoByFid retrieves a row from 'aypcddg.factory_info' as a FactoryInfo.
//
// Generated from index 'factory_info_fid_pkey'.
func FactoryInfoByFid(ctx context.Context, fid uint, key ...interface{}) (*FactoryInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fid, province_id, city_id, district_id, mobile, qq, email, street, shop_address, phone, fax, contact, contract_number, contract_note, commercial_legal, commercial_licence, account_bank, account_number, bank_name, commercial_licence_pic, tax_pic, commercial_code_pic, bank_name_pic, commercial_reg_pic, brand_pic, quality_pic, legal_idcard_pic_front, legal_idcard_pic_back, special_product_pic, business_type, social_code, factory_code, user_job, user_id_card_no, user_id_card_image_front, user_id_card_image_back, legal_username, legal_id_card_no, legal_province_id, legal_city_id, legal_district_id, legal_detail, legal_id_card_image_front, legal_id_card_image_back, power_of_attorney_image, business_license_image, business_license_image_accessory, other_data, remark ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fi := FactoryInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fid).Scan(&fi.Fid, &fi.ProvinceID, &fi.CityID, &fi.DistrictID, &fi.Mobile, &fi.Qq, &fi.Email, &fi.Street, &fi.ShopAddress, &fi.Phone, &fi.Fax, &fi.Contact, &fi.ContractNumber, &fi.ContractNote, &fi.CommercialLegal, &fi.CommercialLicence, &fi.AccountBank, &fi.AccountNumber, &fi.BankName, &fi.CommercialLicencePic, &fi.TaxPic, &fi.CommercialCodePic, &fi.BankNamePic, &fi.CommercialRegPic, &fi.BrandPic, &fi.QualityPic, &fi.LegalIdcardPicFront, &fi.LegalIdcardPicBack, &fi.SpecialProductPic, &fi.BusinessType, &fi.SocialCode, &fi.FactoryCode, &fi.UserJob, &fi.UserIDCardNo, &fi.UserIDCardImageFront, &fi.UserIDCardImageBack, &fi.LegalUsername, &fi.LegalIDCardNo, &fi.LegalProvinceID, &fi.LegalCityID, &fi.LegalDistrictID, &fi.LegalDetail, &fi.LegalIDCardImageFront, &fi.LegalIDCardImageBack, &fi.PowerOfAttorneyImage, &fi.BusinessLicenseImage, &fi.BusinessLicenseImageAccessory, &fi.OtherData, &fi.Remark)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fid).Scan(&fi.Fid, &fi.ProvinceID, &fi.CityID, &fi.DistrictID, &fi.Mobile, &fi.Qq, &fi.Email, &fi.Street, &fi.ShopAddress, &fi.Phone, &fi.Fax, &fi.Contact, &fi.ContractNumber, &fi.ContractNote, &fi.CommercialLegal, &fi.CommercialLicence, &fi.AccountBank, &fi.AccountNumber, &fi.BankName, &fi.CommercialLicencePic, &fi.TaxPic, &fi.CommercialCodePic, &fi.BankNamePic, &fi.CommercialRegPic, &fi.BrandPic, &fi.QualityPic, &fi.LegalIdcardPicFront, &fi.LegalIdcardPicBack, &fi.SpecialProductPic, &fi.BusinessType, &fi.SocialCode, &fi.FactoryCode, &fi.UserJob, &fi.UserIDCardNo, &fi.UserIDCardImageFront, &fi.UserIDCardImageBack, &fi.LegalUsername, &fi.LegalIDCardNo, &fi.LegalProvinceID, &fi.LegalCityID, &fi.LegalDistrictID, &fi.LegalDetail, &fi.LegalIDCardImageFront, &fi.LegalIDCardImageBack, &fi.PowerOfAttorneyImage, &fi.BusinessLicenseImage, &fi.BusinessLicenseImageAccessory, &fi.OtherData, &fi.Remark)
		if err != nil {
			return nil, err
		}
	}

	return &fi, nil
}

// FactoryInfoByFid retrieves a row from 'aypcddg.factory_info' as a FactoryInfo.
//
// Generated from index 'fid'.
func FactoryInfoByFid(ctx context.Context, fid uint, key ...interface{}) (*FactoryInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fid, province_id, city_id, district_id, mobile, qq, email, street, shop_address, phone, fax, contact, contract_number, contract_note, commercial_legal, commercial_licence, account_bank, account_number, bank_name, commercial_licence_pic, tax_pic, commercial_code_pic, bank_name_pic, commercial_reg_pic, brand_pic, quality_pic, legal_idcard_pic_front, legal_idcard_pic_back, special_product_pic, business_type, social_code, factory_code, user_job, user_id_card_no, user_id_card_image_front, user_id_card_image_back, legal_username, legal_id_card_no, legal_province_id, legal_city_id, legal_district_id, legal_detail, legal_id_card_image_front, legal_id_card_image_back, power_of_attorney_image, business_license_image, business_license_image_accessory, other_data, remark ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fi := FactoryInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fid).Scan(&fi.Fid, &fi.ProvinceID, &fi.CityID, &fi.DistrictID, &fi.Mobile, &fi.Qq, &fi.Email, &fi.Street, &fi.ShopAddress, &fi.Phone, &fi.Fax, &fi.Contact, &fi.ContractNumber, &fi.ContractNote, &fi.CommercialLegal, &fi.CommercialLicence, &fi.AccountBank, &fi.AccountNumber, &fi.BankName, &fi.CommercialLicencePic, &fi.TaxPic, &fi.CommercialCodePic, &fi.BankNamePic, &fi.CommercialRegPic, &fi.BrandPic, &fi.QualityPic, &fi.LegalIdcardPicFront, &fi.LegalIdcardPicBack, &fi.SpecialProductPic, &fi.BusinessType, &fi.SocialCode, &fi.FactoryCode, &fi.UserJob, &fi.UserIDCardNo, &fi.UserIDCardImageFront, &fi.UserIDCardImageBack, &fi.LegalUsername, &fi.LegalIDCardNo, &fi.LegalProvinceID, &fi.LegalCityID, &fi.LegalDistrictID, &fi.LegalDetail, &fi.LegalIDCardImageFront, &fi.LegalIDCardImageBack, &fi.PowerOfAttorneyImage, &fi.BusinessLicenseImage, &fi.BusinessLicenseImageAccessory, &fi.OtherData, &fi.Remark)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fid).Scan(&fi.Fid, &fi.ProvinceID, &fi.CityID, &fi.DistrictID, &fi.Mobile, &fi.Qq, &fi.Email, &fi.Street, &fi.ShopAddress, &fi.Phone, &fi.Fax, &fi.Contact, &fi.ContractNumber, &fi.ContractNote, &fi.CommercialLegal, &fi.CommercialLicence, &fi.AccountBank, &fi.AccountNumber, &fi.BankName, &fi.CommercialLicencePic, &fi.TaxPic, &fi.CommercialCodePic, &fi.BankNamePic, &fi.CommercialRegPic, &fi.BrandPic, &fi.QualityPic, &fi.LegalIdcardPicFront, &fi.LegalIdcardPicBack, &fi.SpecialProductPic, &fi.BusinessType, &fi.SocialCode, &fi.FactoryCode, &fi.UserJob, &fi.UserIDCardNo, &fi.UserIDCardImageFront, &fi.UserIDCardImageBack, &fi.LegalUsername, &fi.LegalIDCardNo, &fi.LegalProvinceID, &fi.LegalCityID, &fi.LegalDistrictID, &fi.LegalDetail, &fi.LegalIDCardImageFront, &fi.LegalIDCardImageBack, &fi.PowerOfAttorneyImage, &fi.BusinessLicenseImage, &fi.BusinessLicenseImageAccessory, &fi.OtherData, &fi.Remark)
		if err != nil {
			return nil, err
		}
	}

	return &fi, nil
}
