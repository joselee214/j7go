// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Migration represents a row from 'aypcddg.migrations'.
type Migration struct {
	ID        uint   `json:"id"`        // id
	Migration string `json:"migration"` // migration
	Batch     int    `json:"batch"`     // batch

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Migration exists in the database.
func (m *Migration) Exists() bool { //migrations
	return m._exists
}

// Deleted provides information if the Migration has been deleted from the database.
func (m *Migration) Deleted() bool {
	return m._deleted
}

// Get table name
func GetMigrationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "migrations", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Migration to the database.
func (m *Migration) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMigrationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`migration, batch` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, m.Migration, m.Batch)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, m.Migration, m.Batch)
	} else {
		res, err = dbConn.Exec(sqlstr, m.Migration, m.Batch)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = uint(id)
	m._exists = true

	return nil
}

// Update updates the Migration in the database.
func (m *Migration) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMigrationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`migration = ?, batch = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, m.Migration, m.Batch, m.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, m.Migration, m.Batch, m.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, m.Migration, m.Batch, m.ID)
	}
	return err
}

// Save saves the Migration to the database.
func (m *Migration) Save(ctx context.Context) error {
	if m.Exists() {
		return m.Update(ctx)
	}

	return m.Insert(ctx)
}

// Delete deletes the Migration from the database.
func (m *Migration) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if m._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMigrationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, m.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, m.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, m.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MigrationByID retrieves a row from 'aypcddg.migrations' as a Migration.
//
// Generated from index 'migrations_id_pkey'.
func MigrationByID(ctx context.Context, id uint, key ...interface{}) (*Migration, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMigrationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, migration, batch ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	m := Migration{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&m.ID, &m.Migration, &m.Batch)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&m.ID, &m.Migration, &m.Batch)
		if err != nil {
			return nil, err
		}
	}

	return &m, nil
}
