// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryGoodsExtTp represents a row from 'aypcddg.factory_goods_ext_tp'.
type FactoryGoodsExtTp struct {
	Fgtid   uint64         `json:"fgtid"`   // fgtid
	Fid     uint64         `json:"fid"`     // fid
	Title   sql.NullString `json:"title"`   // title
	Content sql.NullString `json:"content"` // content
	Tp      sql.NullString `json:"tp"`      // tp
	Created uint           `json:"created"` // created
	Updated uint           `json:"updated"` // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryGoodsExtTp exists in the database.
func (fget *FactoryGoodsExtTp) Exists() bool { //factory_goods_ext_tp
	return fget._exists
}

// Deleted provides information if the FactoryGoodsExtTp has been deleted from the database.
func (fget *FactoryGoodsExtTp) Deleted() bool {
	return fget._deleted
}

// Get table name
func GetFactoryGoodsExtTpTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_goods_ext_tp", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryGoodsExtTp to the database.
func (fget *FactoryGoodsExtTp) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fget._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryGoodsExtTpTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, title, content, tp, created, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fget.Fid, fget.Title, fget.Content, fget.Tp, fget.Created, fget.Updated)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fget.Fid, fget.Title, fget.Content, fget.Tp, fget.Created, fget.Updated)
	} else {
		res, err = dbConn.Exec(sqlstr, fget.Fid, fget.Title, fget.Content, fget.Tp, fget.Created, fget.Updated)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fget.Fgtid = uint64(id)
	fget._exists = true

	return nil
}

// Update updates the FactoryGoodsExtTp in the database.
func (fget *FactoryGoodsExtTp) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fget._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryGoodsExtTpTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, title = ?, content = ?, tp = ?, created = ?, updated = ?` +
		` WHERE fgtid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fget.Fid, fget.Title, fget.Content, fget.Tp, fget.Created, fget.Updated, fget.Fgtid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fget.Fid, fget.Title, fget.Content, fget.Tp, fget.Created, fget.Updated, fget.Fgtid)
	} else {
		_, err = dbConn.Exec(sqlstr, fget.Fid, fget.Title, fget.Content, fget.Tp, fget.Created, fget.Updated, fget.Fgtid)
	}
	return err
}

// Save saves the FactoryGoodsExtTp to the database.
func (fget *FactoryGoodsExtTp) Save(ctx context.Context) error {
	if fget.Exists() {
		return fget.Update(ctx)
	}

	return fget.Insert(ctx)
}

// Delete deletes the FactoryGoodsExtTp from the database.
func (fget *FactoryGoodsExtTp) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fget._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryGoodsExtTpTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE fgtid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fget.Fgtid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fget.Fgtid)
	} else {
		_, err = dbConn.Exec(sqlstr, fget.Fgtid)
	}

	if err != nil {
		return err
	}

	// set deleted
	fget._deleted = true

	return nil
}

// FactoryGoodsExtTpByFgtid retrieves a row from 'aypcddg.factory_goods_ext_tp' as a FactoryGoodsExtTp.
//
// Generated from index 'factory_goods_ext_tp_fgtid_pkey'.
func FactoryGoodsExtTpByFgtid(ctx context.Context, fgtid uint64, key ...interface{}) (*FactoryGoodsExtTp, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryGoodsExtTpTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fgtid, fid, title, content, tp, created, updated ` +
		`FROM ` + tableName +
		` WHERE fgtid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fgtid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fget := FactoryGoodsExtTp{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fgtid).Scan(&fget.Fgtid, &fget.Fid, &fget.Title, &fget.Content, &fget.Tp, &fget.Created, &fget.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fgtid).Scan(&fget.Fgtid, &fget.Fid, &fget.Title, &fget.Content, &fget.Tp, &fget.Created, &fget.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &fget, nil
}

// FactoryGoodsExtTpsByFid retrieves a row from 'aypcddg.factory_goods_ext_tp' as a FactoryGoodsExtTp.
//
// Generated from index 'fid'.
func FactoryGoodsExtTpsByFid(ctx context.Context, fid uint64, key ...interface{}) ([]*FactoryGoodsExtTp, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryGoodsExtTpTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fgtid, fid, title, content, tp, created, updated ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryGoodsExtTp, 0)
	for queryData.Next() {
		fget := FactoryGoodsExtTp{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fget.Fgtid, &fget.Fid, &fget.Title, &fget.Content, &fget.Tp, &fget.Created, &fget.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &fget)
	}

	return res, nil
}
