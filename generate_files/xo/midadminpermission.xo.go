// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// MidAdminPermission represents a row from 'aypcddg.mid_admin_permissions'.
type MidAdminPermission struct {
	ID         uint           `json:"id"`          // id
	Name       string         `json:"name"`        // name
	Slug       string         `json:"slug"`        // slug
	HTTPMethod sql.NullString `json:"http_method"` // http_method
	HTTPPath   sql.NullString `json:"http_path"`   // http_path
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MidAdminPermission exists in the database.
func (mp *MidAdminPermission) Exists() bool { //mid_admin_permissions
	return mp._exists
}

// Deleted provides information if the MidAdminPermission has been deleted from the database.
func (mp *MidAdminPermission) Deleted() bool {
	return mp._deleted
}

// Get table name
func GetMidAdminPermissionTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "mid_admin_permissions", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the MidAdminPermission to the database.
func (mp *MidAdminPermission) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if mp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminPermissionTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`name, slug, http_method, http_path, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mp.Name, mp.Slug, mp.HTTPMethod, mp.HTTPPath, mp.CreatedAt, mp.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, mp.Name, mp.Slug, mp.HTTPMethod, mp.HTTPPath, mp.CreatedAt, mp.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, mp.Name, mp.Slug, mp.HTTPMethod, mp.HTTPPath, mp.CreatedAt, mp.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mp.ID = uint(id)
	mp._exists = true

	return nil
}

// Update updates the MidAdminPermission in the database.
func (mp *MidAdminPermission) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminPermissionTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`name = ?, slug = ?, http_method = ?, http_path = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mp.Name, mp.Slug, mp.HTTPMethod, mp.HTTPPath, mp.CreatedAt, mp.UpdatedAt, mp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mp.Name, mp.Slug, mp.HTTPMethod, mp.HTTPPath, mp.CreatedAt, mp.UpdatedAt, mp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mp.Name, mp.Slug, mp.HTTPMethod, mp.HTTPPath, mp.CreatedAt, mp.UpdatedAt, mp.ID)
	}
	return err
}

// Save saves the MidAdminPermission to the database.
func (mp *MidAdminPermission) Save(ctx context.Context) error {
	if mp.Exists() {
		return mp.Update(ctx)
	}

	return mp.Insert(ctx)
}

// Delete deletes the MidAdminPermission from the database.
func (mp *MidAdminPermission) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminPermissionTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mp.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	mp._deleted = true

	return nil
}

// MidAdminPermissionByID retrieves a row from 'aypcddg.mid_admin_permissions' as a MidAdminPermission.
//
// Generated from index 'mid_admin_permissions_id_pkey'.
func MidAdminPermissionByID(ctx context.Context, id uint, key ...interface{}) (*MidAdminPermission, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidAdminPermissionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, name, slug, http_method, http_path, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mp := MidAdminPermission{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&mp.ID, &mp.Name, &mp.Slug, &mp.HTTPMethod, &mp.HTTPPath, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&mp.ID, &mp.Name, &mp.Slug, &mp.HTTPMethod, &mp.HTTPPath, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mp, nil
}

// MidAdminPermissionByName retrieves a row from 'aypcddg.mid_admin_permissions' as a MidAdminPermission.
//
// Generated from index 'mid_admin_permissions_name_unique'.
func MidAdminPermissionByName(ctx context.Context, name string, key ...interface{}) (*MidAdminPermission, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidAdminPermissionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, name, slug, http_method, http_path, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE name = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, name)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mp := MidAdminPermission{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, name).Scan(&mp.ID, &mp.Name, &mp.Slug, &mp.HTTPMethod, &mp.HTTPPath, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, name).Scan(&mp.ID, &mp.Name, &mp.Slug, &mp.HTTPMethod, &mp.HTTPPath, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mp, nil
}

// MidAdminPermissionBySlug retrieves a row from 'aypcddg.mid_admin_permissions' as a MidAdminPermission.
//
// Generated from index 'mid_admin_permissions_slug_unique'.
func MidAdminPermissionBySlug(ctx context.Context, slug string, key ...interface{}) (*MidAdminPermission, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidAdminPermissionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, name, slug, http_method, http_path, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE slug = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, slug)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mp := MidAdminPermission{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, slug).Scan(&mp.ID, &mp.Name, &mp.Slug, &mp.HTTPMethod, &mp.HTTPPath, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, slug).Scan(&mp.ID, &mp.Name, &mp.Slug, &mp.HTTPMethod, &mp.HTTPPath, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mp, nil
}
