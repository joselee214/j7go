// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// AdminHelpedit represents a row from 'aypcddg.admin_helpedit'.
type AdminHelpedit struct {
	Hkey    string `json:"hkey"`     // hkey
	KeyDesp string `json:"key_desp"` // key_desp
	Title   string `json:"title"`    // title
	Content string `json:"content"`  // content

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AdminHelpedit exists in the database.
func (ah *AdminHelpedit) Exists() bool { //admin_helpedit
	return ah._exists
}

// Deleted provides information if the AdminHelpedit has been deleted from the database.
func (ah *AdminHelpedit) Deleted() bool {
	return ah._deleted
}

// Get table name
func GetAdminHelpeditTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "admin_helpedit", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AdminHelpedit to the database.
func (ah *AdminHelpedit) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ah._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdminHelpeditTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`hkey, key_desp, title, content` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ah.Hkey, ah.KeyDesp, ah.Title, ah.Content)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, ah.Hkey, ah.KeyDesp, ah.Title, ah.Content)
	} else {
		res, err = dbConn.Exec(sqlstr, ah.Hkey, ah.KeyDesp, ah.Title, ah.Content)
	}

	if err != nil {
		return err
	}

	// set existence
	ah._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ah.Hkey = string(id)
	ah._exists = true

	return nil
}

// Update updates the AdminHelpedit in the database.
func (ah *AdminHelpedit) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ah._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdminHelpeditTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`key_desp = ?, title = ?, content = ?` +
		` WHERE hkey = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ah.KeyDesp, ah.Title, ah.Content, ah.Hkey)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ah.KeyDesp, ah.Title, ah.Content, ah.Hkey)
	} else {
		_, err = dbConn.Exec(sqlstr, ah.KeyDesp, ah.Title, ah.Content, ah.Hkey)
	}
	return err
}

// Save saves the AdminHelpedit to the database.
func (ah *AdminHelpedit) Save(ctx context.Context) error {
	if ah.Exists() {
		return ah.Update(ctx)
	}

	return ah.Insert(ctx)
}

// Delete deletes the AdminHelpedit from the database.
func (ah *AdminHelpedit) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ah._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdminHelpeditTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE hkey = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ah.Hkey)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ah.Hkey)
	} else {
		_, err = dbConn.Exec(sqlstr, ah.Hkey)
	}

	if err != nil {
		return err
	}

	// set deleted
	ah._deleted = true

	return nil
}

// AdminHelpeditByHkey retrieves a row from 'aypcddg.admin_helpedit' as a AdminHelpedit.
//
// Generated from index 'admin_helpedit_hkey_pkey'.
func AdminHelpeditByHkey(ctx context.Context, hkey string, key ...interface{}) (*AdminHelpedit, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdminHelpeditTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`hkey, key_desp, title, content ` +
		`FROM ` + tableName +
		` WHERE hkey = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hkey)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ah := AdminHelpedit{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, hkey).Scan(&ah.Hkey, &ah.KeyDesp, &ah.Title, &ah.Content)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, hkey).Scan(&ah.Hkey, &ah.KeyDesp, &ah.Title, &ah.Content)
		if err != nil {
			return nil, err
		}
	}

	return &ah, nil
}
