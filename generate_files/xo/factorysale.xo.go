// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// FactorySale represents a row from 'aypcddg.factory_sale'.
type FactorySale struct {
	Fsid       uint           `json:"fsid"`         // fsid
	Fid        int            `json:"fid"`          // fid
	Sid        sql.NullInt64  `json:"sid"`          // sid
	Suid       sql.NullInt64  `json:"suid"`         // suid
	Path       sql.NullString `json:"path"`         // path
	Status     int8           `json:"status"`       // status
	SaleStauts int8           `json:"sale_stauts"`  // sale_stauts
	AcceptAuth int8           `json:"accept_auth"`  // accept_auth
	WxMchID    sql.NullString `json:"wx_mch_id"`    // wx_mch_id
	Title      sql.NullString `json:"title"`        // title
	Areadesc   sql.NullString `json:"areadesc"`     // areadesc
	Areaselect sql.NullString `json:"areaselect"`   // areaselect
	Created    mysql.NullTime `json:"created"`      // created
	HasSaleNum uint           `json:"has_sale_num"` // has_sale_num

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactorySale exists in the database.
func (fs *FactorySale) Exists() bool { //factory_sale
	return fs._exists
}

// Deleted provides information if the FactorySale has been deleted from the database.
func (fs *FactorySale) Deleted() bool {
	return fs._deleted
}

// Get table name
func GetFactorySaleTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_sale", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactorySale to the database.
func (fs *FactorySale) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fs._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySaleTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, sid, suid, path, status, sale_stauts, accept_auth, wx_mch_id, title, areadesc, areaselect, created, has_sale_num` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fs.Fid, fs.Sid, fs.Suid, fs.Path, fs.Status, fs.SaleStauts, fs.AcceptAuth, fs.WxMchID, fs.Title, fs.Areadesc, fs.Areaselect, fs.Created, fs.HasSaleNum)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fs.Fid, fs.Sid, fs.Suid, fs.Path, fs.Status, fs.SaleStauts, fs.AcceptAuth, fs.WxMchID, fs.Title, fs.Areadesc, fs.Areaselect, fs.Created, fs.HasSaleNum)
	} else {
		res, err = dbConn.Exec(sqlstr, fs.Fid, fs.Sid, fs.Suid, fs.Path, fs.Status, fs.SaleStauts, fs.AcceptAuth, fs.WxMchID, fs.Title, fs.Areadesc, fs.Areaselect, fs.Created, fs.HasSaleNum)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fs.Fsid = uint(id)
	fs._exists = true

	return nil
}

// Update updates the FactorySale in the database.
func (fs *FactorySale) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySaleTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, sid = ?, suid = ?, path = ?, status = ?, sale_stauts = ?, accept_auth = ?, wx_mch_id = ?, title = ?, areadesc = ?, areaselect = ?, created = ?, has_sale_num = ?` +
		` WHERE fsid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fs.Fid, fs.Sid, fs.Suid, fs.Path, fs.Status, fs.SaleStauts, fs.AcceptAuth, fs.WxMchID, fs.Title, fs.Areadesc, fs.Areaselect, fs.Created, fs.HasSaleNum, fs.Fsid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fs.Fid, fs.Sid, fs.Suid, fs.Path, fs.Status, fs.SaleStauts, fs.AcceptAuth, fs.WxMchID, fs.Title, fs.Areadesc, fs.Areaselect, fs.Created, fs.HasSaleNum, fs.Fsid)
	} else {
		_, err = dbConn.Exec(sqlstr, fs.Fid, fs.Sid, fs.Suid, fs.Path, fs.Status, fs.SaleStauts, fs.AcceptAuth, fs.WxMchID, fs.Title, fs.Areadesc, fs.Areaselect, fs.Created, fs.HasSaleNum, fs.Fsid)
	}
	return err
}

// Save saves the FactorySale to the database.
func (fs *FactorySale) Save(ctx context.Context) error {
	if fs.Exists() {
		return fs.Update(ctx)
	}

	return fs.Insert(ctx)
}

// Delete deletes the FactorySale from the database.
func (fs *FactorySale) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fs._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySaleTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE fsid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fs.Fsid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fs.Fsid)
	} else {
		_, err = dbConn.Exec(sqlstr, fs.Fsid)
	}

	if err != nil {
		return err
	}

	// set deleted
	fs._deleted = true

	return nil
}

// FactorySaleByFsid retrieves a row from 'aypcddg.factory_sale' as a FactorySale.
//
// Generated from index 'factory_sale_fsid_pkey'.
func FactorySaleByFsid(ctx context.Context, fsid uint, key ...interface{}) (*FactorySale, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySaleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fsid, fid, sid, suid, path, status, sale_stauts, accept_auth, wx_mch_id, title, areadesc, areaselect, created, has_sale_num ` +
		`FROM ` + tableName +
		` WHERE fsid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fsid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fs := FactorySale{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fsid).Scan(&fs.Fsid, &fs.Fid, &fs.Sid, &fs.Suid, &fs.Path, &fs.Status, &fs.SaleStauts, &fs.AcceptAuth, &fs.WxMchID, &fs.Title, &fs.Areadesc, &fs.Areaselect, &fs.Created, &fs.HasSaleNum)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fsid).Scan(&fs.Fsid, &fs.Fid, &fs.Sid, &fs.Suid, &fs.Path, &fs.Status, &fs.SaleStauts, &fs.AcceptAuth, &fs.WxMchID, &fs.Title, &fs.Areadesc, &fs.Areaselect, &fs.Created, &fs.HasSaleNum)
		if err != nil {
			return nil, err
		}
	}

	return &fs, nil
}

// FactorySalesByFid retrieves a row from 'aypcddg.factory_sale' as a FactorySale.
//
// Generated from index 'fid'.
func FactorySalesByFid(ctx context.Context, fid int, key ...interface{}) ([]*FactorySale, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySaleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fsid, fid, sid, suid, path, status, sale_stauts, accept_auth, wx_mch_id, title, areadesc, areaselect, created, has_sale_num ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySale, 0)
	for queryData.Next() {
		fs := FactorySale{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fs.Fsid, &fs.Fid, &fs.Sid, &fs.Suid, &fs.Path, &fs.Status, &fs.SaleStauts, &fs.AcceptAuth, &fs.WxMchID, &fs.Title, &fs.Areadesc, &fs.Areaselect, &fs.Created, &fs.HasSaleNum)
		if err != nil {
			return nil, err
		}

		res = append(res, &fs)
	}

	return res, nil
}
