// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryPiccate represents a row from 'aypcddg.factory_piccates'.
type FactoryPiccate struct {
	PiccateID      int            `json:"piccate_id"`      // piccate_id
	Fid            int            `json:"fid"`             // fid
	Sid            int            `json:"sid"`             // sid
	PiccateName    sql.NullString `json:"piccate_name"`    // piccate_name
	PiccatePid     int            `json:"piccate_pid"`     // piccate_pid
	PiccateNums    int            `json:"piccate_nums"`    // piccate_nums
	PiccateStorage int64          `json:"piccate_storage"` // piccate_storage

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryPiccate exists in the database.
func (fp *FactoryPiccate) Exists() bool { //factory_piccates
	return fp._exists
}

// Deleted provides information if the FactoryPiccate has been deleted from the database.
func (fp *FactoryPiccate) Deleted() bool {
	return fp._deleted
}

// Get table name
func GetFactoryPiccateTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_piccates", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryPiccate to the database.
func (fp *FactoryPiccate) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPiccateTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, sid, piccate_name, piccate_pid, piccate_nums, piccate_storage` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fp.Fid, fp.Sid, fp.PiccateName, fp.PiccatePid, fp.PiccateNums, fp.PiccateStorage)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fp.Fid, fp.Sid, fp.PiccateName, fp.PiccatePid, fp.PiccateNums, fp.PiccateStorage)
	} else {
		res, err = dbConn.Exec(sqlstr, fp.Fid, fp.Sid, fp.PiccateName, fp.PiccatePid, fp.PiccateNums, fp.PiccateStorage)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fp.PiccateID = int(id)
	fp._exists = true

	return nil
}

// Update updates the FactoryPiccate in the database.
func (fp *FactoryPiccate) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPiccateTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, sid = ?, piccate_name = ?, piccate_pid = ?, piccate_nums = ?, piccate_storage = ?` +
		` WHERE piccate_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fp.Fid, fp.Sid, fp.PiccateName, fp.PiccatePid, fp.PiccateNums, fp.PiccateStorage, fp.PiccateID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fp.Fid, fp.Sid, fp.PiccateName, fp.PiccatePid, fp.PiccateNums, fp.PiccateStorage, fp.PiccateID)
	} else {
		_, err = dbConn.Exec(sqlstr, fp.Fid, fp.Sid, fp.PiccateName, fp.PiccatePid, fp.PiccateNums, fp.PiccateStorage, fp.PiccateID)
	}
	return err
}

// Save saves the FactoryPiccate to the database.
func (fp *FactoryPiccate) Save(ctx context.Context) error {
	if fp.Exists() {
		return fp.Update(ctx)
	}

	return fp.Insert(ctx)
}

// Delete deletes the FactoryPiccate from the database.
func (fp *FactoryPiccate) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPiccateTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE piccate_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fp.PiccateID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fp.PiccateID)
	} else {
		_, err = dbConn.Exec(sqlstr, fp.PiccateID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fp._deleted = true

	return nil
}

// FactoryPiccateByPiccateID retrieves a row from 'aypcddg.factory_piccates' as a FactoryPiccate.
//
// Generated from index 'factory_piccates_piccate_id_pkey'.
func FactoryPiccateByPiccateID(ctx context.Context, piccateID int, key ...interface{}) (*FactoryPiccate, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryPiccateTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`piccate_id, fid, sid, piccate_name, piccate_pid, piccate_nums, piccate_storage ` +
		`FROM ` + tableName +
		` WHERE piccate_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, piccateID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fp := FactoryPiccate{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, piccateID).Scan(&fp.PiccateID, &fp.Fid, &fp.Sid, &fp.PiccateName, &fp.PiccatePid, &fp.PiccateNums, &fp.PiccateStorage)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, piccateID).Scan(&fp.PiccateID, &fp.Fid, &fp.Sid, &fp.PiccateName, &fp.PiccatePid, &fp.PiccateNums, &fp.PiccateStorage)
		if err != nil {
			return nil, err
		}
	}

	return &fp, nil
}
