// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactorySetting represents a row from 'aypcddg.factory_setting'.
type FactorySetting struct {
	Indexkey string `json:"indexkey"` // indexkey
	Settings string `json:"settings"` // settings

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactorySetting exists in the database.
func (fs *FactorySetting) Exists() bool { //factory_setting
	return fs._exists
}

// Deleted provides information if the FactorySetting has been deleted from the database.
func (fs *FactorySetting) Deleted() bool {
	return fs._deleted
}

// Get table name
func GetFactorySettingTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_setting", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactorySetting to the database.
func (fs *FactorySetting) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fs._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySettingTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`indexkey, settings` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fs.Indexkey, fs.Settings)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, fs.Indexkey, fs.Settings)
	} else {
		res, err = dbConn.Exec(sqlstr, fs.Indexkey, fs.Settings)
	}

	if err != nil {
		return err
	}

	// set existence
	fs._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fs.Indexkey = string(id)
	fs._exists = true

	return nil
}

// Update updates the FactorySetting in the database.
func (fs *FactorySetting) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySettingTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`settings = ?` +
		` WHERE indexkey = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fs.Settings, fs.Indexkey)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fs.Settings, fs.Indexkey)
	} else {
		_, err = dbConn.Exec(sqlstr, fs.Settings, fs.Indexkey)
	}
	return err
}

// Save saves the FactorySetting to the database.
func (fs *FactorySetting) Save(ctx context.Context) error {
	if fs.Exists() {
		return fs.Update(ctx)
	}

	return fs.Insert(ctx)
}

// Delete deletes the FactorySetting from the database.
func (fs *FactorySetting) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fs._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySettingTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE indexkey = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fs.Indexkey)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fs.Indexkey)
	} else {
		_, err = dbConn.Exec(sqlstr, fs.Indexkey)
	}

	if err != nil {
		return err
	}

	// set deleted
	fs._deleted = true

	return nil
}

// FactorySettingByIndexkey retrieves a row from 'aypcddg.factory_setting' as a FactorySetting.
//
// Generated from index 'factory_setting_indexkey_pkey'.
func FactorySettingByIndexkey(ctx context.Context, indexkey string, key ...interface{}) (*FactorySetting, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySettingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`indexkey, settings ` +
		`FROM ` + tableName +
		` WHERE indexkey = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, indexkey)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fs := FactorySetting{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, indexkey).Scan(&fs.Indexkey, &fs.Settings)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, indexkey).Scan(&fs.Indexkey, &fs.Settings)
		if err != nil {
			return nil, err
		}
	}

	return &fs, nil
}
