// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// DevelopAdminFlag represents a row from 'aypcddg.develop_admin_flag'.
type DevelopAdminFlag struct {
	UID     int            `json:"uid"`      // uid
	Gids    string         `json:"gids"`     // gids
	Cateid  sql.NullString `json:"cateid"`   // cateid
	AddDate sql.NullInt64  `json:"add_date"` // add_date
	AddUID  sql.NullInt64  `json:"add_uid"`  // add_uid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DevelopAdminFlag exists in the database.
func (daf *DevelopAdminFlag) Exists() bool { //develop_admin_flag
	return daf._exists
}

// Deleted provides information if the DevelopAdminFlag has been deleted from the database.
func (daf *DevelopAdminFlag) Deleted() bool {
	return daf._deleted
}

// Get table name
func GetDevelopAdminFlagTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "develop_admin_flag", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DevelopAdminFlag to the database.
func (daf *DevelopAdminFlag) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if daf._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDevelopAdminFlagTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, gids, cateid, add_date, add_uid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daf.UID, daf.Gids, daf.Cateid, daf.AddDate, daf.AddUID)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, daf.UID, daf.Gids, daf.Cateid, daf.AddDate, daf.AddUID)
	} else {
		res, err = dbConn.Exec(sqlstr, daf.UID, daf.Gids, daf.Cateid, daf.AddDate, daf.AddUID)
	}

	if err != nil {
		return err
	}

	// set existence
	daf._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	daf.UID = int(id)
	daf._exists = true

	return nil
}

// Update updates the DevelopAdminFlag in the database.
func (daf *DevelopAdminFlag) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if daf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDevelopAdminFlagTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`gids = ?, cateid = ?, add_date = ?, add_uid = ?` +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daf.Gids, daf.Cateid, daf.AddDate, daf.AddUID, daf.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, daf.Gids, daf.Cateid, daf.AddDate, daf.AddUID, daf.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, daf.Gids, daf.Cateid, daf.AddDate, daf.AddUID, daf.UID)
	}
	return err
}

// Save saves the DevelopAdminFlag to the database.
func (daf *DevelopAdminFlag) Save(ctx context.Context) error {
	if daf.Exists() {
		return daf.Update(ctx)
	}

	return daf.Insert(ctx)
}

// Delete deletes the DevelopAdminFlag from the database.
func (daf *DevelopAdminFlag) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if daf._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDevelopAdminFlagTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daf.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, daf.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, daf.UID)
	}

	if err != nil {
		return err
	}

	// set deleted
	daf._deleted = true

	return nil
}

// DevelopAdminFlagByUID retrieves a row from 'aypcddg.develop_admin_flag' as a DevelopAdminFlag.
//
// Generated from index 'develop_admin_flag_uid_pkey'.
func DevelopAdminFlagByUID(ctx context.Context, uid int, key ...interface{}) (*DevelopAdminFlag, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDevelopAdminFlagTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, gids, cateid, add_date, add_uid ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	daf := DevelopAdminFlag{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid).Scan(&daf.UID, &daf.Gids, &daf.Cateid, &daf.AddDate, &daf.AddUID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid).Scan(&daf.UID, &daf.Gids, &daf.Cateid, &daf.AddDate, &daf.AddUID)
		if err != nil {
			return nil, err
		}
	}

	return &daf, nil
}

// DevelopAdminFlagByUID retrieves a row from 'aypcddg.develop_admin_flag' as a DevelopAdminFlag.
//
// Generated from index 'uid'.
func DevelopAdminFlagByUID(ctx context.Context, uid int, key ...interface{}) (*DevelopAdminFlag, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDevelopAdminFlagTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, gids, cateid, add_date, add_uid ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	daf := DevelopAdminFlag{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid).Scan(&daf.UID, &daf.Gids, &daf.Cateid, &daf.AddDate, &daf.AddUID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid).Scan(&daf.UID, &daf.Gids, &daf.Cateid, &daf.AddDate, &daf.AddUID)
		if err != nil {
			return nil, err
		}
	}

	return &daf, nil
}
