// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// ShopCart represents a row from 'aypcddg.shop_cart'.
type ShopCart struct {
	ID              uint           `json:"id"`               // id
	UID             int            `json:"uid"`              // uid
	Fid             int            `json:"fid"`              // fid
	Gid             int            `json:"gid"`              // gid
	Number          sql.NullInt64  `json:"number"`           // number
	Note            sql.NullString `json:"note"`             // note
	JSONData        sql.NullString `json:"json_data"`        // json_data
	JSONStatus      sql.NullInt64  `json:"json_status"`      // json_status
	CreatedAt       mysql.NullTime `json:"created_at"`       // created_at
	UpdatedAt       mysql.NullTime `json:"updated_at"`       // updated_at
	BuyUserID       sql.NullInt64  `json:"buy_user_id"`      // buy_user_id
	ActivityID      sql.NullInt64  `json:"activity_id"`      // activity_id
	EffectiveStatus sql.NullInt64  `json:"effective_status"` // effective_status
	Shareid         sql.NullInt64  `json:"shareid"`          // shareid
	FromUID         sql.NullInt64  `json:"from_uid"`         // from_uid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopCart exists in the database.
func (sc *ShopCart) Exists() bool { //shop_cart
	return sc._exists
}

// Deleted provides information if the ShopCart has been deleted from the database.
func (sc *ShopCart) Deleted() bool {
	return sc._deleted
}

// Get table name
func GetShopCartTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "shop_cart", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopCart to the database.
func (sc *ShopCart) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCartTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, fid, gid, number, note, json_data, json_status, created_at, updated_at, buy_user_id, activity_id, effective_status, shareid, from_uid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sc.UID, sc.Fid, sc.Gid, sc.Number, sc.Note, sc.JSONData, sc.JSONStatus, sc.CreatedAt, sc.UpdatedAt, sc.BuyUserID, sc.ActivityID, sc.EffectiveStatus, sc.Shareid, sc.FromUID)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sc.UID, sc.Fid, sc.Gid, sc.Number, sc.Note, sc.JSONData, sc.JSONStatus, sc.CreatedAt, sc.UpdatedAt, sc.BuyUserID, sc.ActivityID, sc.EffectiveStatus, sc.Shareid, sc.FromUID)
	} else {
		res, err = dbConn.Exec(sqlstr, sc.UID, sc.Fid, sc.Gid, sc.Number, sc.Note, sc.JSONData, sc.JSONStatus, sc.CreatedAt, sc.UpdatedAt, sc.BuyUserID, sc.ActivityID, sc.EffectiveStatus, sc.Shareid, sc.FromUID)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sc.ID = uint(id)
	sc._exists = true

	return nil
}

// Update updates the ShopCart in the database.
func (sc *ShopCart) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCartTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, fid = ?, gid = ?, number = ?, note = ?, json_data = ?, json_status = ?, created_at = ?, updated_at = ?, buy_user_id = ?, activity_id = ?, effective_status = ?, shareid = ?, from_uid = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sc.UID, sc.Fid, sc.Gid, sc.Number, sc.Note, sc.JSONData, sc.JSONStatus, sc.CreatedAt, sc.UpdatedAt, sc.BuyUserID, sc.ActivityID, sc.EffectiveStatus, sc.Shareid, sc.FromUID, sc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sc.UID, sc.Fid, sc.Gid, sc.Number, sc.Note, sc.JSONData, sc.JSONStatus, sc.CreatedAt, sc.UpdatedAt, sc.BuyUserID, sc.ActivityID, sc.EffectiveStatus, sc.Shareid, sc.FromUID, sc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sc.UID, sc.Fid, sc.Gid, sc.Number, sc.Note, sc.JSONData, sc.JSONStatus, sc.CreatedAt, sc.UpdatedAt, sc.BuyUserID, sc.ActivityID, sc.EffectiveStatus, sc.Shareid, sc.FromUID, sc.ID)
	}
	return err
}

// Save saves the ShopCart to the database.
func (sc *ShopCart) Save(ctx context.Context) error {
	if sc.Exists() {
		return sc.Update(ctx)
	}

	return sc.Insert(ctx)
}

// Delete deletes the ShopCart from the database.
func (sc *ShopCart) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCartTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sc._deleted = true

	return nil
}

// ShopCartByID retrieves a row from 'aypcddg.shop_cart' as a ShopCart.
//
// Generated from index 'shop_cart_id_pkey'.
func ShopCartByID(ctx context.Context, id uint, key ...interface{}) (*ShopCart, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopCartTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, fid, gid, number, note, json_data, json_status, created_at, updated_at, buy_user_id, activity_id, effective_status, shareid, from_uid ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sc := ShopCart{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sc.ID, &sc.UID, &sc.Fid, &sc.Gid, &sc.Number, &sc.Note, &sc.JSONData, &sc.JSONStatus, &sc.CreatedAt, &sc.UpdatedAt, &sc.BuyUserID, &sc.ActivityID, &sc.EffectiveStatus, &sc.Shareid, &sc.FromUID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sc.ID, &sc.UID, &sc.Fid, &sc.Gid, &sc.Number, &sc.Note, &sc.JSONData, &sc.JSONStatus, &sc.CreatedAt, &sc.UpdatedAt, &sc.BuyUserID, &sc.ActivityID, &sc.EffectiveStatus, &sc.Shareid, &sc.FromUID)
		if err != nil {
			return nil, err
		}
	}

	return &sc, nil
}
