// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// HelpWorkOrder represents a row from 'aypcddg.help_work_orders'.
type HelpWorkOrder struct {
	ID        uint           `json:"id"`         // id
	PID       int            `json:"p_id"`       // p_id
	UserID    int            `json:"user_id"`    // user_id
	Content   string         `json:"content"`    // content
	Role      Role           `json:"role"`       // role
	Images    JSON           `json:"images"`     // images
	IsClose   bool           `json:"is_close"`   // is_close
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HelpWorkOrder exists in the database.
func (hwo *HelpWorkOrder) Exists() bool { //help_work_orders
	return hwo._exists
}

// Deleted provides information if the HelpWorkOrder has been deleted from the database.
func (hwo *HelpWorkOrder) Deleted() bool {
	return hwo._deleted
}

// Get table name
func GetHelpWorkOrderTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "help_work_orders", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the HelpWorkOrder to the database.
func (hwo *HelpWorkOrder) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if hwo._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpWorkOrderTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`p_id, user_id, content, role, images, is_close, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hwo.PID, hwo.UserID, hwo.Content, hwo.Role, hwo.Images, hwo.IsClose, hwo.CreatedAt, hwo.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, hwo.PID, hwo.UserID, hwo.Content, hwo.Role, hwo.Images, hwo.IsClose, hwo.CreatedAt, hwo.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, hwo.PID, hwo.UserID, hwo.Content, hwo.Role, hwo.Images, hwo.IsClose, hwo.CreatedAt, hwo.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	hwo.ID = uint(id)
	hwo._exists = true

	return nil
}

// Update updates the HelpWorkOrder in the database.
func (hwo *HelpWorkOrder) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if hwo._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpWorkOrderTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`p_id = ?, user_id = ?, content = ?, role = ?, images = ?, is_close = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hwo.PID, hwo.UserID, hwo.Content, hwo.Role, hwo.Images, hwo.IsClose, hwo.CreatedAt, hwo.UpdatedAt, hwo.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, hwo.PID, hwo.UserID, hwo.Content, hwo.Role, hwo.Images, hwo.IsClose, hwo.CreatedAt, hwo.UpdatedAt, hwo.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, hwo.PID, hwo.UserID, hwo.Content, hwo.Role, hwo.Images, hwo.IsClose, hwo.CreatedAt, hwo.UpdatedAt, hwo.ID)
	}
	return err
}

// Save saves the HelpWorkOrder to the database.
func (hwo *HelpWorkOrder) Save(ctx context.Context) error {
	if hwo.Exists() {
		return hwo.Update(ctx)
	}

	return hwo.Insert(ctx)
}

// Delete deletes the HelpWorkOrder from the database.
func (hwo *HelpWorkOrder) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if hwo._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpWorkOrderTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hwo.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, hwo.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, hwo.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	hwo._deleted = true

	return nil
}

// HelpWorkOrderByID retrieves a row from 'aypcddg.help_work_orders' as a HelpWorkOrder.
//
// Generated from index 'help_work_orders_id_pkey'.
func HelpWorkOrderByID(ctx context.Context, id uint, key ...interface{}) (*HelpWorkOrder, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetHelpWorkOrderTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, p_id, user_id, content, role, images, is_close, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	hwo := HelpWorkOrder{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&hwo.ID, &hwo.PID, &hwo.UserID, &hwo.Content, &hwo.Role, &hwo.Images, &hwo.IsClose, &hwo.CreatedAt, &hwo.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&hwo.ID, &hwo.PID, &hwo.UserID, &hwo.Content, &hwo.Role, &hwo.Images, &hwo.IsClose, &hwo.CreatedAt, &hwo.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &hwo, nil
}
