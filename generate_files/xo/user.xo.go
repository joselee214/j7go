// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// User represents a row from 'aypcddg.users'.
type User struct {
	UID               uint           `json:"uid"`                // uid
	Username          sql.NullString `json:"username"`           // username
	Email             sql.NullString `json:"email"`              // email
	Mobile            sql.NullString `json:"mobile"`             // mobile
	EncryptedPassword sql.NullString `json:"encrypted_password"` // encrypted_password
	ValidateStatus    int8           `json:"validate_status"`    // validate_status
	Created           uint           `json:"created"`            // created
	Updated           uint           `json:"updated"`            // updated
	LastLogin         uint           `json:"last_login"`         // last_login
	IsRegUser         bool           `json:"is_reg_user"`        // is_reg_user
	Identity          bool           `json:"identity"`           // identity
	TraceCode         string         `json:"trace_code"`         // trace_code
	MidAdminID        sql.NullInt64  `json:"mid_admin_id"`       // mid_admin_id
	MidAdminName      sql.NullString `json:"mid_admin_name"`     // mid_admin_name
	CreatedAt         mysql.NullTime `json:"created_at"`         // created_at
	UpdatedAt         mysql.NullTime `json:"updated_at"`         // updated_at
	Status            int8           `json:"status"`             // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool { //users
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Get table name
func GetUserTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "users", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the User to the database.
func (u *User) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`username, email, mobile, encrypted_password, validate_status, created, updated, last_login, is_reg_user, identity, trace_code, mid_admin_id, mid_admin_name, created_at, updated_at, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, u.Username, u.Email, u.Mobile, u.EncryptedPassword, u.ValidateStatus, u.Created, u.Updated, u.LastLogin, u.IsRegUser, u.Identity, u.TraceCode, u.MidAdminID, u.MidAdminName, u.CreatedAt, u.UpdatedAt, u.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, u.Username, u.Email, u.Mobile, u.EncryptedPassword, u.ValidateStatus, u.Created, u.Updated, u.LastLogin, u.IsRegUser, u.Identity, u.TraceCode, u.MidAdminID, u.MidAdminName, u.CreatedAt, u.UpdatedAt, u.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, u.Username, u.Email, u.Mobile, u.EncryptedPassword, u.ValidateStatus, u.Created, u.Updated, u.LastLogin, u.IsRegUser, u.Identity, u.TraceCode, u.MidAdminID, u.MidAdminName, u.CreatedAt, u.UpdatedAt, u.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.UID = uint(id)
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`username = ?, email = ?, mobile = ?, encrypted_password = ?, validate_status = ?, created = ?, updated = ?, last_login = ?, is_reg_user = ?, identity = ?, trace_code = ?, mid_admin_id = ?, mid_admin_name = ?, created_at = ?, updated_at = ?, status = ?` +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, u.Username, u.Email, u.Mobile, u.EncryptedPassword, u.ValidateStatus, u.Created, u.Updated, u.LastLogin, u.IsRegUser, u.Identity, u.TraceCode, u.MidAdminID, u.MidAdminName, u.CreatedAt, u.UpdatedAt, u.Status, u.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, u.Username, u.Email, u.Mobile, u.EncryptedPassword, u.ValidateStatus, u.Created, u.Updated, u.LastLogin, u.IsRegUser, u.Identity, u.TraceCode, u.MidAdminID, u.MidAdminName, u.CreatedAt, u.UpdatedAt, u.Status, u.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, u.Username, u.Email, u.Mobile, u.EncryptedPassword, u.ValidateStatus, u.Created, u.Updated, u.LastLogin, u.IsRegUser, u.Identity, u.TraceCode, u.MidAdminID, u.MidAdminName, u.CreatedAt, u.UpdatedAt, u.Status, u.UID)
	}
	return err
}

// Save saves the User to the database.
func (u *User) Save(ctx context.Context) error {
	if u.Exists() {
		return u.Update(ctx)
	}

	return u.Insert(ctx)
}

// Delete deletes the User from the database.
func (u *User) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if u._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, u.UID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, u.UID)
	} else {
		_, err = dbConn.Exec(sqlstr, u.UID)
	}

	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UsersByCreated retrieves a row from 'aypcddg.users' as a User.
//
// Generated from index 'created'.
func UsersByCreated(ctx context.Context, created uint, key ...interface{}) ([]*User, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, username, email, mobile, encrypted_password, validate_status, created, updated, last_login, is_reg_user, identity, trace_code, mid_admin_id, mid_admin_name, created_at, updated_at, status ` +
		`FROM ` + tableName +
		` WHERE created = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, created)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, created)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, created)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*User, 0)
	for queryData.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&u.UID, &u.Username, &u.Email, &u.Mobile, &u.EncryptedPassword, &u.ValidateStatus, &u.Created, &u.Updated, &u.LastLogin, &u.IsRegUser, &u.Identity, &u.TraceCode, &u.MidAdminID, &u.MidAdminName, &u.CreatedAt, &u.UpdatedAt, &u.Status)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UsersByEmail retrieves a row from 'aypcddg.users' as a User.
//
// Generated from index 'email'.
func UsersByEmail(ctx context.Context, email sql.NullString, key ...interface{}) ([]*User, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, username, email, mobile, encrypted_password, validate_status, created, updated, last_login, is_reg_user, identity, trace_code, mid_admin_id, mid_admin_name, created_at, updated_at, status ` +
		`FROM ` + tableName +
		` WHERE email = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, email)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, email)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, email)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*User, 0)
	for queryData.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&u.UID, &u.Username, &u.Email, &u.Mobile, &u.EncryptedPassword, &u.ValidateStatus, &u.Created, &u.Updated, &u.LastLogin, &u.IsRegUser, &u.Identity, &u.TraceCode, &u.MidAdminID, &u.MidAdminName, &u.CreatedAt, &u.UpdatedAt, &u.Status)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UsersByMobile retrieves a row from 'aypcddg.users' as a User.
//
// Generated from index 'mobile'.
func UsersByMobile(ctx context.Context, mobile sql.NullString, key ...interface{}) ([]*User, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, username, email, mobile, encrypted_password, validate_status, created, updated, last_login, is_reg_user, identity, trace_code, mid_admin_id, mid_admin_name, created_at, updated_at, status ` +
		`FROM ` + tableName +
		` WHERE mobile = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mobile)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, mobile)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, mobile)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*User, 0)
	for queryData.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&u.UID, &u.Username, &u.Email, &u.Mobile, &u.EncryptedPassword, &u.ValidateStatus, &u.Created, &u.Updated, &u.LastLogin, &u.IsRegUser, &u.Identity, &u.TraceCode, &u.MidAdminID, &u.MidAdminName, &u.CreatedAt, &u.UpdatedAt, &u.Status)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UsersByUsername retrieves a row from 'aypcddg.users' as a User.
//
// Generated from index 'username'.
func UsersByUsername(ctx context.Context, username sql.NullString, key ...interface{}) ([]*User, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, username, email, mobile, encrypted_password, validate_status, created, updated, last_login, is_reg_user, identity, trace_code, mid_admin_id, mid_admin_name, created_at, updated_at, status ` +
		`FROM ` + tableName +
		` WHERE username = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, username)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, username)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, username)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*User, 0)
	for queryData.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&u.UID, &u.Username, &u.Email, &u.Mobile, &u.EncryptedPassword, &u.ValidateStatus, &u.Created, &u.Updated, &u.LastLogin, &u.IsRegUser, &u.Identity, &u.TraceCode, &u.MidAdminID, &u.MidAdminName, &u.CreatedAt, &u.UpdatedAt, &u.Status)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UserByUID retrieves a row from 'aypcddg.users' as a User.
//
// Generated from index 'users_uid_pkey'.
func UserByUID(ctx context.Context, uid uint, key ...interface{}) (*User, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`uid, username, email, mobile, encrypted_password, validate_status, created, updated, last_login, is_reg_user, identity, trace_code, mid_admin_id, mid_admin_name, created_at, updated_at, status ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	u := User{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, uid).Scan(&u.UID, &u.Username, &u.Email, &u.Mobile, &u.EncryptedPassword, &u.ValidateStatus, &u.Created, &u.Updated, &u.LastLogin, &u.IsRegUser, &u.Identity, &u.TraceCode, &u.MidAdminID, &u.MidAdminName, &u.CreatedAt, &u.UpdatedAt, &u.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, uid).Scan(&u.UID, &u.Username, &u.Email, &u.Mobile, &u.EncryptedPassword, &u.ValidateStatus, &u.Created, &u.Updated, &u.LastLogin, &u.IsRegUser, &u.Identity, &u.TraceCode, &u.MidAdminID, &u.MidAdminName, &u.CreatedAt, &u.UpdatedAt, &u.Status)
		if err != nil {
			return nil, err
		}
	}

	return &u, nil
}
