// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// CallbackLog represents a row from 'aypcddg.callback_log'.
type CallbackLog struct {
	ID        int            `json:"id"`        // id
	Data      sql.NullString `json:"data"`      // data
	Createdat mysql.NullTime `json:"createdat"` // createdat
	Type      sql.NullString `json:"type"`      // type
	Bizback   sql.NullString `json:"bizback"`   // bizback
	Bizdata   sql.NullString `json:"bizdata"`   // bizdata

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CallbackLog exists in the database.
func (cl *CallbackLog) Exists() bool { //callback_log
	return cl._exists
}

// Deleted provides information if the CallbackLog has been deleted from the database.
func (cl *CallbackLog) Deleted() bool {
	return cl._deleted
}

// Get table name
func GetCallbackLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "callback_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CallbackLog to the database.
func (cl *CallbackLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if cl._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCallbackLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`data, createdat, type, bizback, bizdata` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cl.Data, cl.Createdat, cl.Type, cl.Bizback, cl.Bizdata)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, cl.Data, cl.Createdat, cl.Type, cl.Bizback, cl.Bizdata)
	} else {
		res, err = dbConn.Exec(sqlstr, cl.Data, cl.Createdat, cl.Type, cl.Bizback, cl.Bizdata)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cl.ID = int(id)
	cl._exists = true

	return nil
}

// Update updates the CallbackLog in the database.
func (cl *CallbackLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCallbackLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`data = ?, createdat = ?, type = ?, bizback = ?, bizdata = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cl.Data, cl.Createdat, cl.Type, cl.Bizback, cl.Bizdata, cl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cl.Data, cl.Createdat, cl.Type, cl.Bizback, cl.Bizdata, cl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cl.Data, cl.Createdat, cl.Type, cl.Bizback, cl.Bizdata, cl.ID)
	}
	return err
}

// Save saves the CallbackLog to the database.
func (cl *CallbackLog) Save(ctx context.Context) error {
	if cl.Exists() {
		return cl.Update(ctx)
	}

	return cl.Insert(ctx)
}

// Delete deletes the CallbackLog from the database.
func (cl *CallbackLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cl._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCallbackLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cl.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cl.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cl.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	cl._deleted = true

	return nil
}

// CallbackLogByID retrieves a row from 'aypcddg.callback_log' as a CallbackLog.
//
// Generated from index 'callback_log_id_pkey'.
func CallbackLogByID(ctx context.Context, id int, key ...interface{}) (*CallbackLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCallbackLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, data, createdat, type, bizback, bizdata ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	cl := CallbackLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&cl.ID, &cl.Data, &cl.Createdat, &cl.Type, &cl.Bizback, &cl.Bizdata)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&cl.ID, &cl.Data, &cl.Createdat, &cl.Type, &cl.Bizback, &cl.Bizdata)
		if err != nil {
			return nil, err
		}
	}

	return &cl, nil
}
