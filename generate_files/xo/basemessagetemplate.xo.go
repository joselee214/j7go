// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BaseMessageTemplate represents a row from 'aypcddg.base_message_template'.
type BaseMessageTemplate struct {
	ID              uint           `json:"id"`               // id
	CategoryID      int            `json:"category_id"`      // category_id
	Title           string         `json:"title"`            // title
	Channel         int8           `json:"channel"`          // channel
	Type            string         `json:"type"`             // type
	Status          int8           `json:"status"`           // status
	Level           int8           `json:"level"`            // level
	TemplateID      string         `json:"template_id"`      // template_id
	TemplateTitle   string         `json:"template_title"`   // template_title
	TemplateContent string         `json:"template_content"` // template_content
	DataCode        string         `json:"data_code"`        // data_code
	Path            string         `json:"path"`             // path
	CreatedAt       mysql.NullTime `json:"created_at"`       // created_at
	UpdatedAt       mysql.NullTime `json:"updated_at"`       // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BaseMessageTemplate exists in the database.
func (bmt *BaseMessageTemplate) Exists() bool { //base_message_template
	return bmt._exists
}

// Deleted provides information if the BaseMessageTemplate has been deleted from the database.
func (bmt *BaseMessageTemplate) Deleted() bool {
	return bmt._deleted
}

// Get table name
func GetBaseMessageTemplateTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "base_message_template", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BaseMessageTemplate to the database.
func (bmt *BaseMessageTemplate) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if bmt._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageTemplateTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`category_id, title, channel, type, status, level, template_id, template_title, template_content, data_code, path, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmt.CategoryID, bmt.Title, bmt.Channel, bmt.Type, bmt.Status, bmt.Level, bmt.TemplateID, bmt.TemplateTitle, bmt.TemplateContent, bmt.DataCode, bmt.Path, bmt.CreatedAt, bmt.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, bmt.CategoryID, bmt.Title, bmt.Channel, bmt.Type, bmt.Status, bmt.Level, bmt.TemplateID, bmt.TemplateTitle, bmt.TemplateContent, bmt.DataCode, bmt.Path, bmt.CreatedAt, bmt.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, bmt.CategoryID, bmt.Title, bmt.Channel, bmt.Type, bmt.Status, bmt.Level, bmt.TemplateID, bmt.TemplateTitle, bmt.TemplateContent, bmt.DataCode, bmt.Path, bmt.CreatedAt, bmt.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bmt.ID = uint(id)
	bmt._exists = true

	return nil
}

// Update updates the BaseMessageTemplate in the database.
func (bmt *BaseMessageTemplate) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bmt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageTemplateTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`category_id = ?, title = ?, channel = ?, type = ?, status = ?, level = ?, template_id = ?, template_title = ?, template_content = ?, data_code = ?, path = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmt.CategoryID, bmt.Title, bmt.Channel, bmt.Type, bmt.Status, bmt.Level, bmt.TemplateID, bmt.TemplateTitle, bmt.TemplateContent, bmt.DataCode, bmt.Path, bmt.CreatedAt, bmt.UpdatedAt, bmt.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bmt.CategoryID, bmt.Title, bmt.Channel, bmt.Type, bmt.Status, bmt.Level, bmt.TemplateID, bmt.TemplateTitle, bmt.TemplateContent, bmt.DataCode, bmt.Path, bmt.CreatedAt, bmt.UpdatedAt, bmt.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bmt.CategoryID, bmt.Title, bmt.Channel, bmt.Type, bmt.Status, bmt.Level, bmt.TemplateID, bmt.TemplateTitle, bmt.TemplateContent, bmt.DataCode, bmt.Path, bmt.CreatedAt, bmt.UpdatedAt, bmt.ID)
	}
	return err
}

// Save saves the BaseMessageTemplate to the database.
func (bmt *BaseMessageTemplate) Save(ctx context.Context) error {
	if bmt.Exists() {
		return bmt.Update(ctx)
	}

	return bmt.Insert(ctx)
}

// Delete deletes the BaseMessageTemplate from the database.
func (bmt *BaseMessageTemplate) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bmt._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageTemplateTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmt.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bmt.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bmt.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	bmt._deleted = true

	return nil
}

// BaseMessageTemplateByID retrieves a row from 'aypcddg.base_message_template' as a BaseMessageTemplate.
//
// Generated from index 'base_message_template_id_pkey'.
func BaseMessageTemplateByID(ctx context.Context, id uint, key ...interface{}) (*BaseMessageTemplate, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseMessageTemplateTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, category_id, title, channel, type, status, level, template_id, template_title, template_content, data_code, path, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bmt := BaseMessageTemplate{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&bmt.ID, &bmt.CategoryID, &bmt.Title, &bmt.Channel, &bmt.Type, &bmt.Status, &bmt.Level, &bmt.TemplateID, &bmt.TemplateTitle, &bmt.TemplateContent, &bmt.DataCode, &bmt.Path, &bmt.CreatedAt, &bmt.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&bmt.ID, &bmt.CategoryID, &bmt.Title, &bmt.Channel, &bmt.Type, &bmt.Status, &bmt.Level, &bmt.TemplateID, &bmt.TemplateTitle, &bmt.TemplateContent, &bmt.DataCode, &bmt.Path, &bmt.CreatedAt, &bmt.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &bmt, nil
}
