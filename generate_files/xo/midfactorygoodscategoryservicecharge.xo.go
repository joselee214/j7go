// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// MidFactoryGoodsCategoryServiceCharge represents a row from 'aypcddg.mid_factory_goods_category_service_charge'.
type MidFactoryGoodsCategoryServiceCharge struct {
	ID              uint           `json:"id"`                // id
	FactoryID       int            `json:"factory_id"`        // factory_id
	GoodsCategoryID int            `json:"goods_category_id"` // goods_category_id
	ServiceCharge   float64        `json:"service_charge"`    // service_charge
	MidAdminID      int            `json:"mid_admin_id"`      // mid_admin_id
	MidAdminName    string         `json:"mid_admin_name"`    // mid_admin_name
	Status          int8           `json:"status"`            // status
	CreatedAt       mysql.NullTime `json:"created_at"`        // created_at
	UpdatedAt       mysql.NullTime `json:"updated_at"`        // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MidFactoryGoodsCategoryServiceCharge exists in the database.
func (mfgcsc *MidFactoryGoodsCategoryServiceCharge) Exists() bool { //mid_factory_goods_category_service_charge
	return mfgcsc._exists
}

// Deleted provides information if the MidFactoryGoodsCategoryServiceCharge has been deleted from the database.
func (mfgcsc *MidFactoryGoodsCategoryServiceCharge) Deleted() bool {
	return mfgcsc._deleted
}

// Get table name
func GetMidFactoryGoodsCategoryServiceChargeTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "mid_factory_goods_category_service_charge", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the MidFactoryGoodsCategoryServiceCharge to the database.
func (mfgcsc *MidFactoryGoodsCategoryServiceCharge) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if mfgcsc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidFactoryGoodsCategoryServiceChargeTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`factory_id, goods_category_id, service_charge, mid_admin_id, mid_admin_name, status, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mfgcsc.FactoryID, mfgcsc.GoodsCategoryID, mfgcsc.ServiceCharge, mfgcsc.MidAdminID, mfgcsc.MidAdminName, mfgcsc.Status, mfgcsc.CreatedAt, mfgcsc.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, mfgcsc.FactoryID, mfgcsc.GoodsCategoryID, mfgcsc.ServiceCharge, mfgcsc.MidAdminID, mfgcsc.MidAdminName, mfgcsc.Status, mfgcsc.CreatedAt, mfgcsc.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, mfgcsc.FactoryID, mfgcsc.GoodsCategoryID, mfgcsc.ServiceCharge, mfgcsc.MidAdminID, mfgcsc.MidAdminName, mfgcsc.Status, mfgcsc.CreatedAt, mfgcsc.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mfgcsc.ID = uint(id)
	mfgcsc._exists = true

	return nil
}

// Update updates the MidFactoryGoodsCategoryServiceCharge in the database.
func (mfgcsc *MidFactoryGoodsCategoryServiceCharge) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mfgcsc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidFactoryGoodsCategoryServiceChargeTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`factory_id = ?, goods_category_id = ?, service_charge = ?, mid_admin_id = ?, mid_admin_name = ?, status = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mfgcsc.FactoryID, mfgcsc.GoodsCategoryID, mfgcsc.ServiceCharge, mfgcsc.MidAdminID, mfgcsc.MidAdminName, mfgcsc.Status, mfgcsc.CreatedAt, mfgcsc.UpdatedAt, mfgcsc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mfgcsc.FactoryID, mfgcsc.GoodsCategoryID, mfgcsc.ServiceCharge, mfgcsc.MidAdminID, mfgcsc.MidAdminName, mfgcsc.Status, mfgcsc.CreatedAt, mfgcsc.UpdatedAt, mfgcsc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mfgcsc.FactoryID, mfgcsc.GoodsCategoryID, mfgcsc.ServiceCharge, mfgcsc.MidAdminID, mfgcsc.MidAdminName, mfgcsc.Status, mfgcsc.CreatedAt, mfgcsc.UpdatedAt, mfgcsc.ID)
	}
	return err
}

// Save saves the MidFactoryGoodsCategoryServiceCharge to the database.
func (mfgcsc *MidFactoryGoodsCategoryServiceCharge) Save(ctx context.Context) error {
	if mfgcsc.Exists() {
		return mfgcsc.Update(ctx)
	}

	return mfgcsc.Insert(ctx)
}

// Delete deletes the MidFactoryGoodsCategoryServiceCharge from the database.
func (mfgcsc *MidFactoryGoodsCategoryServiceCharge) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mfgcsc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidFactoryGoodsCategoryServiceChargeTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mfgcsc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mfgcsc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mfgcsc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	mfgcsc._deleted = true

	return nil
}

// MidFactoryGoodsCategoryServiceChargesByFactoryID retrieves a row from 'aypcddg.mid_factory_goods_category_service_charge' as a MidFactoryGoodsCategoryServiceCharge.
//
// Generated from index 'mid_factory_goods_category_service_charge_factory_id_index'.
func MidFactoryGoodsCategoryServiceChargesByFactoryID(ctx context.Context, factoryID int, key ...interface{}) ([]*MidFactoryGoodsCategoryServiceCharge, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidFactoryGoodsCategoryServiceChargeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, factory_id, goods_category_id, service_charge, mid_admin_id, mid_admin_name, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE factory_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, factoryID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, factoryID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, factoryID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*MidFactoryGoodsCategoryServiceCharge, 0)
	for queryData.Next() {
		mfgcsc := MidFactoryGoodsCategoryServiceCharge{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&mfgcsc.ID, &mfgcsc.FactoryID, &mfgcsc.GoodsCategoryID, &mfgcsc.ServiceCharge, &mfgcsc.MidAdminID, &mfgcsc.MidAdminName, &mfgcsc.Status, &mfgcsc.CreatedAt, &mfgcsc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &mfgcsc)
	}

	return res, nil
}

// MidFactoryGoodsCategoryServiceChargeByID retrieves a row from 'aypcddg.mid_factory_goods_category_service_charge' as a MidFactoryGoodsCategoryServiceCharge.
//
// Generated from index 'mid_factory_goods_category_service_charge_id_pkey'.
func MidFactoryGoodsCategoryServiceChargeByID(ctx context.Context, id uint, key ...interface{}) (*MidFactoryGoodsCategoryServiceCharge, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidFactoryGoodsCategoryServiceChargeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, factory_id, goods_category_id, service_charge, mid_admin_id, mid_admin_name, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mfgcsc := MidFactoryGoodsCategoryServiceCharge{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&mfgcsc.ID, &mfgcsc.FactoryID, &mfgcsc.GoodsCategoryID, &mfgcsc.ServiceCharge, &mfgcsc.MidAdminID, &mfgcsc.MidAdminName, &mfgcsc.Status, &mfgcsc.CreatedAt, &mfgcsc.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&mfgcsc.ID, &mfgcsc.FactoryID, &mfgcsc.GoodsCategoryID, &mfgcsc.ServiceCharge, &mfgcsc.MidAdminID, &mfgcsc.MidAdminName, &mfgcsc.Status, &mfgcsc.CreatedAt, &mfgcsc.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mfgcsc, nil
}

// MidFactoryGoodsCategoryServiceChargesByStatus retrieves a row from 'aypcddg.mid_factory_goods_category_service_charge' as a MidFactoryGoodsCategoryServiceCharge.
//
// Generated from index 'mid_factory_goods_category_service_charge_status_index'.
func MidFactoryGoodsCategoryServiceChargesByStatus(ctx context.Context, status int8, key ...interface{}) ([]*MidFactoryGoodsCategoryServiceCharge, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidFactoryGoodsCategoryServiceChargeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, factory_id, goods_category_id, service_charge, mid_admin_id, mid_admin_name, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*MidFactoryGoodsCategoryServiceCharge, 0)
	for queryData.Next() {
		mfgcsc := MidFactoryGoodsCategoryServiceCharge{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&mfgcsc.ID, &mfgcsc.FactoryID, &mfgcsc.GoodsCategoryID, &mfgcsc.ServiceCharge, &mfgcsc.MidAdminID, &mfgcsc.MidAdminName, &mfgcsc.Status, &mfgcsc.CreatedAt, &mfgcsc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &mfgcsc)
	}

	return res, nil
}

// MidFactoryGoodsCategoryServiceChargesByGoodsCategoryID retrieves a row from 'aypcddg.mid_factory_goods_category_service_charge' as a MidFactoryGoodsCategoryServiceCharge.
//
// Generated from index 'mid_service_charge_goods_category_id_index'.
func MidFactoryGoodsCategoryServiceChargesByGoodsCategoryID(ctx context.Context, goodsCategoryID int, key ...interface{}) ([]*MidFactoryGoodsCategoryServiceCharge, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidFactoryGoodsCategoryServiceChargeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, factory_id, goods_category_id, service_charge, mid_admin_id, mid_admin_name, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE goods_category_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, goodsCategoryID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, goodsCategoryID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, goodsCategoryID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*MidFactoryGoodsCategoryServiceCharge, 0)
	for queryData.Next() {
		mfgcsc := MidFactoryGoodsCategoryServiceCharge{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&mfgcsc.ID, &mfgcsc.FactoryID, &mfgcsc.GoodsCategoryID, &mfgcsc.ServiceCharge, &mfgcsc.MidAdminID, &mfgcsc.MidAdminName, &mfgcsc.Status, &mfgcsc.CreatedAt, &mfgcsc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &mfgcsc)
	}

	return res, nil
}
