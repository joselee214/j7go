// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// SrvUploadLog represents a row from 'aypcddg.srv_upload_log'.
type SrvUploadLog struct {
	ID         uint           `json:"id"`          // id
	UploadID   int            `json:"upload_id"`   // upload_id
	SourceType string         `json:"source_type"` // source_type
	SourceID   int            `json:"source_id"`   // source_id
	SourceUID  int            `json:"source_uid"`  // source_uid
	SourceBid  int            `json:"source_bid"`  // source_bid
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SrvUploadLog exists in the database.
func (sul *SrvUploadLog) Exists() bool { //srv_upload_log
	return sul._exists
}

// Deleted provides information if the SrvUploadLog has been deleted from the database.
func (sul *SrvUploadLog) Deleted() bool {
	return sul._deleted
}

// Get table name
func GetSrvUploadLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "srv_upload_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SrvUploadLog to the database.
func (sul *SrvUploadLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sul._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSrvUploadLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`upload_id, source_type, source_id, source_uid, source_bid, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sul.UploadID, sul.SourceType, sul.SourceID, sul.SourceUID, sul.SourceBid, sul.CreatedAt, sul.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sul.UploadID, sul.SourceType, sul.SourceID, sul.SourceUID, sul.SourceBid, sul.CreatedAt, sul.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, sul.UploadID, sul.SourceType, sul.SourceID, sul.SourceUID, sul.SourceBid, sul.CreatedAt, sul.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sul.ID = uint(id)
	sul._exists = true

	return nil
}

// Update updates the SrvUploadLog in the database.
func (sul *SrvUploadLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sul._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSrvUploadLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`upload_id = ?, source_type = ?, source_id = ?, source_uid = ?, source_bid = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sul.UploadID, sul.SourceType, sul.SourceID, sul.SourceUID, sul.SourceBid, sul.CreatedAt, sul.UpdatedAt, sul.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sul.UploadID, sul.SourceType, sul.SourceID, sul.SourceUID, sul.SourceBid, sul.CreatedAt, sul.UpdatedAt, sul.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sul.UploadID, sul.SourceType, sul.SourceID, sul.SourceUID, sul.SourceBid, sul.CreatedAt, sul.UpdatedAt, sul.ID)
	}
	return err
}

// Save saves the SrvUploadLog to the database.
func (sul *SrvUploadLog) Save(ctx context.Context) error {
	if sul.Exists() {
		return sul.Update(ctx)
	}

	return sul.Insert(ctx)
}

// Delete deletes the SrvUploadLog from the database.
func (sul *SrvUploadLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sul._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSrvUploadLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sul.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sul.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sul.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sul._deleted = true

	return nil
}

// SrvUploadLogByID retrieves a row from 'aypcddg.srv_upload_log' as a SrvUploadLog.
//
// Generated from index 'srv_upload_log_id_pkey'.
func SrvUploadLogByID(ctx context.Context, id uint, key ...interface{}) (*SrvUploadLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSrvUploadLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, upload_id, source_type, source_id, source_uid, source_bid, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sul := SrvUploadLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sul.ID, &sul.UploadID, &sul.SourceType, &sul.SourceID, &sul.SourceUID, &sul.SourceBid, &sul.CreatedAt, &sul.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sul.ID, &sul.UploadID, &sul.SourceType, &sul.SourceID, &sul.SourceUID, &sul.SourceBid, &sul.CreatedAt, &sul.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &sul, nil
}
