// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// OrderAfter represents a row from 'aypcddg.order_after'.
type OrderAfter struct {
	OrderAid int            `json:"order_aid"` // order_aid
	OrderID  int            `json:"order_id"`  // order_id
	Gid      int            `json:"gid"`       // gid
	UID      int            `json:"uid"`       // uid
	Fid      int            `json:"fid"`       // fid
	Sid      int            `json:"sid"`       // sid
	Status   int            `json:"status"`    // status
	Created  int            `json:"created"`   // created
	Updated  int            `json:"updated"`   // updated
	Comment  sql.NullString `json:"comment"`   // comment

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrderAfter exists in the database.
func (oa *OrderAfter) Exists() bool { //order_after
	return oa._exists
}

// Deleted provides information if the OrderAfter has been deleted from the database.
func (oa *OrderAfter) Deleted() bool {
	return oa._deleted
}

// Get table name
func GetOrderAfterTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "order_after", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrderAfter to the database.
func (oa *OrderAfter) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if oa._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderAfterTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`order_id, gid, uid, fid, sid, status, created, updated, comment` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oa.OrderID, oa.Gid, oa.UID, oa.Fid, oa.Sid, oa.Status, oa.Created, oa.Updated, oa.Comment)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, oa.OrderID, oa.Gid, oa.UID, oa.Fid, oa.Sid, oa.Status, oa.Created, oa.Updated, oa.Comment)
	} else {
		res, err = dbConn.Exec(sqlstr, oa.OrderID, oa.Gid, oa.UID, oa.Fid, oa.Sid, oa.Status, oa.Created, oa.Updated, oa.Comment)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	oa.OrderAid = int(id)
	oa._exists = true

	return nil
}

// Update updates the OrderAfter in the database.
func (oa *OrderAfter) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if oa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderAfterTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`order_id = ?, gid = ?, uid = ?, fid = ?, sid = ?, status = ?, created = ?, updated = ?, comment = ?` +
		` WHERE order_aid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oa.OrderID, oa.Gid, oa.UID, oa.Fid, oa.Sid, oa.Status, oa.Created, oa.Updated, oa.Comment, oa.OrderAid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, oa.OrderID, oa.Gid, oa.UID, oa.Fid, oa.Sid, oa.Status, oa.Created, oa.Updated, oa.Comment, oa.OrderAid)
	} else {
		_, err = dbConn.Exec(sqlstr, oa.OrderID, oa.Gid, oa.UID, oa.Fid, oa.Sid, oa.Status, oa.Created, oa.Updated, oa.Comment, oa.OrderAid)
	}
	return err
}

// Save saves the OrderAfter to the database.
func (oa *OrderAfter) Save(ctx context.Context) error {
	if oa.Exists() {
		return oa.Update(ctx)
	}

	return oa.Insert(ctx)
}

// Delete deletes the OrderAfter from the database.
func (oa *OrderAfter) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if oa._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderAfterTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE order_aid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, oa.OrderAid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, oa.OrderAid)
	} else {
		_, err = dbConn.Exec(sqlstr, oa.OrderAid)
	}

	if err != nil {
		return err
	}

	// set deleted
	oa._deleted = true

	return nil
}

// OrderAfterByOrderAid retrieves a row from 'aypcddg.order_after' as a OrderAfter.
//
// Generated from index 'order_after_order_aid_pkey'.
func OrderAfterByOrderAid(ctx context.Context, orderAid int, key ...interface{}) (*OrderAfter, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrderAfterTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`order_aid, order_id, gid, uid, fid, sid, status, created, updated, comment ` +
		`FROM ` + tableName +
		` WHERE order_aid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, orderAid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	oa := OrderAfter{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, orderAid).Scan(&oa.OrderAid, &oa.OrderID, &oa.Gid, &oa.UID, &oa.Fid, &oa.Sid, &oa.Status, &oa.Created, &oa.Updated, &oa.Comment)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, orderAid).Scan(&oa.OrderAid, &oa.OrderID, &oa.Gid, &oa.UID, &oa.Fid, &oa.Sid, &oa.Status, &oa.Created, &oa.Updated, &oa.Comment)
		if err != nil {
			return nil, err
		}
	}

	return &oa, nil
}
