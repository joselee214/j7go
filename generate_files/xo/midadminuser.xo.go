// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// MidAdminUser represents a row from 'aypcddg.mid_admin_users'.
type MidAdminUser struct {
	ID            uint           `json:"id"`             // id
	Username      string         `json:"username"`       // username
	Password      string         `json:"password"`       // password
	Name          string         `json:"name"`           // name
	Avatar        sql.NullString `json:"avatar"`         // avatar
	RememberToken sql.NullString `json:"remember_token"` // remember_token
	CreatedAt     mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt     mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MidAdminUser exists in the database.
func (mau *MidAdminUser) Exists() bool { //mid_admin_users
	return mau._exists
}

// Deleted provides information if the MidAdminUser has been deleted from the database.
func (mau *MidAdminUser) Deleted() bool {
	return mau._deleted
}

// Get table name
func GetMidAdminUserTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "mid_admin_users", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the MidAdminUser to the database.
func (mau *MidAdminUser) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if mau._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminUserTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`username, password, name, avatar, remember_token, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mau.Username, mau.Password, mau.Name, mau.Avatar, mau.RememberToken, mau.CreatedAt, mau.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, mau.Username, mau.Password, mau.Name, mau.Avatar, mau.RememberToken, mau.CreatedAt, mau.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, mau.Username, mau.Password, mau.Name, mau.Avatar, mau.RememberToken, mau.CreatedAt, mau.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mau.ID = uint(id)
	mau._exists = true

	return nil
}

// Update updates the MidAdminUser in the database.
func (mau *MidAdminUser) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mau._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminUserTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`username = ?, password = ?, name = ?, avatar = ?, remember_token = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mau.Username, mau.Password, mau.Name, mau.Avatar, mau.RememberToken, mau.CreatedAt, mau.UpdatedAt, mau.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mau.Username, mau.Password, mau.Name, mau.Avatar, mau.RememberToken, mau.CreatedAt, mau.UpdatedAt, mau.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mau.Username, mau.Password, mau.Name, mau.Avatar, mau.RememberToken, mau.CreatedAt, mau.UpdatedAt, mau.ID)
	}
	return err
}

// Save saves the MidAdminUser to the database.
func (mau *MidAdminUser) Save(ctx context.Context) error {
	if mau.Exists() {
		return mau.Update(ctx)
	}

	return mau.Insert(ctx)
}

// Delete deletes the MidAdminUser from the database.
func (mau *MidAdminUser) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mau._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdminUserTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mau.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mau.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mau.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	mau._deleted = true

	return nil
}

// MidAdminUserByID retrieves a row from 'aypcddg.mid_admin_users' as a MidAdminUser.
//
// Generated from index 'mid_admin_users_id_pkey'.
func MidAdminUserByID(ctx context.Context, id uint, key ...interface{}) (*MidAdminUser, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidAdminUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, username, password, name, avatar, remember_token, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mau := MidAdminUser{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&mau.ID, &mau.Username, &mau.Password, &mau.Name, &mau.Avatar, &mau.RememberToken, &mau.CreatedAt, &mau.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&mau.ID, &mau.Username, &mau.Password, &mau.Name, &mau.Avatar, &mau.RememberToken, &mau.CreatedAt, &mau.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mau, nil
}

// MidAdminUserByUsername retrieves a row from 'aypcddg.mid_admin_users' as a MidAdminUser.
//
// Generated from index 'mid_admin_users_username_unique'.
func MidAdminUserByUsername(ctx context.Context, username string, key ...interface{}) (*MidAdminUser, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidAdminUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, username, password, name, avatar, remember_token, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE username = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, username)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mau := MidAdminUser{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, username).Scan(&mau.ID, &mau.Username, &mau.Password, &mau.Name, &mau.Avatar, &mau.RememberToken, &mau.CreatedAt, &mau.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, username).Scan(&mau.ID, &mau.Username, &mau.Password, &mau.Name, &mau.Avatar, &mau.RememberToken, &mau.CreatedAt, &mau.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mau, nil
}
