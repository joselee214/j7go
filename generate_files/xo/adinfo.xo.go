// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// AdInfo represents a row from 'aypcddg.ad_info'.
type AdInfo struct {
	Aiid    int            `json:"aiid"`    // aiid
	Agid    int            `json:"agid"`    // agid
	Title   sql.NullString `json:"title"`   // title
	Photo   sql.NullString `json:"photo"`   // photo
	URL     sql.NullString `json:"url"`     // url
	Addby   int            `json:"addby"`   // addby
	Updated sql.NullInt64  `json:"updated"` // updated
	Created int            `json:"created"` // created
	Status  bool           `json:"status"`  // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AdInfo exists in the database.
func (ai *AdInfo) Exists() bool { //ad_info
	return ai._exists
}

// Deleted provides information if the AdInfo has been deleted from the database.
func (ai *AdInfo) Deleted() bool {
	return ai._deleted
}

// Get table name
func GetAdInfoTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "ad_info", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AdInfo to the database.
func (ai *AdInfo) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ai._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`agid, title, photo, url, addby, updated, created, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ai.Agid, ai.Title, ai.Photo, ai.URL, ai.Addby, ai.Updated, ai.Created, ai.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ai.Agid, ai.Title, ai.Photo, ai.URL, ai.Addby, ai.Updated, ai.Created, ai.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, ai.Agid, ai.Title, ai.Photo, ai.URL, ai.Addby, ai.Updated, ai.Created, ai.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ai.Aiid = int(id)
	ai._exists = true

	return nil
}

// Update updates the AdInfo in the database.
func (ai *AdInfo) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ai._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`agid = ?, title = ?, photo = ?, url = ?, addby = ?, updated = ?, created = ?, status = ?` +
		` WHERE aiid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ai.Agid, ai.Title, ai.Photo, ai.URL, ai.Addby, ai.Updated, ai.Created, ai.Status, ai.Aiid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ai.Agid, ai.Title, ai.Photo, ai.URL, ai.Addby, ai.Updated, ai.Created, ai.Status, ai.Aiid)
	} else {
		_, err = dbConn.Exec(sqlstr, ai.Agid, ai.Title, ai.Photo, ai.URL, ai.Addby, ai.Updated, ai.Created, ai.Status, ai.Aiid)
	}
	return err
}

// Save saves the AdInfo to the database.
func (ai *AdInfo) Save(ctx context.Context) error {
	if ai.Exists() {
		return ai.Update(ctx)
	}

	return ai.Insert(ctx)
}

// Delete deletes the AdInfo from the database.
func (ai *AdInfo) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ai._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdInfoTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE aiid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ai.Aiid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ai.Aiid)
	} else {
		_, err = dbConn.Exec(sqlstr, ai.Aiid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ai._deleted = true

	return nil
}

// AdInfoByAiid retrieves a row from 'aypcddg.ad_info' as a AdInfo.
//
// Generated from index 'ad_info_aiid_pkey'.
func AdInfoByAiid(ctx context.Context, aiid int, key ...interface{}) (*AdInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`aiid, agid, title, photo, url, addby, updated, created, status ` +
		`FROM ` + tableName +
		` WHERE aiid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, aiid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ai := AdInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, aiid).Scan(&ai.Aiid, &ai.Agid, &ai.Title, &ai.Photo, &ai.URL, &ai.Addby, &ai.Updated, &ai.Created, &ai.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, aiid).Scan(&ai.Aiid, &ai.Agid, &ai.Title, &ai.Photo, &ai.URL, &ai.Addby, &ai.Updated, &ai.Created, &ai.Status)
		if err != nil {
			return nil, err
		}
	}

	return &ai, nil
}
