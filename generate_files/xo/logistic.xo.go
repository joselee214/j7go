// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Logistic represents a row from 'aypcddg.logistic'.
type Logistic struct {
	ID                    uint           `json:"id"`                      // id
	Oid                   uint           `json:"oid"`                     // oid
	Lid                   uint           `json:"lid"`                     // lid
	BuyerAddress          sql.NullString `json:"buyer_address"`           // buyer_address
	BuyerContact          sql.NullString `json:"buyer_contact"`           // buyer_contact
	BuyerPostcode         sql.NullInt64  `json:"buyer_postcode"`          // buyer_postcode
	BuyerMobile           sql.NullString `json:"buyer_mobile"`            // buyer_mobile
	SellerDeliverAddress  sql.NullString `json:"seller_deliver_address"`  // seller_deliver_address
	SellerDeliverContact  sql.NullString `json:"seller_deliver_contact"`  // seller_deliver_contact
	SellerDeliverPostcode sql.NullString `json:"seller_deliver_postcode"` // seller_deliver_postcode
	SellerDeliverMobile   sql.NullString `json:"seller_deliver_mobile"`   // seller_deliver_mobile
	SellerRefundAddress   sql.NullString `json:"seller_refund_address"`   // seller_refund_address
	SellerRefundContact   sql.NullString `json:"seller_refund_contact"`   // seller_refund_contact
	SellerRefundPostcode  sql.NullString `json:"seller_refund_postcode"`  // seller_refund_postcode
	SellerRefundMobile    sql.NullString `json:"seller_refund_mobile"`    // seller_refund_mobile
	LogisticType          sql.NullInt64  `json:"logistic_type"`           // logistic_type
	LogisticCompany       sql.NullString `json:"logistic_company"`        // logistic_company
	DeliverTime           sql.NullInt64  `json:"deliver_time"`            // deliver_time
	DeliverManName        sql.NullString `json:"deliver_man_name"`        // deliver_man_name
	DeliverManMobile      sql.NullString `json:"deliver_man_mobile"`      // deliver_man_mobile
	ExpectArriveTime      sql.NullInt64  `json:"expect_arrive_time"`      // expect_arrive_time
	PayMethod             int8           `json:"pay_method"`              // pay_method
	Price                 float64        `json:"price"`                   // price
	Note                  sql.NullString `json:"note"`                    // note
	Created               uint           `json:"created"`                 // created
}

// LogisticsByID retrieves a row from 'aypcddg.logistic' as a Logistic.
//
// Generated from index 'did'.
func LogisticsByID(ctx context.Context, id uint, key ...interface{}) ([]*Logistic, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetLogisticTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, oid, lid, buyer_address, buyer_contact, buyer_postcode, buyer_mobile, seller_deliver_address, seller_deliver_contact, seller_deliver_postcode, seller_deliver_mobile, seller_refund_address, seller_refund_contact, seller_refund_postcode, seller_refund_mobile, logistic_type, logistic_company, deliver_time, deliver_man_name, deliver_man_mobile, expect_arrive_time, pay_method, price, note, created ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, id)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, id)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*Logistic, 0)
	for queryData.Next() {
		l := Logistic{}

		// scan
		err = queryData.Scan(&l.ID, &l.Oid, &l.Lid, &l.BuyerAddress, &l.BuyerContact, &l.BuyerPostcode, &l.BuyerMobile, &l.SellerDeliverAddress, &l.SellerDeliverContact, &l.SellerDeliverPostcode, &l.SellerDeliverMobile, &l.SellerRefundAddress, &l.SellerRefundContact, &l.SellerRefundPostcode, &l.SellerRefundMobile, &l.LogisticType, &l.LogisticCompany, &l.DeliverTime, &l.DeliverManName, &l.DeliverManMobile, &l.ExpectArriveTime, &l.PayMethod, &l.Price, &l.Note, &l.Created)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}
