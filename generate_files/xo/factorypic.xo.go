// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryPic represents a row from 'aypcddg.factory_pics'.
type FactoryPic struct {
	PicID         int            `json:"pic_id"`         // pic_id
	UID           sql.NullInt64  `json:"uid"`            // uid
	Fid           int            `json:"fid"`            // fid
	Sid           int            `json:"sid"`            // sid
	PiccateID     int            `json:"piccate_id"`     // piccate_id
	PicName       sql.NullString `json:"pic_name"`       // pic_name
	PicFileserver int            `json:"pic_fileserver"` // pic_fileserver
	PicFpath      sql.NullString `json:"pic_fpath"`      // pic_fpath
	PicStorage    int            `json:"pic_storage"`    // pic_storage
	PicSha        sql.NullString `json:"pic_sha"`        // pic_sha
	OssLogID      int            `json:"oss_log_id"`     // oss_log_id
	Width         int            `json:"width"`          // width
	Height        int            `json:"height"`         // height

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryPic exists in the database.
func (fp *FactoryPic) Exists() bool { //factory_pics
	return fp._exists
}

// Deleted provides information if the FactoryPic has been deleted from the database.
func (fp *FactoryPic) Deleted() bool {
	return fp._deleted
}

// Get table name
func GetFactoryPicTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_pics", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryPic to the database.
func (fp *FactoryPic) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPicTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, fid, sid, piccate_id, pic_name, pic_fileserver, pic_fpath, pic_storage, pic_sha, oss_log_id, width, height` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fp.UID, fp.Fid, fp.Sid, fp.PiccateID, fp.PicName, fp.PicFileserver, fp.PicFpath, fp.PicStorage, fp.PicSha, fp.OssLogID, fp.Width, fp.Height)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fp.UID, fp.Fid, fp.Sid, fp.PiccateID, fp.PicName, fp.PicFileserver, fp.PicFpath, fp.PicStorage, fp.PicSha, fp.OssLogID, fp.Width, fp.Height)
	} else {
		res, err = dbConn.Exec(sqlstr, fp.UID, fp.Fid, fp.Sid, fp.PiccateID, fp.PicName, fp.PicFileserver, fp.PicFpath, fp.PicStorage, fp.PicSha, fp.OssLogID, fp.Width, fp.Height)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fp.PicID = int(id)
	fp._exists = true

	return nil
}

// Update updates the FactoryPic in the database.
func (fp *FactoryPic) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPicTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, fid = ?, sid = ?, piccate_id = ?, pic_name = ?, pic_fileserver = ?, pic_fpath = ?, pic_storage = ?, pic_sha = ?, oss_log_id = ?, width = ?, height = ?` +
		` WHERE pic_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fp.UID, fp.Fid, fp.Sid, fp.PiccateID, fp.PicName, fp.PicFileserver, fp.PicFpath, fp.PicStorage, fp.PicSha, fp.OssLogID, fp.Width, fp.Height, fp.PicID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fp.UID, fp.Fid, fp.Sid, fp.PiccateID, fp.PicName, fp.PicFileserver, fp.PicFpath, fp.PicStorage, fp.PicSha, fp.OssLogID, fp.Width, fp.Height, fp.PicID)
	} else {
		_, err = dbConn.Exec(sqlstr, fp.UID, fp.Fid, fp.Sid, fp.PiccateID, fp.PicName, fp.PicFileserver, fp.PicFpath, fp.PicStorage, fp.PicSha, fp.OssLogID, fp.Width, fp.Height, fp.PicID)
	}
	return err
}

// Save saves the FactoryPic to the database.
func (fp *FactoryPic) Save(ctx context.Context) error {
	if fp.Exists() {
		return fp.Update(ctx)
	}

	return fp.Insert(ctx)
}

// Delete deletes the FactoryPic from the database.
func (fp *FactoryPic) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPicTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE pic_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fp.PicID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fp.PicID)
	} else {
		_, err = dbConn.Exec(sqlstr, fp.PicID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fp._deleted = true

	return nil
}

// FactoryPicsByOssLogID retrieves a row from 'aypcddg.factory_pics' as a FactoryPic.
//
// Generated from index 'factory_pics_oss_log_id_index'.
func FactoryPicsByOssLogID(ctx context.Context, ossLogID int, key ...interface{}) ([]*FactoryPic, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryPicTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`pic_id, uid, fid, sid, piccate_id, pic_name, pic_fileserver, pic_fpath, pic_storage, pic_sha, oss_log_id, width, height ` +
		`FROM ` + tableName +
		` WHERE oss_log_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ossLogID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, ossLogID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, ossLogID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryPic, 0)
	for queryData.Next() {
		fp := FactoryPic{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fp.PicID, &fp.UID, &fp.Fid, &fp.Sid, &fp.PiccateID, &fp.PicName, &fp.PicFileserver, &fp.PicFpath, &fp.PicStorage, &fp.PicSha, &fp.OssLogID, &fp.Width, &fp.Height)
		if err != nil {
			return nil, err
		}

		res = append(res, &fp)
	}

	return res, nil
}

// FactoryPicByPicID retrieves a row from 'aypcddg.factory_pics' as a FactoryPic.
//
// Generated from index 'factory_pics_pic_id_pkey'.
func FactoryPicByPicID(ctx context.Context, picID int, key ...interface{}) (*FactoryPic, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryPicTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`pic_id, uid, fid, sid, piccate_id, pic_name, pic_fileserver, pic_fpath, pic_storage, pic_sha, oss_log_id, width, height ` +
		`FROM ` + tableName +
		` WHERE pic_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, picID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fp := FactoryPic{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, picID).Scan(&fp.PicID, &fp.UID, &fp.Fid, &fp.Sid, &fp.PiccateID, &fp.PicName, &fp.PicFileserver, &fp.PicFpath, &fp.PicStorage, &fp.PicSha, &fp.OssLogID, &fp.Width, &fp.Height)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, picID).Scan(&fp.PicID, &fp.UID, &fp.Fid, &fp.Sid, &fp.PiccateID, &fp.PicName, &fp.PicFileserver, &fp.PicFpath, &fp.PicStorage, &fp.PicSha, &fp.OssLogID, &fp.Width, &fp.Height)
		if err != nil {
			return nil, err
		}
	}

	return &fp, nil
}

// FactoryPicsByUID retrieves a row from 'aypcddg.factory_pics' as a FactoryPic.
//
// Generated from index 'uid'.
func FactoryPicsByUID(ctx context.Context, uid sql.NullInt64, key ...interface{}) ([]*FactoryPic, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryPicTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`pic_id, uid, fid, sid, piccate_id, pic_name, pic_fileserver, pic_fpath, pic_storage, pic_sha, oss_log_id, width, height ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryPic, 0)
	for queryData.Next() {
		fp := FactoryPic{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fp.PicID, &fp.UID, &fp.Fid, &fp.Sid, &fp.PiccateID, &fp.PicName, &fp.PicFileserver, &fp.PicFpath, &fp.PicStorage, &fp.PicSha, &fp.OssLogID, &fp.Width, &fp.Height)
		if err != nil {
			return nil, err
		}

		res = append(res, &fp)
	}

	return res, nil
}
