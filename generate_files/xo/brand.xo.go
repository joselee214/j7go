// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// Brand represents a row from 'aypcddg.brand'.
type Brand struct {
	ID           int16          `json:"id"`            // id
	Bname        sql.NullString `json:"bname"`         // bname
	Bdesc        sql.NullString `json:"bdesc"`         // bdesc
	Border       int16          `json:"border"`        // border
	Bstatus      int16          `json:"bstatus"`       // bstatus
	BuniqueNo    sql.NullInt64  `json:"bunique_no"`    // bunique_no
	IconURL      sql.NullString `json:"icon_url"`      // icon_url
	DeleteStatus int16          `json:"delete_status"` // delete_status
	CreatedAt    mysql.NullTime `json:"created_at"`    // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`    // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Brand exists in the database.
func (b *Brand) Exists() bool { //brand
	return b._exists
}

// Deleted provides information if the Brand has been deleted from the database.
func (b *Brand) Deleted() bool {
	return b._deleted
}

// Get table name
func GetBrandTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "brand", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Brand to the database.
func (b *Brand) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBrandTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`bname, bdesc, border, bstatus, bunique_no, icon_url, delete_status, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, b.Bname, b.Bdesc, b.Border, b.Bstatus, b.BuniqueNo, b.IconURL, b.DeleteStatus, b.CreatedAt, b.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, b.Bname, b.Bdesc, b.Border, b.Bstatus, b.BuniqueNo, b.IconURL, b.DeleteStatus, b.CreatedAt, b.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, b.Bname, b.Bdesc, b.Border, b.Bstatus, b.BuniqueNo, b.IconURL, b.DeleteStatus, b.CreatedAt, b.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	b.ID = int16(id)
	b._exists = true

	return nil
}

// Update updates the Brand in the database.
func (b *Brand) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBrandTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`bname = ?, bdesc = ?, border = ?, bstatus = ?, bunique_no = ?, icon_url = ?, delete_status = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, b.Bname, b.Bdesc, b.Border, b.Bstatus, b.BuniqueNo, b.IconURL, b.DeleteStatus, b.CreatedAt, b.UpdatedAt, b.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, b.Bname, b.Bdesc, b.Border, b.Bstatus, b.BuniqueNo, b.IconURL, b.DeleteStatus, b.CreatedAt, b.UpdatedAt, b.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, b.Bname, b.Bdesc, b.Border, b.Bstatus, b.BuniqueNo, b.IconURL, b.DeleteStatus, b.CreatedAt, b.UpdatedAt, b.ID)
	}
	return err
}

// Save saves the Brand to the database.
func (b *Brand) Save(ctx context.Context) error {
	if b.Exists() {
		return b.Update(ctx)
	}

	return b.Insert(ctx)
}

// Delete deletes the Brand from the database.
func (b *Brand) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if b._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBrandTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, b.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, b.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, b.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// BrandsByBorder retrieves a row from 'aypcddg.brand' as a Brand.
//
// Generated from index 'border'.
func BrandsByBorder(ctx context.Context, border int16, key ...interface{}) ([]*Brand, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBrandTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, bname, bdesc, border, bstatus, bunique_no, icon_url, delete_status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE border = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, border)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, border)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, border)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*Brand, 0)
	for queryData.Next() {
		b := Brand{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&b.ID, &b.Bname, &b.Bdesc, &b.Border, &b.Bstatus, &b.BuniqueNo, &b.IconURL, &b.DeleteStatus, &b.CreatedAt, &b.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// BrandByID retrieves a row from 'aypcddg.brand' as a Brand.
//
// Generated from index 'brand_id_pkey'.
func BrandByID(ctx context.Context, id int16, key ...interface{}) (*Brand, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBrandTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, bname, bdesc, border, bstatus, bunique_no, icon_url, delete_status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	b := Brand{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&b.ID, &b.Bname, &b.Bdesc, &b.Border, &b.Bstatus, &b.BuniqueNo, &b.IconURL, &b.DeleteStatus, &b.CreatedAt, &b.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&b.ID, &b.Bname, &b.Bdesc, &b.Border, &b.Bstatus, &b.BuniqueNo, &b.IconURL, &b.DeleteStatus, &b.CreatedAt, &b.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &b, nil
}
