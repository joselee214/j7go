// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// SaleplanGood represents a row from 'aypcddg.saleplan_goods'.
type SaleplanGood struct {
	ID            uint64         `json:"id"`              // id
	Gid           int            `json:"gid"`             // gid
	Pid           int            `json:"pid"`             // pid
	PlanID        int            `json:"plan_id"`         // plan_id
	PlanType      int8           `json:"plan_type"`       // plan_type
	PlanStartTime int            `json:"plan_start_time"` // plan_start_time
	PlanEndTime   int            `json:"plan_end_time"`   // plan_end_time
	Price         float64        `json:"price"`           // price
	Stock         uint           `json:"stock"`           // stock
	FrozenStock   uint           `json:"frozen_stock"`    // frozen_stock
	LimitStock    int            `json:"limit_stock"`     // limit_stock
	StockType     int            `json:"stock_type"`      // stock_type
	SoldNum       uint           `json:"sold_num"`        // sold_num
	Status        int8           `json:"status"`          // status
	GoodStatus    int8           `json:"good_status"`     // good_status
	PlatformLock  int8           `json:"platform_lock"`   // platform_lock
	CreatedAt     mysql.NullTime `json:"created_at"`      // created_at
	UpdatedAt     mysql.NullTime `json:"updated_at"`      // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SaleplanGood exists in the database.
func (sg *SaleplanGood) Exists() bool { //saleplan_goods
	return sg._exists
}

// Deleted provides information if the SaleplanGood has been deleted from the database.
func (sg *SaleplanGood) Deleted() bool {
	return sg._deleted
}

// Get table name
func GetSaleplanGoodTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "saleplan_goods", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SaleplanGood to the database.
func (sg *SaleplanGood) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sg._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sg.Gid, sg.Pid, sg.PlanID, sg.PlanType, sg.PlanStartTime, sg.PlanEndTime, sg.Price, sg.Stock, sg.FrozenStock, sg.LimitStock, sg.StockType, sg.SoldNum, sg.Status, sg.GoodStatus, sg.PlatformLock, sg.CreatedAt, sg.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sg.Gid, sg.Pid, sg.PlanID, sg.PlanType, sg.PlanStartTime, sg.PlanEndTime, sg.Price, sg.Stock, sg.FrozenStock, sg.LimitStock, sg.StockType, sg.SoldNum, sg.Status, sg.GoodStatus, sg.PlatformLock, sg.CreatedAt, sg.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, sg.Gid, sg.Pid, sg.PlanID, sg.PlanType, sg.PlanStartTime, sg.PlanEndTime, sg.Price, sg.Stock, sg.FrozenStock, sg.LimitStock, sg.StockType, sg.SoldNum, sg.Status, sg.GoodStatus, sg.PlatformLock, sg.CreatedAt, sg.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sg.ID = uint64(id)
	sg._exists = true

	return nil
}

// Update updates the SaleplanGood in the database.
func (sg *SaleplanGood) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`gid = ?, pid = ?, plan_id = ?, plan_type = ?, plan_start_time = ?, plan_end_time = ?, price = ?, stock = ?, frozen_stock = ?, limit_stock = ?, stock_type = ?, sold_num = ?, status = ?, good_status = ?, platform_lock = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sg.Gid, sg.Pid, sg.PlanID, sg.PlanType, sg.PlanStartTime, sg.PlanEndTime, sg.Price, sg.Stock, sg.FrozenStock, sg.LimitStock, sg.StockType, sg.SoldNum, sg.Status, sg.GoodStatus, sg.PlatformLock, sg.CreatedAt, sg.UpdatedAt, sg.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sg.Gid, sg.Pid, sg.PlanID, sg.PlanType, sg.PlanStartTime, sg.PlanEndTime, sg.Price, sg.Stock, sg.FrozenStock, sg.LimitStock, sg.StockType, sg.SoldNum, sg.Status, sg.GoodStatus, sg.PlatformLock, sg.CreatedAt, sg.UpdatedAt, sg.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sg.Gid, sg.Pid, sg.PlanID, sg.PlanType, sg.PlanStartTime, sg.PlanEndTime, sg.Price, sg.Stock, sg.FrozenStock, sg.LimitStock, sg.StockType, sg.SoldNum, sg.Status, sg.GoodStatus, sg.PlatformLock, sg.CreatedAt, sg.UpdatedAt, sg.ID)
	}
	return err
}

// Save saves the SaleplanGood to the database.
func (sg *SaleplanGood) Save(ctx context.Context) error {
	if sg.Exists() {
		return sg.Update(ctx)
	}

	return sg.Insert(ctx)
}

// Delete deletes the SaleplanGood from the database.
func (sg *SaleplanGood) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sg._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sg.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sg.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sg.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sg._deleted = true

	return nil
}

// SaleplanGoodByPlanIDGid retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'gid_planid'.
func SaleplanGoodByPlanIDGid(ctx context.Context, planID int, gid int, key ...interface{}) (*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE plan_id = ? AND gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, planID, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sg := SaleplanGood{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, planID, gid).Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, planID, gid).Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &sg, nil
}

// SaleplanGoodsByGid retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_gid_index'.
func SaleplanGoodsByGid(ctx context.Context, gid int, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}

// SaleplanGoodsByGoodStatus retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_good_status_index'.
func SaleplanGoodsByGoodStatus(ctx context.Context, goodStatus int8, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE good_status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, goodStatus)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, goodStatus)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, goodStatus)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}

// SaleplanGoodByID retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_id_pkey'.
func SaleplanGoodByID(ctx context.Context, id uint64, key ...interface{}) (*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sg := SaleplanGood{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &sg, nil
}

// SaleplanGoodsByPid retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_pid_index'.
func SaleplanGoodsByPid(ctx context.Context, pid int, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE pid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, pid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, pid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}

// SaleplanGoodsByPlanEndTime retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_plan_end_time_index'.
func SaleplanGoodsByPlanEndTime(ctx context.Context, planEndTime int, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE plan_end_time = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, planEndTime)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, planEndTime)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, planEndTime)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}

// SaleplanGoodsByPlanID retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_plan_id_index'.
func SaleplanGoodsByPlanID(ctx context.Context, planID int, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE plan_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, planID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, planID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, planID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}

// SaleplanGoodsByPlanStartTime retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_plan_start_time_index'.
func SaleplanGoodsByPlanStartTime(ctx context.Context, planStartTime int, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE plan_start_time = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, planStartTime)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, planStartTime)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, planStartTime)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}

// SaleplanGoodsByPlatformLock retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_platform_lock_index'.
func SaleplanGoodsByPlatformLock(ctx context.Context, platformLock int8, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE platform_lock = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, platformLock)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, platformLock)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, platformLock)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}

// SaleplanGoodsByPrice retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_price_index'.
func SaleplanGoodsByPrice(ctx context.Context, price float64, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE price = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, price)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, price)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, price)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}

// SaleplanGoodsByStatus retrieves a row from 'aypcddg.saleplan_goods' as a SaleplanGood.
//
// Generated from index 'saleplan_goods_status_index'.
func SaleplanGoodsByStatus(ctx context.Context, status int8, key ...interface{}) ([]*SaleplanGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleplanGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, pid, plan_id, plan_type, plan_start_time, plan_end_time, price, stock, frozen_stock, limit_stock, stock_type, sold_num, status, good_status, platform_lock, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*SaleplanGood, 0)
	for queryData.Next() {
		sg := SaleplanGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&sg.ID, &sg.Gid, &sg.Pid, &sg.PlanID, &sg.PlanType, &sg.PlanStartTime, &sg.PlanEndTime, &sg.Price, &sg.Stock, &sg.FrozenStock, &sg.LimitStock, &sg.StockType, &sg.SoldNum, &sg.Status, &sg.GoodStatus, &sg.PlatformLock, &sg.CreatedAt, &sg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &sg)
	}

	return res, nil
}
