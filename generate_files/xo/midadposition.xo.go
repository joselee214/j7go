// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// MidAdPosition represents a row from 'aypcddg.mid_ad_position'.
type MidAdPosition struct {
	ID           uint64         `json:"id"`             // id
	Title        string         `json:"title"`          // title
	SubTitle     string         `json:"sub_title"`      // sub_title
	Type         string         `json:"type"`           // type
	Nums         int            `json:"nums"`           // nums
	Sort         int            `json:"sort"`           // sort
	Status       int8           `json:"status"`         // status
	MidAdminID   int            `json:"mid_admin_id"`   // mid_admin_id
	MidAdminName string         `json:"mid_admin_name"` // mid_admin_name
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MidAdPosition exists in the database.
func (mp *MidAdPosition) Exists() bool { //mid_ad_position
	return mp._exists
}

// Deleted provides information if the MidAdPosition has been deleted from the database.
func (mp *MidAdPosition) Deleted() bool {
	return mp._deleted
}

// Get table name
func GetMidAdPositionTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "mid_ad_position", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the MidAdPosition to the database.
func (mp *MidAdPosition) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if mp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdPositionTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, sub_title, type, nums, sort, status, mid_admin_id, mid_admin_name, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mp.Title, mp.SubTitle, mp.Type, mp.Nums, mp.Sort, mp.Status, mp.MidAdminID, mp.MidAdminName, mp.CreatedAt, mp.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, mp.Title, mp.SubTitle, mp.Type, mp.Nums, mp.Sort, mp.Status, mp.MidAdminID, mp.MidAdminName, mp.CreatedAt, mp.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, mp.Title, mp.SubTitle, mp.Type, mp.Nums, mp.Sort, mp.Status, mp.MidAdminID, mp.MidAdminName, mp.CreatedAt, mp.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mp.ID = uint64(id)
	mp._exists = true

	return nil
}

// Update updates the MidAdPosition in the database.
func (mp *MidAdPosition) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdPositionTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, sub_title = ?, type = ?, nums = ?, sort = ?, status = ?, mid_admin_id = ?, mid_admin_name = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mp.Title, mp.SubTitle, mp.Type, mp.Nums, mp.Sort, mp.Status, mp.MidAdminID, mp.MidAdminName, mp.CreatedAt, mp.UpdatedAt, mp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mp.Title, mp.SubTitle, mp.Type, mp.Nums, mp.Sort, mp.Status, mp.MidAdminID, mp.MidAdminName, mp.CreatedAt, mp.UpdatedAt, mp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mp.Title, mp.SubTitle, mp.Type, mp.Nums, mp.Sort, mp.Status, mp.MidAdminID, mp.MidAdminName, mp.CreatedAt, mp.UpdatedAt, mp.ID)
	}
	return err
}

// Save saves the MidAdPosition to the database.
func (mp *MidAdPosition) Save(ctx context.Context) error {
	if mp.Exists() {
		return mp.Update(ctx)
	}

	return mp.Insert(ctx)
}

// Delete deletes the MidAdPosition from the database.
func (mp *MidAdPosition) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidAdPositionTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mp.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	mp._deleted = true

	return nil
}

// MidAdPositionsByType retrieves a row from 'aypcddg.mid_ad_position' as a MidAdPosition.
//
// Generated from index 'idx_type'.
func MidAdPositionsByType(ctx context.Context, typ string, key ...interface{}) ([]*MidAdPosition, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidAdPositionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, sub_title, type, nums, sort, status, mid_admin_id, mid_admin_name, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE type = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, typ)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, typ)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, typ)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*MidAdPosition, 0)
	for queryData.Next() {
		mp := MidAdPosition{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&mp.ID, &mp.Title, &mp.SubTitle, &mp.Type, &mp.Nums, &mp.Sort, &mp.Status, &mp.MidAdminID, &mp.MidAdminName, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &mp)
	}

	return res, nil
}

// MidAdPositionByID retrieves a row from 'aypcddg.mid_ad_position' as a MidAdPosition.
//
// Generated from index 'mid_ad_position_id_pkey'.
func MidAdPositionByID(ctx context.Context, id uint64, key ...interface{}) (*MidAdPosition, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidAdPositionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, sub_title, type, nums, sort, status, mid_admin_id, mid_admin_name, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mp := MidAdPosition{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&mp.ID, &mp.Title, &mp.SubTitle, &mp.Type, &mp.Nums, &mp.Sort, &mp.Status, &mp.MidAdminID, &mp.MidAdminName, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&mp.ID, &mp.Title, &mp.SubTitle, &mp.Type, &mp.Nums, &mp.Sort, &mp.Status, &mp.MidAdminID, &mp.MidAdminName, &mp.CreatedAt, &mp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mp, nil
}
