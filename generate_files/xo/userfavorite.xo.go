// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// UserFavorite represents a row from 'aypcddg.user_favorite'.
type UserFavorite struct {
	ID         uint64         `json:"id"`          // id
	UID        int            `json:"uid"`         // uid
	Type       string         `json:"type"`        // type
	RelationID int            `json:"relation_id"` // relation_id
	ActivityID int            `json:"activity_id"` // activity_id
	Status     int8           `json:"status"`      // status
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserFavorite exists in the database.
func (uf *UserFavorite) Exists() bool { //user_favorite
	return uf._exists
}

// Deleted provides information if the UserFavorite has been deleted from the database.
func (uf *UserFavorite) Deleted() bool {
	return uf._deleted
}

// Get table name
func GetUserFavoriteTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "user_favorite", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UserFavorite to the database.
func (uf *UserFavorite) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if uf._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserFavoriteTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, type, relation_id, activity_id, status, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uf.UID, uf.Type, uf.RelationID, uf.ActivityID, uf.Status, uf.CreatedAt, uf.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, uf.UID, uf.Type, uf.RelationID, uf.ActivityID, uf.Status, uf.CreatedAt, uf.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, uf.UID, uf.Type, uf.RelationID, uf.ActivityID, uf.Status, uf.CreatedAt, uf.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	uf.ID = uint64(id)
	uf._exists = true

	return nil
}

// Update updates the UserFavorite in the database.
func (uf *UserFavorite) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if uf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserFavoriteTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, type = ?, relation_id = ?, activity_id = ?, status = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uf.UID, uf.Type, uf.RelationID, uf.ActivityID, uf.Status, uf.CreatedAt, uf.UpdatedAt, uf.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, uf.UID, uf.Type, uf.RelationID, uf.ActivityID, uf.Status, uf.CreatedAt, uf.UpdatedAt, uf.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, uf.UID, uf.Type, uf.RelationID, uf.ActivityID, uf.Status, uf.CreatedAt, uf.UpdatedAt, uf.ID)
	}
	return err
}

// Save saves the UserFavorite to the database.
func (uf *UserFavorite) Save(ctx context.Context) error {
	if uf.Exists() {
		return uf.Update(ctx)
	}

	return uf.Insert(ctx)
}

// Delete deletes the UserFavorite from the database.
func (uf *UserFavorite) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if uf._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUserFavoriteTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uf.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, uf.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, uf.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	uf._deleted = true

	return nil
}

// UserFavoriteByID retrieves a row from 'aypcddg.user_favorite' as a UserFavorite.
//
// Generated from index 'user_favorite_id_pkey'.
func UserFavoriteByID(ctx context.Context, id uint64, key ...interface{}) (*UserFavorite, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserFavoriteTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, type, relation_id, activity_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	uf := UserFavorite{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&uf.ID, &uf.UID, &uf.Type, &uf.RelationID, &uf.ActivityID, &uf.Status, &uf.CreatedAt, &uf.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&uf.ID, &uf.UID, &uf.Type, &uf.RelationID, &uf.ActivityID, &uf.Status, &uf.CreatedAt, &uf.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &uf, nil
}

// UserFavoritesByUIDTypeStatus retrieves a row from 'aypcddg.user_favorite' as a UserFavorite.
//
// Generated from index 'user_favorite_uid_type_status_index'.
func UserFavoritesByUIDTypeStatus(ctx context.Context, uid int, typ string, status int8, key ...interface{}) ([]*UserFavorite, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUserFavoriteTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, type, relation_id, activity_id, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE uid = ? AND type = ? AND status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid, typ, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, uid, typ, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, uid, typ, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*UserFavorite, 0)
	for queryData.Next() {
		uf := UserFavorite{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&uf.ID, &uf.UID, &uf.Type, &uf.RelationID, &uf.ActivityID, &uf.Status, &uf.CreatedAt, &uf.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &uf)
	}

	return res, nil
}
