// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// PayOrder represents a row from 'aypcddg.pay_order'.
type PayOrder struct {
	Payid   int `json:"payid"`   // payid
	Orderid int `json:"orderid"` // orderid
	IsPaid  int `json:"is_paid"` // is_paid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PayOrder exists in the database.
func (po *PayOrder) Exists() bool { //pay_order
	return po._exists
}

// Deleted provides information if the PayOrder has been deleted from the database.
func (po *PayOrder) Deleted() bool {
	return po._deleted
}

// Get table name
func GetPayOrderTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "pay_order", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the PayOrder to the database.
func (po *PayOrder) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if po._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPayOrderTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`payid, orderid, is_paid` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, po.Payid, po.Orderid, po.IsPaid)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, po.Payid, po.Orderid, po.IsPaid)
	} else {
		res, err = dbConn.Exec(sqlstr, po.Payid, po.Orderid, po.IsPaid)
	}

	if err != nil {
		return err
	}

	// set existence
	po._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	po.IsPaid = int(id)
	po._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the PayOrder from the database.
func (po *PayOrder) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if po._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPayOrderTableName(key...)
	if err != nil {
		return err
	}
	//3

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE is_paid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, po.IsPaid)))

	if tx != nil {
		_, err = tx.Exec(sqlstr, po.IsPaid)
	} else {
		_, err = dbConn.Exec(sqlstr, po.IsPaid)
	}
	if err != nil {
		return err
	}

	// set deleted
	po._deleted = true

	return nil
}

// PayOrderByIsPaid retrieves a row from 'aypcddg.pay_order' as a PayOrder.
//
// Generated from index 'pay_order_is_paid_pkey'.
func PayOrderByIsPaid(ctx context.Context, isPaid int, key ...interface{}) (*PayOrder, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPayOrderTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`payid, orderid, is_paid ` +
		`FROM ` + tableName +
		` WHERE is_paid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, isPaid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	po := PayOrder{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, isPaid).Scan(&po.Payid, &po.Orderid, &po.IsPaid)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, isPaid).Scan(&po.Payid, &po.Orderid, &po.IsPaid)
		if err != nil {
			return nil, err
		}
	}

	return &po, nil
}
