// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsPriceLog represents a row from 'aypcddg.goods_price_log'.
type GoodsPriceLog struct {
	Gplid     uint64 `json:"gplid"`      // gplid
	Gid       uint64 `json:"gid"`        // gid
	Sid       uint   `json:"sid"`        // sid
	CreatorID uint64 `json:"creator_id"` // creator_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsPriceLog exists in the database.
func (gpl *GoodsPriceLog) Exists() bool { //goods_price_log
	return gpl._exists
}

// Deleted provides information if the GoodsPriceLog has been deleted from the database.
func (gpl *GoodsPriceLog) Deleted() bool {
	return gpl._deleted
}

// Get table name
func GetGoodsPriceLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_price_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsPriceLog to the database.
func (gpl *GoodsPriceLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gpl._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPriceLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`gid, sid, creator_id` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gpl.Gid, gpl.Sid, gpl.CreatorID)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gpl.Gid, gpl.Sid, gpl.CreatorID)
	} else {
		res, err = dbConn.Exec(sqlstr, gpl.Gid, gpl.Sid, gpl.CreatorID)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gpl.Gplid = uint64(id)
	gpl._exists = true

	return nil
}

// Update updates the GoodsPriceLog in the database.
func (gpl *GoodsPriceLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gpl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPriceLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`gid = ?, sid = ?, creator_id = ?` +
		` WHERE gplid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gpl.Gid, gpl.Sid, gpl.CreatorID, gpl.Gplid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gpl.Gid, gpl.Sid, gpl.CreatorID, gpl.Gplid)
	} else {
		_, err = dbConn.Exec(sqlstr, gpl.Gid, gpl.Sid, gpl.CreatorID, gpl.Gplid)
	}
	return err
}

// Save saves the GoodsPriceLog to the database.
func (gpl *GoodsPriceLog) Save(ctx context.Context) error {
	if gpl.Exists() {
		return gpl.Update(ctx)
	}

	return gpl.Insert(ctx)
}

// Delete deletes the GoodsPriceLog from the database.
func (gpl *GoodsPriceLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gpl._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsPriceLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE gplid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gpl.Gplid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gpl.Gplid)
	} else {
		_, err = dbConn.Exec(sqlstr, gpl.Gplid)
	}

	if err != nil {
		return err
	}

	// set deleted
	gpl._deleted = true

	return nil
}

// GoodsPriceLogsBySid retrieves a row from 'aypcddg.goods_price_log' as a GoodsPriceLog.
//
// Generated from index 'fsid'.
func GoodsPriceLogsBySid(ctx context.Context, sid uint, key ...interface{}) ([]*GoodsPriceLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsPriceLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gplid, gid, sid, creator_id ` +
		`FROM ` + tableName +
		` WHERE sid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, sid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, sid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsPriceLog, 0)
	for queryData.Next() {
		gpl := GoodsPriceLog{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gpl.Gplid, &gpl.Gid, &gpl.Sid, &gpl.CreatorID)
		if err != nil {
			return nil, err
		}

		res = append(res, &gpl)
	}

	return res, nil
}

// GoodsPriceLogsByGid retrieves a row from 'aypcddg.goods_price_log' as a GoodsPriceLog.
//
// Generated from index 'gid'.
func GoodsPriceLogsByGid(ctx context.Context, gid uint64, key ...interface{}) ([]*GoodsPriceLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsPriceLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gplid, gid, sid, creator_id ` +
		`FROM ` + tableName +
		` WHERE gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*GoodsPriceLog, 0)
	for queryData.Next() {
		gpl := GoodsPriceLog{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&gpl.Gplid, &gpl.Gid, &gpl.Sid, &gpl.CreatorID)
		if err != nil {
			return nil, err
		}

		res = append(res, &gpl)
	}

	return res, nil
}

// GoodsPriceLogByGplid retrieves a row from 'aypcddg.goods_price_log' as a GoodsPriceLog.
//
// Generated from index 'goods_price_log_gplid_pkey'.
func GoodsPriceLogByGplid(ctx context.Context, gplid uint64, key ...interface{}) (*GoodsPriceLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsPriceLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gplid, gid, sid, creator_id ` +
		`FROM ` + tableName +
		` WHERE gplid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gplid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gpl := GoodsPriceLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, gplid).Scan(&gpl.Gplid, &gpl.Gid, &gpl.Sid, &gpl.CreatorID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, gplid).Scan(&gpl.Gplid, &gpl.Gid, &gpl.Sid, &gpl.CreatorID)
		if err != nil {
			return nil, err
		}
	}

	return &gpl, nil
}
