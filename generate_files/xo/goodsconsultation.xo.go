// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// GoodsConsultation represents a row from 'aypcddg.goods_consultation'.
type GoodsConsultation struct {
	ID           int            `json:"id"`            // id
	Pid          sql.NullInt64  `json:"pid"`           // pid
	Fid          sql.NullInt64  `json:"fid"`           // fid
	UID          sql.NullInt64  `json:"uid"`           // uid
	AskContent   string         `json:"ask_content"`   // ask_content
	CreatedAt    mysql.NullTime `json:"created_at"`    // created_at
	ReplyedAt    mysql.NullTime `json:"replyed_at"`    // replyed_at
	ReplyUID     sql.NullInt64  `json:"reply_uid"`     // reply_uid
	ReplyFid     sql.NullInt64  `json:"reply_fid"`     // reply_fid
	ReplyFsid    sql.NullInt64  `json:"reply_fsid"`    // reply_fsid
	ReplyContent sql.NullString `json:"reply_content"` // reply_content
	Status       sql.NullInt64  `json:"status"`        // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsConsultation exists in the database.
func (gc *GoodsConsultation) Exists() bool { //goods_consultation
	return gc._exists
}

// Deleted provides information if the GoodsConsultation has been deleted from the database.
func (gc *GoodsConsultation) Deleted() bool {
	return gc._deleted
}

// Get table name
func GetGoodsConsultationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_consultation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsConsultation to the database.
func (gc *GoodsConsultation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsConsultationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`pid, fid, uid, ask_content, created_at, replyed_at, reply_uid, reply_fid, reply_fsid, reply_content, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gc.Pid, gc.Fid, gc.UID, gc.AskContent, gc.CreatedAt, gc.ReplyedAt, gc.ReplyUID, gc.ReplyFid, gc.ReplyFsid, gc.ReplyContent, gc.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gc.Pid, gc.Fid, gc.UID, gc.AskContent, gc.CreatedAt, gc.ReplyedAt, gc.ReplyUID, gc.ReplyFid, gc.ReplyFsid, gc.ReplyContent, gc.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, gc.Pid, gc.Fid, gc.UID, gc.AskContent, gc.CreatedAt, gc.ReplyedAt, gc.ReplyUID, gc.ReplyFid, gc.ReplyFsid, gc.ReplyContent, gc.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gc.ID = int(id)
	gc._exists = true

	return nil
}

// Update updates the GoodsConsultation in the database.
func (gc *GoodsConsultation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsConsultationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`pid = ?, fid = ?, uid = ?, ask_content = ?, created_at = ?, replyed_at = ?, reply_uid = ?, reply_fid = ?, reply_fsid = ?, reply_content = ?, status = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gc.Pid, gc.Fid, gc.UID, gc.AskContent, gc.CreatedAt, gc.ReplyedAt, gc.ReplyUID, gc.ReplyFid, gc.ReplyFsid, gc.ReplyContent, gc.Status, gc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gc.Pid, gc.Fid, gc.UID, gc.AskContent, gc.CreatedAt, gc.ReplyedAt, gc.ReplyUID, gc.ReplyFid, gc.ReplyFsid, gc.ReplyContent, gc.Status, gc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, gc.Pid, gc.Fid, gc.UID, gc.AskContent, gc.CreatedAt, gc.ReplyedAt, gc.ReplyUID, gc.ReplyFid, gc.ReplyFsid, gc.ReplyContent, gc.Status, gc.ID)
	}
	return err
}

// Save saves the GoodsConsultation to the database.
func (gc *GoodsConsultation) Save(ctx context.Context) error {
	if gc.Exists() {
		return gc.Update(ctx)
	}

	return gc.Insert(ctx)
}

// Delete deletes the GoodsConsultation from the database.
func (gc *GoodsConsultation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsConsultationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, gc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	gc._deleted = true

	return nil
}

// GoodsConsultationByID retrieves a row from 'aypcddg.goods_consultation' as a GoodsConsultation.
//
// Generated from index 'goods_consultation_id_pkey'.
func GoodsConsultationByID(ctx context.Context, id int, key ...interface{}) (*GoodsConsultation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsConsultationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, pid, fid, uid, ask_content, created_at, replyed_at, reply_uid, reply_fid, reply_fsid, reply_content, status ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gc := GoodsConsultation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&gc.ID, &gc.Pid, &gc.Fid, &gc.UID, &gc.AskContent, &gc.CreatedAt, &gc.ReplyedAt, &gc.ReplyUID, &gc.ReplyFid, &gc.ReplyFsid, &gc.ReplyContent, &gc.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&gc.ID, &gc.Pid, &gc.Fid, &gc.UID, &gc.AskContent, &gc.CreatedAt, &gc.ReplyedAt, &gc.ReplyUID, &gc.ReplyFid, &gc.ReplyFsid, &gc.ReplyContent, &gc.Status)
		if err != nil {
			return nil, err
		}
	}

	return &gc, nil
}
