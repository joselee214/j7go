// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BaseMessageVar represents a row from 'aypcddg.base_message_var'.
type BaseMessageVar struct {
	ID        uint           `json:"id"`         // id
	Title     string         `json:"title"`      // title
	Variate   string         `json:"variate"`    // variate
	Channel   int8           `json:"channel"`    // channel
	Code      string         `json:"code"`       // code
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BaseMessageVar exists in the database.
func (bmv *BaseMessageVar) Exists() bool { //base_message_var
	return bmv._exists
}

// Deleted provides information if the BaseMessageVar has been deleted from the database.
func (bmv *BaseMessageVar) Deleted() bool {
	return bmv._deleted
}

// Get table name
func GetBaseMessageVarTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "base_message_var", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BaseMessageVar to the database.
func (bmv *BaseMessageVar) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if bmv._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageVarTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, variate, channel, code, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmv.Title, bmv.Variate, bmv.Channel, bmv.Code, bmv.CreatedAt, bmv.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, bmv.Title, bmv.Variate, bmv.Channel, bmv.Code, bmv.CreatedAt, bmv.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, bmv.Title, bmv.Variate, bmv.Channel, bmv.Code, bmv.CreatedAt, bmv.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bmv.ID = uint(id)
	bmv._exists = true

	return nil
}

// Update updates the BaseMessageVar in the database.
func (bmv *BaseMessageVar) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bmv._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageVarTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, variate = ?, channel = ?, code = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmv.Title, bmv.Variate, bmv.Channel, bmv.Code, bmv.CreatedAt, bmv.UpdatedAt, bmv.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bmv.Title, bmv.Variate, bmv.Channel, bmv.Code, bmv.CreatedAt, bmv.UpdatedAt, bmv.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bmv.Title, bmv.Variate, bmv.Channel, bmv.Code, bmv.CreatedAt, bmv.UpdatedAt, bmv.ID)
	}
	return err
}

// Save saves the BaseMessageVar to the database.
func (bmv *BaseMessageVar) Save(ctx context.Context) error {
	if bmv.Exists() {
		return bmv.Update(ctx)
	}

	return bmv.Insert(ctx)
}

// Delete deletes the BaseMessageVar from the database.
func (bmv *BaseMessageVar) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bmv._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBaseMessageVarTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bmv.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bmv.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bmv.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	bmv._deleted = true

	return nil
}

// BaseMessageVarByID retrieves a row from 'aypcddg.base_message_var' as a BaseMessageVar.
//
// Generated from index 'base_message_var_id_pkey'.
func BaseMessageVarByID(ctx context.Context, id uint, key ...interface{}) (*BaseMessageVar, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBaseMessageVarTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, variate, channel, code, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bmv := BaseMessageVar{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&bmv.ID, &bmv.Title, &bmv.Variate, &bmv.Channel, &bmv.Code, &bmv.CreatedAt, &bmv.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&bmv.ID, &bmv.Title, &bmv.Variate, &bmv.Channel, &bmv.Code, &bmv.CreatedAt, &bmv.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &bmv, nil
}
