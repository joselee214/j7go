// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// FactoryBrand represents a row from 'aypcddg.factory_brand'.
type FactoryBrand struct {
	Fbid             uint           `json:"fbid"`               // fbid
	Title            sql.NullString `json:"title"`              // title
	Products         sql.NullString `json:"products"`           // products
	Content          sql.NullString `json:"content"`            // content
	Pic              sql.NullString `json:"pic"`                // pic
	DescPics         sql.NullString `json:"desc_pics"`          // desc_pics
	Fid              uint           `json:"fid"`                // fid
	Updated          uint           `json:"updated"`            // updated
	Created          uint           `json:"created"`            // created
	BrandID          sql.NullInt64  `json:"brand_id"`           // brand_id
	ApplyStatus      sql.NullInt64  `json:"apply_status"`       // apply_status
	ApplyTime        mysql.NullTime `json:"apply_time"`         // apply_time
	CheckTime        mysql.NullTime `json:"check_time"`         // check_time
	ReplyContent     sql.NullString `json:"reply_content"`      // reply_content
	GoodsCategoryIds sql.NullString `json:"goods_category_ids"` // goods_category_ids
	AuthChannel      sql.NullString `json:"auth_channel"`       // auth_channel
	AuthLevel        sql.NullString `json:"auth_level"`         // auth_level
	RegisterCert     sql.NullString `json:"register_cert"`      // register_cert
	SaleAuthCert     sql.NullString `json:"sale_auth_cert"`     // sale_auth_cert
	CheckReportCert  sql.NullString `json:"check_report_cert"`  // check_report_cert
	CreatedAt        mysql.NullTime `json:"created_at"`         // created_at
	UpdatedAt        mysql.NullTime `json:"updated_at"`         // updated_at
	UseStatus        sql.NullInt64  `json:"use_status"`         // use_status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryBrand exists in the database.
func (fb *FactoryBrand) Exists() bool { //factory_brand
	return fb._exists
}

// Deleted provides information if the FactoryBrand has been deleted from the database.
func (fb *FactoryBrand) Deleted() bool {
	return fb._deleted
}

// Get table name
func GetFactoryBrandTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_brand", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryBrand to the database.
func (fb *FactoryBrand) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fb._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBrandTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, products, content, pic, desc_pics, fid, updated, created, brand_id, apply_status, apply_time, check_time, reply_content, goods_category_ids, auth_channel, auth_level, register_cert, sale_auth_cert, check_report_cert, created_at, updated_at, use_status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fb.Title, fb.Products, fb.Content, fb.Pic, fb.DescPics, fb.Fid, fb.Updated, fb.Created, fb.BrandID, fb.ApplyStatus, fb.ApplyTime, fb.CheckTime, fb.ReplyContent, fb.GoodsCategoryIds, fb.AuthChannel, fb.AuthLevel, fb.RegisterCert, fb.SaleAuthCert, fb.CheckReportCert, fb.CreatedAt, fb.UpdatedAt, fb.UseStatus)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fb.Title, fb.Products, fb.Content, fb.Pic, fb.DescPics, fb.Fid, fb.Updated, fb.Created, fb.BrandID, fb.ApplyStatus, fb.ApplyTime, fb.CheckTime, fb.ReplyContent, fb.GoodsCategoryIds, fb.AuthChannel, fb.AuthLevel, fb.RegisterCert, fb.SaleAuthCert, fb.CheckReportCert, fb.CreatedAt, fb.UpdatedAt, fb.UseStatus)
	} else {
		res, err = dbConn.Exec(sqlstr, fb.Title, fb.Products, fb.Content, fb.Pic, fb.DescPics, fb.Fid, fb.Updated, fb.Created, fb.BrandID, fb.ApplyStatus, fb.ApplyTime, fb.CheckTime, fb.ReplyContent, fb.GoodsCategoryIds, fb.AuthChannel, fb.AuthLevel, fb.RegisterCert, fb.SaleAuthCert, fb.CheckReportCert, fb.CreatedAt, fb.UpdatedAt, fb.UseStatus)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fb.Fbid = uint(id)
	fb._exists = true

	return nil
}

// Update updates the FactoryBrand in the database.
func (fb *FactoryBrand) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fb._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBrandTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, products = ?, content = ?, pic = ?, desc_pics = ?, fid = ?, updated = ?, created = ?, brand_id = ?, apply_status = ?, apply_time = ?, check_time = ?, reply_content = ?, goods_category_ids = ?, auth_channel = ?, auth_level = ?, register_cert = ?, sale_auth_cert = ?, check_report_cert = ?, created_at = ?, updated_at = ?, use_status = ?` +
		` WHERE fbid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fb.Title, fb.Products, fb.Content, fb.Pic, fb.DescPics, fb.Fid, fb.Updated, fb.Created, fb.BrandID, fb.ApplyStatus, fb.ApplyTime, fb.CheckTime, fb.ReplyContent, fb.GoodsCategoryIds, fb.AuthChannel, fb.AuthLevel, fb.RegisterCert, fb.SaleAuthCert, fb.CheckReportCert, fb.CreatedAt, fb.UpdatedAt, fb.UseStatus, fb.Fbid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fb.Title, fb.Products, fb.Content, fb.Pic, fb.DescPics, fb.Fid, fb.Updated, fb.Created, fb.BrandID, fb.ApplyStatus, fb.ApplyTime, fb.CheckTime, fb.ReplyContent, fb.GoodsCategoryIds, fb.AuthChannel, fb.AuthLevel, fb.RegisterCert, fb.SaleAuthCert, fb.CheckReportCert, fb.CreatedAt, fb.UpdatedAt, fb.UseStatus, fb.Fbid)
	} else {
		_, err = dbConn.Exec(sqlstr, fb.Title, fb.Products, fb.Content, fb.Pic, fb.DescPics, fb.Fid, fb.Updated, fb.Created, fb.BrandID, fb.ApplyStatus, fb.ApplyTime, fb.CheckTime, fb.ReplyContent, fb.GoodsCategoryIds, fb.AuthChannel, fb.AuthLevel, fb.RegisterCert, fb.SaleAuthCert, fb.CheckReportCert, fb.CreatedAt, fb.UpdatedAt, fb.UseStatus, fb.Fbid)
	}
	return err
}

// Save saves the FactoryBrand to the database.
func (fb *FactoryBrand) Save(ctx context.Context) error {
	if fb.Exists() {
		return fb.Update(ctx)
	}

	return fb.Insert(ctx)
}

// Delete deletes the FactoryBrand from the database.
func (fb *FactoryBrand) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fb._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryBrandTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE fbid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fb.Fbid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fb.Fbid)
	} else {
		_, err = dbConn.Exec(sqlstr, fb.Fbid)
	}

	if err != nil {
		return err
	}

	// set deleted
	fb._deleted = true

	return nil
}

// FactoryBrandByFbid retrieves a row from 'aypcddg.factory_brand' as a FactoryBrand.
//
// Generated from index 'factory_brand_fbid_pkey'.
func FactoryBrandByFbid(ctx context.Context, fbid uint, key ...interface{}) (*FactoryBrand, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryBrandTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fbid, title, products, content, pic, desc_pics, fid, updated, created, brand_id, apply_status, apply_time, check_time, reply_content, goods_category_ids, auth_channel, auth_level, register_cert, sale_auth_cert, check_report_cert, created_at, updated_at, use_status ` +
		`FROM ` + tableName +
		` WHERE fbid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fbid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fb := FactoryBrand{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fbid).Scan(&fb.Fbid, &fb.Title, &fb.Products, &fb.Content, &fb.Pic, &fb.DescPics, &fb.Fid, &fb.Updated, &fb.Created, &fb.BrandID, &fb.ApplyStatus, &fb.ApplyTime, &fb.CheckTime, &fb.ReplyContent, &fb.GoodsCategoryIds, &fb.AuthChannel, &fb.AuthLevel, &fb.RegisterCert, &fb.SaleAuthCert, &fb.CheckReportCert, &fb.CreatedAt, &fb.UpdatedAt, &fb.UseStatus)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fbid).Scan(&fb.Fbid, &fb.Title, &fb.Products, &fb.Content, &fb.Pic, &fb.DescPics, &fb.Fid, &fb.Updated, &fb.Created, &fb.BrandID, &fb.ApplyStatus, &fb.ApplyTime, &fb.CheckTime, &fb.ReplyContent, &fb.GoodsCategoryIds, &fb.AuthChannel, &fb.AuthLevel, &fb.RegisterCert, &fb.SaleAuthCert, &fb.CheckReportCert, &fb.CreatedAt, &fb.UpdatedAt, &fb.UseStatus)
		if err != nil {
			return nil, err
		}
	}

	return &fb, nil
}

// FactoryBrandsByFid retrieves a row from 'aypcddg.factory_brand' as a FactoryBrand.
//
// Generated from index 'fid'.
func FactoryBrandsByFid(ctx context.Context, fid uint, key ...interface{}) ([]*FactoryBrand, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryBrandTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fbid, title, products, content, pic, desc_pics, fid, updated, created, brand_id, apply_status, apply_time, check_time, reply_content, goods_category_ids, auth_channel, auth_level, register_cert, sale_auth_cert, check_report_cert, created_at, updated_at, use_status ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryBrand, 0)
	for queryData.Next() {
		fb := FactoryBrand{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fb.Fbid, &fb.Title, &fb.Products, &fb.Content, &fb.Pic, &fb.DescPics, &fb.Fid, &fb.Updated, &fb.Created, &fb.BrandID, &fb.ApplyStatus, &fb.ApplyTime, &fb.CheckTime, &fb.ReplyContent, &fb.GoodsCategoryIds, &fb.AuthChannel, &fb.AuthLevel, &fb.RegisterCert, &fb.SaleAuthCert, &fb.CheckReportCert, &fb.CreatedAt, &fb.UpdatedAt, &fb.UseStatus)
		if err != nil {
			return nil, err
		}

		res = append(res, &fb)
	}

	return res, nil
}
