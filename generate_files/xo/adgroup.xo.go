// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// AdGroup represents a row from 'aypcddg.ad_group'.
type AdGroup struct {
	Agid    int            `json:"agid"`    // agid
	Title   sql.NullString `json:"title"`   // title
	Addby   int            `json:"addby"`   // addby
	Updated int            `json:"updated"` // updated
	Created int            `json:"created"` // created
	Status  bool           `json:"status"`  // status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AdGroup exists in the database.
func (ag *AdGroup) Exists() bool { //ad_group
	return ag._exists
}

// Deleted provides information if the AdGroup has been deleted from the database.
func (ag *AdGroup) Deleted() bool {
	return ag._deleted
}

// Get table name
func GetAdGroupTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "ad_group", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AdGroup to the database.
func (ag *AdGroup) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ag._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdGroupTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, addby, updated, created, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ag.Title, ag.Addby, ag.Updated, ag.Created, ag.Status)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ag.Title, ag.Addby, ag.Updated, ag.Created, ag.Status)
	} else {
		res, err = dbConn.Exec(sqlstr, ag.Title, ag.Addby, ag.Updated, ag.Created, ag.Status)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ag.Agid = int(id)
	ag._exists = true

	return nil
}

// Update updates the AdGroup in the database.
func (ag *AdGroup) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ag._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdGroupTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, addby = ?, updated = ?, created = ?, status = ?` +
		` WHERE agid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ag.Title, ag.Addby, ag.Updated, ag.Created, ag.Status, ag.Agid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ag.Title, ag.Addby, ag.Updated, ag.Created, ag.Status, ag.Agid)
	} else {
		_, err = dbConn.Exec(sqlstr, ag.Title, ag.Addby, ag.Updated, ag.Created, ag.Status, ag.Agid)
	}
	return err
}

// Save saves the AdGroup to the database.
func (ag *AdGroup) Save(ctx context.Context) error {
	if ag.Exists() {
		return ag.Update(ctx)
	}

	return ag.Insert(ctx)
}

// Delete deletes the AdGroup from the database.
func (ag *AdGroup) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ag._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdGroupTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE agid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ag.Agid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ag.Agid)
	} else {
		_, err = dbConn.Exec(sqlstr, ag.Agid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ag._deleted = true

	return nil
}

// AdGroupByAgid retrieves a row from 'aypcddg.ad_group' as a AdGroup.
//
// Generated from index 'ad_group_agid_pkey'.
func AdGroupByAgid(ctx context.Context, agid int, key ...interface{}) (*AdGroup, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdGroupTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`agid, title, addby, updated, created, status ` +
		`FROM ` + tableName +
		` WHERE agid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, agid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ag := AdGroup{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, agid).Scan(&ag.Agid, &ag.Title, &ag.Addby, &ag.Updated, &ag.Created, &ag.Status)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, agid).Scan(&ag.Agid, &ag.Title, &ag.Addby, &ag.Updated, &ag.Created, &ag.Status)
		if err != nil {
			return nil, err
		}
	}

	return &ag, nil
}
