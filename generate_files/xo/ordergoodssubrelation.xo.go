// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// OrderGoodsSubRelation represents a row from 'aypcddg.order_goods_sub_relation'.
type OrderGoodsSubRelation struct {
	OrderGsrid uint64         `json:"order_gsrid"` // order_gsrid
	OrderGid   sql.NullInt64  `json:"order_gid"`   // order_gid
	Orderid    sql.NullInt64  `json:"orderid"`     // orderid
	Gid        sql.NullInt64  `json:"gid"`         // gid
	Number     sql.NullInt64  `json:"number"`      // number
	Remark     sql.NullString `json:"remark"`      // remark
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at
	UID        int            `json:"uid"`         // uid
	ActivityID sql.NullInt64  `json:"activity_id"` // activity_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrderGoodsSubRelation exists in the database.
func (ogsr *OrderGoodsSubRelation) Exists() bool { //order_goods_sub_relation
	return ogsr._exists
}

// Deleted provides information if the OrderGoodsSubRelation has been deleted from the database.
func (ogsr *OrderGoodsSubRelation) Deleted() bool {
	return ogsr._deleted
}

// Get table name
func GetOrderGoodsSubRelationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "order_goods_sub_relation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrderGoodsSubRelation to the database.
func (ogsr *OrderGoodsSubRelation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ogsr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderGoodsSubRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`order_gid, orderid, gid, number, remark, created_at, updated_at, uid, activity_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ogsr.OrderGid, ogsr.Orderid, ogsr.Gid, ogsr.Number, ogsr.Remark, ogsr.CreatedAt, ogsr.UpdatedAt, ogsr.UID, ogsr.ActivityID)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ogsr.OrderGid, ogsr.Orderid, ogsr.Gid, ogsr.Number, ogsr.Remark, ogsr.CreatedAt, ogsr.UpdatedAt, ogsr.UID, ogsr.ActivityID)
	} else {
		res, err = dbConn.Exec(sqlstr, ogsr.OrderGid, ogsr.Orderid, ogsr.Gid, ogsr.Number, ogsr.Remark, ogsr.CreatedAt, ogsr.UpdatedAt, ogsr.UID, ogsr.ActivityID)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ogsr.OrderGsrid = uint64(id)
	ogsr._exists = true

	return nil
}

// Update updates the OrderGoodsSubRelation in the database.
func (ogsr *OrderGoodsSubRelation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ogsr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderGoodsSubRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`order_gid = ?, orderid = ?, gid = ?, number = ?, remark = ?, created_at = ?, updated_at = ?, uid = ?, activity_id = ?` +
		` WHERE order_gsrid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ogsr.OrderGid, ogsr.Orderid, ogsr.Gid, ogsr.Number, ogsr.Remark, ogsr.CreatedAt, ogsr.UpdatedAt, ogsr.UID, ogsr.ActivityID, ogsr.OrderGsrid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ogsr.OrderGid, ogsr.Orderid, ogsr.Gid, ogsr.Number, ogsr.Remark, ogsr.CreatedAt, ogsr.UpdatedAt, ogsr.UID, ogsr.ActivityID, ogsr.OrderGsrid)
	} else {
		_, err = dbConn.Exec(sqlstr, ogsr.OrderGid, ogsr.Orderid, ogsr.Gid, ogsr.Number, ogsr.Remark, ogsr.CreatedAt, ogsr.UpdatedAt, ogsr.UID, ogsr.ActivityID, ogsr.OrderGsrid)
	}
	return err
}

// Save saves the OrderGoodsSubRelation to the database.
func (ogsr *OrderGoodsSubRelation) Save(ctx context.Context) error {
	if ogsr.Exists() {
		return ogsr.Update(ctx)
	}

	return ogsr.Insert(ctx)
}

// Delete deletes the OrderGoodsSubRelation from the database.
func (ogsr *OrderGoodsSubRelation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ogsr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderGoodsSubRelationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE order_gsrid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ogsr.OrderGsrid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ogsr.OrderGsrid)
	} else {
		_, err = dbConn.Exec(sqlstr, ogsr.OrderGsrid)
	}

	if err != nil {
		return err
	}

	// set deleted
	ogsr._deleted = true

	return nil
}

// OrderGoodsSubRelationByOrderGsrid retrieves a row from 'aypcddg.order_goods_sub_relation' as a OrderGoodsSubRelation.
//
// Generated from index 'order_goods_sub_relation_order_gsrid_pkey'.
func OrderGoodsSubRelationByOrderGsrid(ctx context.Context, orderGsrid uint64, key ...interface{}) (*OrderGoodsSubRelation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrderGoodsSubRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`order_gsrid, order_gid, orderid, gid, number, remark, created_at, updated_at, uid, activity_id ` +
		`FROM ` + tableName +
		` WHERE order_gsrid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, orderGsrid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ogsr := OrderGoodsSubRelation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, orderGsrid).Scan(&ogsr.OrderGsrid, &ogsr.OrderGid, &ogsr.Orderid, &ogsr.Gid, &ogsr.Number, &ogsr.Remark, &ogsr.CreatedAt, &ogsr.UpdatedAt, &ogsr.UID, &ogsr.ActivityID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, orderGsrid).Scan(&ogsr.OrderGsrid, &ogsr.OrderGid, &ogsr.Orderid, &ogsr.Gid, &ogsr.Number, &ogsr.Remark, &ogsr.CreatedAt, &ogsr.UpdatedAt, &ogsr.UID, &ogsr.ActivityID)
		if err != nil {
			return nil, err
		}
	}

	return &ogsr, nil
}
