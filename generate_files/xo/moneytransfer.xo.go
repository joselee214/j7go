// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// MoneyTransfer represents a row from 'aypcddg.money_transfer'.
type MoneyTransfer struct {
	Mid           int             `json:"mid"`             // mid
	RoleID        int             `json:"role_id"`         // role_id
	RoleType      int             `json:"role_type"`       // role_type
	Money         float64         `json:"money"`           // money
	Direction     int             `json:"direction"`       // direction
	MoneyLast     sql.NullFloat64 `json:"money_last"`      // money_last
	Created       int             `json:"created"`         // created
	Processid     int             `json:"processid"`       // processid
	OpUID         sql.NullInt64   `json:"op_uid"`          // op_uid
	OpURL         sql.NullString  `json:"op_url"`          // op_url
	ReatedObjID   sql.NullInt64   `json:"reated_obj_id"`   // reated_obj_id
	ReatedObjType int             `json:"reated_obj_type"` // reated_obj_type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MoneyTransfer exists in the database.
func (mt *MoneyTransfer) Exists() bool { //money_transfer
	return mt._exists
}

// Deleted provides information if the MoneyTransfer has been deleted from the database.
func (mt *MoneyTransfer) Deleted() bool {
	return mt._deleted
}

// Get table name
func GetMoneyTransferTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "money_transfer", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the MoneyTransfer to the database.
func (mt *MoneyTransfer) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if mt._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMoneyTransferTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`role_id, role_type, money, direction, money_last, created, processid, op_uid, op_url, reated_obj_id, reated_obj_type` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mt.RoleID, mt.RoleType, mt.Money, mt.Direction, mt.MoneyLast, mt.Created, mt.Processid, mt.OpUID, mt.OpURL, mt.ReatedObjID, mt.ReatedObjType)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, mt.RoleID, mt.RoleType, mt.Money, mt.Direction, mt.MoneyLast, mt.Created, mt.Processid, mt.OpUID, mt.OpURL, mt.ReatedObjID, mt.ReatedObjType)
	} else {
		res, err = dbConn.Exec(sqlstr, mt.RoleID, mt.RoleType, mt.Money, mt.Direction, mt.MoneyLast, mt.Created, mt.Processid, mt.OpUID, mt.OpURL, mt.ReatedObjID, mt.ReatedObjType)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mt.Mid = int(id)
	mt._exists = true

	return nil
}

// Update updates the MoneyTransfer in the database.
func (mt *MoneyTransfer) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMoneyTransferTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`role_id = ?, role_type = ?, money = ?, direction = ?, money_last = ?, created = ?, processid = ?, op_uid = ?, op_url = ?, reated_obj_id = ?, reated_obj_type = ?` +
		` WHERE mid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mt.RoleID, mt.RoleType, mt.Money, mt.Direction, mt.MoneyLast, mt.Created, mt.Processid, mt.OpUID, mt.OpURL, mt.ReatedObjID, mt.ReatedObjType, mt.Mid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mt.RoleID, mt.RoleType, mt.Money, mt.Direction, mt.MoneyLast, mt.Created, mt.Processid, mt.OpUID, mt.OpURL, mt.ReatedObjID, mt.ReatedObjType, mt.Mid)
	} else {
		_, err = dbConn.Exec(sqlstr, mt.RoleID, mt.RoleType, mt.Money, mt.Direction, mt.MoneyLast, mt.Created, mt.Processid, mt.OpUID, mt.OpURL, mt.ReatedObjID, mt.ReatedObjType, mt.Mid)
	}
	return err
}

// Save saves the MoneyTransfer to the database.
func (mt *MoneyTransfer) Save(ctx context.Context) error {
	if mt.Exists() {
		return mt.Update(ctx)
	}

	return mt.Insert(ctx)
}

// Delete deletes the MoneyTransfer from the database.
func (mt *MoneyTransfer) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mt._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMoneyTransferTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE mid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mt.Mid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mt.Mid)
	} else {
		_, err = dbConn.Exec(sqlstr, mt.Mid)
	}

	if err != nil {
		return err
	}

	// set deleted
	mt._deleted = true

	return nil
}

// MoneyTransferByMid retrieves a row from 'aypcddg.money_transfer' as a MoneyTransfer.
//
// Generated from index 'money_transfer_mid_pkey'.
func MoneyTransferByMid(ctx context.Context, mid int, key ...interface{}) (*MoneyTransfer, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMoneyTransferTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`mid, role_id, role_type, money, direction, money_last, created, processid, op_uid, op_url, reated_obj_id, reated_obj_type ` +
		`FROM ` + tableName +
		` WHERE mid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mt := MoneyTransfer{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, mid).Scan(&mt.Mid, &mt.RoleID, &mt.RoleType, &mt.Money, &mt.Direction, &mt.MoneyLast, &mt.Created, &mt.Processid, &mt.OpUID, &mt.OpURL, &mt.ReatedObjID, &mt.ReatedObjType)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, mid).Scan(&mt.Mid, &mt.RoleID, &mt.RoleType, &mt.Money, &mt.Direction, &mt.MoneyLast, &mt.Created, &mt.Processid, &mt.OpUID, &mt.OpURL, &mt.ReatedObjID, &mt.ReatedObjType)
		if err != nil {
			return nil, err
		}
	}

	return &mt, nil
}
