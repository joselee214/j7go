// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// GoodsFavouriteTag represents a row from 'aypcddg.goods_favourite_tag'.
type GoodsFavouriteTag struct {
	Onid         uint           `json:"onid"`          // onid
	TagName      string         `json:"tag_name"`      // tag_name
	RedirectType string         `json:"redirect_type"` // redirect_type
	Data         string         `json:"data"`          // data
	ClickNum     int            `json:"click_num"`     // click_num
	Sort         int            `json:"sort"`          // sort
	Status       int8           `json:"status"`        // status
	CreatedAt    mysql.NullTime `json:"created_at"`    // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`    // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsFavouriteTag exists in the database.
func (gft *GoodsFavouriteTag) Exists() bool { //goods_favourite_tag
	return gft._exists
}

// Deleted provides information if the GoodsFavouriteTag has been deleted from the database.
func (gft *GoodsFavouriteTag) Deleted() bool {
	return gft._deleted
}

// Get table name
func GetGoodsFavouriteTagTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_favourite_tag", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsFavouriteTag to the database.
func (gft *GoodsFavouriteTag) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gft._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsFavouriteTagTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`tag_name, redirect_type, data, click_num, sort, status, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gft.TagName, gft.RedirectType, gft.Data, gft.ClickNum, gft.Sort, gft.Status, gft.CreatedAt, gft.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gft.TagName, gft.RedirectType, gft.Data, gft.ClickNum, gft.Sort, gft.Status, gft.CreatedAt, gft.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, gft.TagName, gft.RedirectType, gft.Data, gft.ClickNum, gft.Sort, gft.Status, gft.CreatedAt, gft.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gft.Onid = uint(id)
	gft._exists = true

	return nil
}

// Update updates the GoodsFavouriteTag in the database.
func (gft *GoodsFavouriteTag) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gft._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsFavouriteTagTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`tag_name = ?, redirect_type = ?, data = ?, click_num = ?, sort = ?, status = ?, created_at = ?, updated_at = ?` +
		` WHERE onid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gft.TagName, gft.RedirectType, gft.Data, gft.ClickNum, gft.Sort, gft.Status, gft.CreatedAt, gft.UpdatedAt, gft.Onid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gft.TagName, gft.RedirectType, gft.Data, gft.ClickNum, gft.Sort, gft.Status, gft.CreatedAt, gft.UpdatedAt, gft.Onid)
	} else {
		_, err = dbConn.Exec(sqlstr, gft.TagName, gft.RedirectType, gft.Data, gft.ClickNum, gft.Sort, gft.Status, gft.CreatedAt, gft.UpdatedAt, gft.Onid)
	}
	return err
}

// Save saves the GoodsFavouriteTag to the database.
func (gft *GoodsFavouriteTag) Save(ctx context.Context) error {
	if gft.Exists() {
		return gft.Update(ctx)
	}

	return gft.Insert(ctx)
}

// Delete deletes the GoodsFavouriteTag from the database.
func (gft *GoodsFavouriteTag) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gft._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsFavouriteTagTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE onid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gft.Onid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gft.Onid)
	} else {
		_, err = dbConn.Exec(sqlstr, gft.Onid)
	}

	if err != nil {
		return err
	}

	// set deleted
	gft._deleted = true

	return nil
}

// GoodsFavouriteTagByOnid retrieves a row from 'aypcddg.goods_favourite_tag' as a GoodsFavouriteTag.
//
// Generated from index 'goods_favourite_tag_onid_pkey'.
func GoodsFavouriteTagByOnid(ctx context.Context, onid uint, key ...interface{}) (*GoodsFavouriteTag, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsFavouriteTagTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`onid, tag_name, redirect_type, data, click_num, sort, status, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE onid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, onid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gft := GoodsFavouriteTag{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, onid).Scan(&gft.Onid, &gft.TagName, &gft.RedirectType, &gft.Data, &gft.ClickNum, &gft.Sort, &gft.Status, &gft.CreatedAt, &gft.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, onid).Scan(&gft.Onid, &gft.TagName, &gft.RedirectType, &gft.Data, &gft.ClickNum, &gft.Sort, &gft.Status, &gft.CreatedAt, &gft.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &gft, nil
}
