// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// AdminInformation represents a row from 'aypcddg.admin_information'.
type AdminInformation struct {
	ID          uint           `json:"id"`           // id
	Title       sql.NullString `json:"title"`        // title
	Description sql.NullString `json:"description"`  // description
	IsTop       sql.NullInt64  `json:"is_top"`       // is_top
	CacheTime   uint           `json:"cache_time"`   // cache_time
	AddUID      int            `json:"add_uid"`      // add_uid
	ShowAgency  int            `json:"show_agency"`  // show_agency
	ShowFactory int            `json:"show_factory"` // show_factory

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AdminInformation exists in the database.
func (ai *AdminInformation) Exists() bool { //admin_information
	return ai._exists
}

// Deleted provides information if the AdminInformation has been deleted from the database.
func (ai *AdminInformation) Deleted() bool {
	return ai._deleted
}

// Get table name
func GetAdminInformationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "admin_information", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AdminInformation to the database.
func (ai *AdminInformation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ai._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdminInformationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, description, is_top, cache_time, add_uid, show_agency, show_factory` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ai.Title, ai.Description, ai.IsTop, ai.CacheTime, ai.AddUID, ai.ShowAgency, ai.ShowFactory)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ai.Title, ai.Description, ai.IsTop, ai.CacheTime, ai.AddUID, ai.ShowAgency, ai.ShowFactory)
	} else {
		res, err = dbConn.Exec(sqlstr, ai.Title, ai.Description, ai.IsTop, ai.CacheTime, ai.AddUID, ai.ShowAgency, ai.ShowFactory)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ai.ID = uint(id)
	ai._exists = true

	return nil
}

// Update updates the AdminInformation in the database.
func (ai *AdminInformation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ai._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdminInformationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, description = ?, is_top = ?, cache_time = ?, add_uid = ?, show_agency = ?, show_factory = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ai.Title, ai.Description, ai.IsTop, ai.CacheTime, ai.AddUID, ai.ShowAgency, ai.ShowFactory, ai.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ai.Title, ai.Description, ai.IsTop, ai.CacheTime, ai.AddUID, ai.ShowAgency, ai.ShowFactory, ai.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ai.Title, ai.Description, ai.IsTop, ai.CacheTime, ai.AddUID, ai.ShowAgency, ai.ShowFactory, ai.ID)
	}
	return err
}

// Save saves the AdminInformation to the database.
func (ai *AdminInformation) Save(ctx context.Context) error {
	if ai.Exists() {
		return ai.Update(ctx)
	}

	return ai.Insert(ctx)
}

// Delete deletes the AdminInformation from the database.
func (ai *AdminInformation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ai._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAdminInformationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ai.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ai.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ai.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ai._deleted = true

	return nil
}

// AdminInformationByID retrieves a row from 'aypcddg.admin_information' as a AdminInformation.
//
// Generated from index 'admin_information_id_pkey'.
func AdminInformationByID(ctx context.Context, id uint, key ...interface{}) (*AdminInformation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAdminInformationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, description, is_top, cache_time, add_uid, show_agency, show_factory ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ai := AdminInformation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ai.ID, &ai.Title, &ai.Description, &ai.IsTop, &ai.CacheTime, &ai.AddUID, &ai.ShowAgency, &ai.ShowFactory)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ai.ID, &ai.Title, &ai.Description, &ai.IsTop, &ai.CacheTime, &ai.AddUID, &ai.ShowAgency, &ai.ShowFactory)
		if err != nil {
			return nil, err
		}
	}

	return &ai, nil
}
