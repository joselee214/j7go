// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"
	"time"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// Activity represents a row from 'aypcddg.activity'.
type Activity struct {
	ID               uint           `json:"id"`                 // id
	Name             string         `json:"name"`               // name
	ActivityTypeID   int            `json:"activity_type_id"`   // activity_type_id
	ActivityTypeCode string         `json:"activity_type_code"` // activity_type_code
	Content          string         `json:"content"`            // content
	ActivityImage    string         `json:"activity_image"`     // activity_image
	ImageURL         string         `json:"image_url"`          // image_url
	ImageColor       string         `json:"image_color"`        // image_color
	Status           int            `json:"status"`             // status
	Sort             int            `json:"sort"`               // sort
	Extend           sql.NullString `json:"extend"`             // extend
	AdminID          int            `json:"admin_id"`           // admin_id
	AdminName        string         `json:"admin_name"`         // admin_name
	StartTime        time.Time      `json:"start_time"`         // start_time
	EndTime          time.Time      `json:"end_time"`           // end_time
	CreatedAt        mysql.NullTime `json:"created_at"`         // created_at
	UpdatedAt        mysql.NullTime `json:"updated_at"`         // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Activity exists in the database.
func (a *Activity) Exists() bool { //activity
	return a._exists
}

// Deleted provides information if the Activity has been deleted from the database.
func (a *Activity) Deleted() bool {
	return a._deleted
}

// Get table name
func GetActivityTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "activity", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Activity to the database.
func (a *Activity) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetActivityTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`name, activity_type_id, activity_type_code, content, activity_image, image_url, image_color, status, sort, extend, admin_id, admin_name, start_time, end_time, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.Name, a.ActivityTypeID, a.ActivityTypeCode, a.Content, a.ActivityImage, a.ImageURL, a.ImageColor, a.Status, a.Sort, a.Extend, a.AdminID, a.AdminName, a.StartTime, a.EndTime, a.CreatedAt, a.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, a.Name, a.ActivityTypeID, a.ActivityTypeCode, a.Content, a.ActivityImage, a.ImageURL, a.ImageColor, a.Status, a.Sort, a.Extend, a.AdminID, a.AdminName, a.StartTime, a.EndTime, a.CreatedAt, a.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, a.Name, a.ActivityTypeID, a.ActivityTypeCode, a.Content, a.ActivityImage, a.ImageURL, a.ImageColor, a.Status, a.Sort, a.Extend, a.AdminID, a.AdminName, a.StartTime, a.EndTime, a.CreatedAt, a.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = uint(id)
	a._exists = true

	return nil
}

// Update updates the Activity in the database.
func (a *Activity) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetActivityTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`name = ?, activity_type_id = ?, activity_type_code = ?, content = ?, activity_image = ?, image_url = ?, image_color = ?, status = ?, sort = ?, extend = ?, admin_id = ?, admin_name = ?, start_time = ?, end_time = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.Name, a.ActivityTypeID, a.ActivityTypeCode, a.Content, a.ActivityImage, a.ImageURL, a.ImageColor, a.Status, a.Sort, a.Extend, a.AdminID, a.AdminName, a.StartTime, a.EndTime, a.CreatedAt, a.UpdatedAt, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.Name, a.ActivityTypeID, a.ActivityTypeCode, a.Content, a.ActivityImage, a.ImageURL, a.ImageColor, a.Status, a.Sort, a.Extend, a.AdminID, a.AdminName, a.StartTime, a.EndTime, a.CreatedAt, a.UpdatedAt, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.Name, a.ActivityTypeID, a.ActivityTypeCode, a.Content, a.ActivityImage, a.ImageURL, a.ImageColor, a.Status, a.Sort, a.Extend, a.AdminID, a.AdminName, a.StartTime, a.EndTime, a.CreatedAt, a.UpdatedAt, a.ID)
	}
	return err
}

// Save saves the Activity to the database.
func (a *Activity) Save(ctx context.Context) error {
	if a.Exists() {
		return a.Update(ctx)
	}

	return a.Insert(ctx)
}

// Delete deletes the Activity from the database.
func (a *Activity) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetActivityTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// ActivityByID retrieves a row from 'aypcddg.activity' as a Activity.
//
// Generated from index 'activity_id_pkey'.
func ActivityByID(ctx context.Context, id uint, key ...interface{}) (*Activity, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetActivityTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, name, activity_type_id, activity_type_code, content, activity_image, image_url, image_color, status, sort, extend, admin_id, admin_name, start_time, end_time, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	a := Activity{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&a.ID, &a.Name, &a.ActivityTypeID, &a.ActivityTypeCode, &a.Content, &a.ActivityImage, &a.ImageURL, &a.ImageColor, &a.Status, &a.Sort, &a.Extend, &a.AdminID, &a.AdminName, &a.StartTime, &a.EndTime, &a.CreatedAt, &a.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&a.ID, &a.Name, &a.ActivityTypeID, &a.ActivityTypeCode, &a.Content, &a.ActivityImage, &a.ImageURL, &a.ImageColor, &a.Status, &a.Sort, &a.Extend, &a.AdminID, &a.AdminName, &a.StartTime, &a.EndTime, &a.CreatedAt, &a.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &a, nil
}

// ActivitiesByStatus retrieves a row from 'aypcddg.activity' as a Activity.
//
// Generated from index 'activity_status_index'.
func ActivitiesByStatus(ctx context.Context, status int, key ...interface{}) ([]*Activity, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetActivityTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, name, activity_type_id, activity_type_code, content, activity_image, image_url, image_color, status, sort, extend, admin_id, admin_name, start_time, end_time, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*Activity, 0)
	for queryData.Next() {
		a := Activity{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&a.ID, &a.Name, &a.ActivityTypeID, &a.ActivityTypeCode, &a.Content, &a.ActivityImage, &a.ImageURL, &a.ImageColor, &a.Status, &a.Sort, &a.Extend, &a.AdminID, &a.AdminName, &a.StartTime, &a.EndTime, &a.CreatedAt, &a.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
