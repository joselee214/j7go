// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"
	"time"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// Sale represents a row from 'aypcddg.sale'.
type Sale struct {
	Sid                  uint           `json:"sid"`                    // sid
	Auid                 sql.NullInt64  `json:"auid"`                   // auid
	Status               int8           `json:"status"`                 // status
	ContractDays         int            `json:"contract_days"`          // contract_days
	WxMchID              sql.NullString `json:"wx_mch_id"`              // wx_mch_id
	Title                sql.NullString `json:"title"`                  // title
	ContractBegin        mysql.NullTime `json:"contract_begin"`         // contract_begin
	ContractEnd          mysql.NullTime `json:"contract_end"`           // contract_end
	Slogo                string         `json:"slogo"`                  // slogo
	DescPics             sql.NullString `json:"desc_pics"`              // desc_pics
	ShopAddress          sql.NullString `json:"shop_address"`           // shop_address
	FactoryNum           int            `json:"factory_num"`            // factory_num
	Created              time.Time      `json:"created"`                // created
	CreateFid            sql.NullInt64  `json:"create_fid"`             // create_fid
	Content              sql.NullString `json:"content"`                // content
	ProvinceID           sql.NullInt64  `json:"province_id"`            // province_id
	CityID               sql.NullInt64  `json:"city_id"`                // city_id
	DistrictID           sql.NullInt64  `json:"district_id"`            // district_id
	Street               sql.NullString `json:"street"`                 // street
	Phone                sql.NullString `json:"phone"`                  // phone
	Mobile               sql.NullString `json:"mobile"`                 // mobile
	Email                sql.NullString `json:"email"`                  // email
	Contact              sql.NullString `json:"contact"`                // contact
	ServiceRank          float64        `json:"service_rank"`           // service_rank
	DeliveryRank         float64        `json:"delivery_rank"`          // delivery_rank
	CommercialLegal      sql.NullString `json:"commercial_legal"`       // commercial_legal
	CommercialLicence    sql.NullString `json:"commercial_licence"`     // commercial_licence
	AccountBank          sql.NullString `json:"account_bank"`           // account_bank
	AccountNumber        sql.NullString `json:"account_number"`         // account_number
	BankName             sql.NullString `json:"bank_name"`              // bank_name
	CommercialLicencePic sql.NullString `json:"commercial_licence_pic"` // commercial_licence_pic
	TaxPic               sql.NullString `json:"tax_pic"`                // tax_pic
	CommercialCodePic    sql.NullString `json:"commercial_code_pic"`    // commercial_code_pic
	BankNamePic          sql.NullString `json:"bank_name_pic"`          // bank_name_pic
	CommercialRegPic     sql.NullString `json:"commercial_reg_pic"`     // commercial_reg_pic
	LegalIdcardPicFront  sql.NullString `json:"legal_idcard_pic_front"` // legal_idcard_pic_front
	LegalIdcardPicBack   sql.NullString `json:"legal_idcard_pic_back"`  // legal_idcard_pic_back
	SpecialProductPic    sql.NullString `json:"special_product_pic"`    // special_product_pic

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Sale exists in the database.
func (s *Sale) Exists() bool { //sale
	return s._exists
}

// Deleted provides information if the Sale has been deleted from the database.
func (s *Sale) Deleted() bool {
	return s._deleted
}

// Get table name
func GetSaleTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "sale", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Sale to the database.
func (s *Sale) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`auid, status, contract_days, wx_mch_id, title, contract_begin, contract_end, slogo, desc_pics, shop_address, factory_num, created, create_fid, content, province_id, city_id, district_id, street, phone, mobile, email, contact, service_rank, delivery_rank, commercial_legal, commercial_licence, account_bank, account_number, bank_name, commercial_licence_pic, tax_pic, commercial_code_pic, bank_name_pic, commercial_reg_pic, legal_idcard_pic_front, legal_idcard_pic_back, special_product_pic` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.Auid, s.Status, s.ContractDays, s.WxMchID, s.Title, s.ContractBegin, s.ContractEnd, s.Slogo, s.DescPics, s.ShopAddress, s.FactoryNum, s.Created, s.CreateFid, s.Content, s.ProvinceID, s.CityID, s.DistrictID, s.Street, s.Phone, s.Mobile, s.Email, s.Contact, s.ServiceRank, s.DeliveryRank, s.CommercialLegal, s.CommercialLicence, s.AccountBank, s.AccountNumber, s.BankName, s.CommercialLicencePic, s.TaxPic, s.CommercialCodePic, s.BankNamePic, s.CommercialRegPic, s.LegalIdcardPicFront, s.LegalIdcardPicBack, s.SpecialProductPic)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, s.Auid, s.Status, s.ContractDays, s.WxMchID, s.Title, s.ContractBegin, s.ContractEnd, s.Slogo, s.DescPics, s.ShopAddress, s.FactoryNum, s.Created, s.CreateFid, s.Content, s.ProvinceID, s.CityID, s.DistrictID, s.Street, s.Phone, s.Mobile, s.Email, s.Contact, s.ServiceRank, s.DeliveryRank, s.CommercialLegal, s.CommercialLicence, s.AccountBank, s.AccountNumber, s.BankName, s.CommercialLicencePic, s.TaxPic, s.CommercialCodePic, s.BankNamePic, s.CommercialRegPic, s.LegalIdcardPicFront, s.LegalIdcardPicBack, s.SpecialProductPic)
	} else {
		res, err = dbConn.Exec(sqlstr, s.Auid, s.Status, s.ContractDays, s.WxMchID, s.Title, s.ContractBegin, s.ContractEnd, s.Slogo, s.DescPics, s.ShopAddress, s.FactoryNum, s.Created, s.CreateFid, s.Content, s.ProvinceID, s.CityID, s.DistrictID, s.Street, s.Phone, s.Mobile, s.Email, s.Contact, s.ServiceRank, s.DeliveryRank, s.CommercialLegal, s.CommercialLicence, s.AccountBank, s.AccountNumber, s.BankName, s.CommercialLicencePic, s.TaxPic, s.CommercialCodePic, s.BankNamePic, s.CommercialRegPic, s.LegalIdcardPicFront, s.LegalIdcardPicBack, s.SpecialProductPic)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.Sid = uint(id)
	s._exists = true

	return nil
}

// Update updates the Sale in the database.
func (s *Sale) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`auid = ?, status = ?, contract_days = ?, wx_mch_id = ?, title = ?, contract_begin = ?, contract_end = ?, slogo = ?, desc_pics = ?, shop_address = ?, factory_num = ?, created = ?, create_fid = ?, content = ?, province_id = ?, city_id = ?, district_id = ?, street = ?, phone = ?, mobile = ?, email = ?, contact = ?, service_rank = ?, delivery_rank = ?, commercial_legal = ?, commercial_licence = ?, account_bank = ?, account_number = ?, bank_name = ?, commercial_licence_pic = ?, tax_pic = ?, commercial_code_pic = ?, bank_name_pic = ?, commercial_reg_pic = ?, legal_idcard_pic_front = ?, legal_idcard_pic_back = ?, special_product_pic = ?` +
		` WHERE sid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.Auid, s.Status, s.ContractDays, s.WxMchID, s.Title, s.ContractBegin, s.ContractEnd, s.Slogo, s.DescPics, s.ShopAddress, s.FactoryNum, s.Created, s.CreateFid, s.Content, s.ProvinceID, s.CityID, s.DistrictID, s.Street, s.Phone, s.Mobile, s.Email, s.Contact, s.ServiceRank, s.DeliveryRank, s.CommercialLegal, s.CommercialLicence, s.AccountBank, s.AccountNumber, s.BankName, s.CommercialLicencePic, s.TaxPic, s.CommercialCodePic, s.BankNamePic, s.CommercialRegPic, s.LegalIdcardPicFront, s.LegalIdcardPicBack, s.SpecialProductPic, s.Sid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, s.Auid, s.Status, s.ContractDays, s.WxMchID, s.Title, s.ContractBegin, s.ContractEnd, s.Slogo, s.DescPics, s.ShopAddress, s.FactoryNum, s.Created, s.CreateFid, s.Content, s.ProvinceID, s.CityID, s.DistrictID, s.Street, s.Phone, s.Mobile, s.Email, s.Contact, s.ServiceRank, s.DeliveryRank, s.CommercialLegal, s.CommercialLicence, s.AccountBank, s.AccountNumber, s.BankName, s.CommercialLicencePic, s.TaxPic, s.CommercialCodePic, s.BankNamePic, s.CommercialRegPic, s.LegalIdcardPicFront, s.LegalIdcardPicBack, s.SpecialProductPic, s.Sid)
	} else {
		_, err = dbConn.Exec(sqlstr, s.Auid, s.Status, s.ContractDays, s.WxMchID, s.Title, s.ContractBegin, s.ContractEnd, s.Slogo, s.DescPics, s.ShopAddress, s.FactoryNum, s.Created, s.CreateFid, s.Content, s.ProvinceID, s.CityID, s.DistrictID, s.Street, s.Phone, s.Mobile, s.Email, s.Contact, s.ServiceRank, s.DeliveryRank, s.CommercialLegal, s.CommercialLicence, s.AccountBank, s.AccountNumber, s.BankName, s.CommercialLicencePic, s.TaxPic, s.CommercialCodePic, s.BankNamePic, s.CommercialRegPic, s.LegalIdcardPicFront, s.LegalIdcardPicBack, s.SpecialProductPic, s.Sid)
	}
	return err
}

// Save saves the Sale to the database.
func (s *Sale) Save(ctx context.Context) error {
	if s.Exists() {
		return s.Update(ctx)
	}

	return s.Insert(ctx)
}

// Delete deletes the Sale from the database.
func (s *Sale) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if s._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE sid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.Sid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, s.Sid)
	} else {
		_, err = dbConn.Exec(sqlstr, s.Sid)
	}

	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// SaleBySid retrieves a row from 'aypcddg.sale' as a Sale.
//
// Generated from index 'sale_sid_pkey'.
func SaleBySid(ctx context.Context, sid uint, key ...interface{}) (*Sale, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`sid, auid, status, contract_days, wx_mch_id, title, contract_begin, contract_end, slogo, desc_pics, shop_address, factory_num, created, create_fid, content, province_id, city_id, district_id, street, phone, mobile, email, contact, service_rank, delivery_rank, commercial_legal, commercial_licence, account_bank, account_number, bank_name, commercial_licence_pic, tax_pic, commercial_code_pic, bank_name_pic, commercial_reg_pic, legal_idcard_pic_front, legal_idcard_pic_back, special_product_pic ` +
		`FROM ` + tableName +
		` WHERE sid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	s := Sale{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, sid).Scan(&s.Sid, &s.Auid, &s.Status, &s.ContractDays, &s.WxMchID, &s.Title, &s.ContractBegin, &s.ContractEnd, &s.Slogo, &s.DescPics, &s.ShopAddress, &s.FactoryNum, &s.Created, &s.CreateFid, &s.Content, &s.ProvinceID, &s.CityID, &s.DistrictID, &s.Street, &s.Phone, &s.Mobile, &s.Email, &s.Contact, &s.ServiceRank, &s.DeliveryRank, &s.CommercialLegal, &s.CommercialLicence, &s.AccountBank, &s.AccountNumber, &s.BankName, &s.CommercialLicencePic, &s.TaxPic, &s.CommercialCodePic, &s.BankNamePic, &s.CommercialRegPic, &s.LegalIdcardPicFront, &s.LegalIdcardPicBack, &s.SpecialProductPic)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, sid).Scan(&s.Sid, &s.Auid, &s.Status, &s.ContractDays, &s.WxMchID, &s.Title, &s.ContractBegin, &s.ContractEnd, &s.Slogo, &s.DescPics, &s.ShopAddress, &s.FactoryNum, &s.Created, &s.CreateFid, &s.Content, &s.ProvinceID, &s.CityID, &s.DistrictID, &s.Street, &s.Phone, &s.Mobile, &s.Email, &s.Contact, &s.ServiceRank, &s.DeliveryRank, &s.CommercialLegal, &s.CommercialLicence, &s.AccountBank, &s.AccountNumber, &s.BankName, &s.CommercialLicencePic, &s.TaxPic, &s.CommercialCodePic, &s.BankNamePic, &s.CommercialRegPic, &s.LegalIdcardPicFront, &s.LegalIdcardPicBack, &s.SpecialProductPic)
		if err != nil {
			return nil, err
		}
	}

	return &s, nil
}
