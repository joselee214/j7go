// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// UsersShopTrace represents a row from 'aypcddg.users_shop_trace'.
type UsersShopTrace struct {
	ID      int            `json:"id"`      // id
	Openid  string         `json:"openid"`  // openid
	Unionid sql.NullString `json:"unionid"` // unionid
	Appid   sql.NullString `json:"appid"`   // appid
	UID     sql.NullInt64  `json:"uid"`     // uid
	Fid     sql.NullInt64  `json:"fid"`     // fid
	Sid     sql.NullInt64  `json:"sid"`     // sid
	Updated mysql.NullTime `json:"updated"` // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UsersShopTrace exists in the database.
func (ust *UsersShopTrace) Exists() bool { //users_shop_trace
	return ust._exists
}

// Deleted provides information if the UsersShopTrace has been deleted from the database.
func (ust *UsersShopTrace) Deleted() bool {
	return ust._deleted
}

// Get table name
func GetUsersShopTraceTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "users_shop_trace", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the UsersShopTrace to the database.
func (ust *UsersShopTrace) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ust._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersShopTraceTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`openid, unionid, appid, uid, fid, sid, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ust.Openid, ust.Unionid, ust.Appid, ust.UID, ust.Fid, ust.Sid, ust.Updated)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ust.Openid, ust.Unionid, ust.Appid, ust.UID, ust.Fid, ust.Sid, ust.Updated)
	} else {
		res, err = dbConn.Exec(sqlstr, ust.Openid, ust.Unionid, ust.Appid, ust.UID, ust.Fid, ust.Sid, ust.Updated)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ust.ID = int(id)
	ust._exists = true

	return nil
}

// Update updates the UsersShopTrace in the database.
func (ust *UsersShopTrace) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ust._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersShopTraceTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`openid = ?, unionid = ?, appid = ?, uid = ?, fid = ?, sid = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ust.Openid, ust.Unionid, ust.Appid, ust.UID, ust.Fid, ust.Sid, ust.Updated, ust.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ust.Openid, ust.Unionid, ust.Appid, ust.UID, ust.Fid, ust.Sid, ust.Updated, ust.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ust.Openid, ust.Unionid, ust.Appid, ust.UID, ust.Fid, ust.Sid, ust.Updated, ust.ID)
	}
	return err
}

// Save saves the UsersShopTrace to the database.
func (ust *UsersShopTrace) Save(ctx context.Context) error {
	if ust.Exists() {
		return ust.Update(ctx)
	}

	return ust.Insert(ctx)
}

// Delete deletes the UsersShopTrace from the database.
func (ust *UsersShopTrace) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ust._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetUsersShopTraceTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ust.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ust.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ust.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ust._deleted = true

	return nil
}

// UsersShopTraceByFidOpenidAppidSid retrieves a row from 'aypcddg.users_shop_trace' as a UsersShopTrace.
//
// Generated from index 'search'.
func UsersShopTraceByFidOpenidAppidSid(ctx context.Context, fid sql.NullInt64, openid string, appid sql.NullString, sid sql.NullInt64, key ...interface{}) (*UsersShopTrace, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUsersShopTraceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, openid, unionid, appid, uid, fid, sid, updated ` +
		`FROM ` + tableName +
		` WHERE fid = ? AND openid = ? AND appid = ? AND sid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid, openid, appid, sid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ust := UsersShopTrace{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fid, openid, appid, sid).Scan(&ust.ID, &ust.Openid, &ust.Unionid, &ust.Appid, &ust.UID, &ust.Fid, &ust.Sid, &ust.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fid, openid, appid, sid).Scan(&ust.ID, &ust.Openid, &ust.Unionid, &ust.Appid, &ust.UID, &ust.Fid, &ust.Sid, &ust.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &ust, nil
}

// UsersShopTraceByID retrieves a row from 'aypcddg.users_shop_trace' as a UsersShopTrace.
//
// Generated from index 'users_shop_trace_id_pkey'.
func UsersShopTraceByID(ctx context.Context, id int, key ...interface{}) (*UsersShopTrace, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetUsersShopTraceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, openid, unionid, appid, uid, fid, sid, updated ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ust := UsersShopTrace{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ust.ID, &ust.Openid, &ust.Unionid, &ust.Appid, &ust.UID, &ust.Fid, &ust.Sid, &ust.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ust.ID, &ust.Openid, &ust.Unionid, &ust.Appid, &ust.UID, &ust.Fid, &ust.Sid, &ust.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &ust, nil
}
