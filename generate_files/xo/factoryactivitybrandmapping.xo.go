// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// FactoryActivityBrandMapping represents a row from 'aypcddg.factory_activity_brand_mapping'.
type FactoryActivityBrandMapping struct {
	ID                uint           `json:"id"`                  // id
	FactoryActivityID int            `json:"factory_activity_id"` // factory_activity_id
	BrandID           int            `json:"brand_id"`            // brand_id
	FactoryBrandID    int            `json:"factory_brand_id"`    // factory_brand_id
	CreatedAt         mysql.NullTime `json:"created_at"`          // created_at
	UpdatedAt         mysql.NullTime `json:"updated_at"`          // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryActivityBrandMapping exists in the database.
func (fabm *FactoryActivityBrandMapping) Exists() bool { //factory_activity_brand_mapping
	return fabm._exists
}

// Deleted provides information if the FactoryActivityBrandMapping has been deleted from the database.
func (fabm *FactoryActivityBrandMapping) Deleted() bool {
	return fabm._deleted
}

// Get table name
func GetFactoryActivityBrandMappingTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_activity_brand_mapping", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryActivityBrandMapping to the database.
func (fabm *FactoryActivityBrandMapping) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fabm._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryActivityBrandMappingTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`factory_activity_id, brand_id, factory_brand_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fabm.FactoryActivityID, fabm.BrandID, fabm.FactoryBrandID, fabm.CreatedAt, fabm.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fabm.FactoryActivityID, fabm.BrandID, fabm.FactoryBrandID, fabm.CreatedAt, fabm.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, fabm.FactoryActivityID, fabm.BrandID, fabm.FactoryBrandID, fabm.CreatedAt, fabm.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fabm.ID = uint(id)
	fabm._exists = true

	return nil
}

// Update updates the FactoryActivityBrandMapping in the database.
func (fabm *FactoryActivityBrandMapping) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fabm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryActivityBrandMappingTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`factory_activity_id = ?, brand_id = ?, factory_brand_id = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fabm.FactoryActivityID, fabm.BrandID, fabm.FactoryBrandID, fabm.CreatedAt, fabm.UpdatedAt, fabm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fabm.FactoryActivityID, fabm.BrandID, fabm.FactoryBrandID, fabm.CreatedAt, fabm.UpdatedAt, fabm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fabm.FactoryActivityID, fabm.BrandID, fabm.FactoryBrandID, fabm.CreatedAt, fabm.UpdatedAt, fabm.ID)
	}
	return err
}

// Save saves the FactoryActivityBrandMapping to the database.
func (fabm *FactoryActivityBrandMapping) Save(ctx context.Context) error {
	if fabm.Exists() {
		return fabm.Update(ctx)
	}

	return fabm.Insert(ctx)
}

// Delete deletes the FactoryActivityBrandMapping from the database.
func (fabm *FactoryActivityBrandMapping) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fabm._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryActivityBrandMappingTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fabm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fabm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fabm.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fabm._deleted = true

	return nil
}

// FactoryActivityBrandMappingsByFactoryActivityID retrieves a row from 'aypcddg.factory_activity_brand_mapping' as a FactoryActivityBrandMapping.
//
// Generated from index 'factory_activity_brand_mapping_factory_activity_id_index'.
func FactoryActivityBrandMappingsByFactoryActivityID(ctx context.Context, factoryActivityID int, key ...interface{}) ([]*FactoryActivityBrandMapping, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryActivityBrandMappingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, factory_activity_id, brand_id, factory_brand_id, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE factory_activity_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, factoryActivityID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, factoryActivityID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, factoryActivityID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactoryActivityBrandMapping, 0)
	for queryData.Next() {
		fabm := FactoryActivityBrandMapping{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fabm.ID, &fabm.FactoryActivityID, &fabm.BrandID, &fabm.FactoryBrandID, &fabm.CreatedAt, &fabm.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &fabm)
	}

	return res, nil
}

// FactoryActivityBrandMappingByID retrieves a row from 'aypcddg.factory_activity_brand_mapping' as a FactoryActivityBrandMapping.
//
// Generated from index 'factory_activity_brand_mapping_id_pkey'.
func FactoryActivityBrandMappingByID(ctx context.Context, id uint, key ...interface{}) (*FactoryActivityBrandMapping, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryActivityBrandMappingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, factory_activity_id, brand_id, factory_brand_id, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fabm := FactoryActivityBrandMapping{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&fabm.ID, &fabm.FactoryActivityID, &fabm.BrandID, &fabm.FactoryBrandID, &fabm.CreatedAt, &fabm.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&fabm.ID, &fabm.FactoryActivityID, &fabm.BrandID, &fabm.FactoryBrandID, &fabm.CreatedAt, &fabm.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &fabm, nil
}
