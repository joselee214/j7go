// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// GoodsConsultationBb represents a row from 'aypcddg.goods_consultation_bb'.
type GoodsConsultationBb struct {
	ID       int            `json:"id"`        // id
	Pid      sql.NullInt64  `json:"pid"`       // pid
	Gid      sql.NullInt64  `json:"gid"`       // gid
	UID      sql.NullInt64  `json:"uid"`       // uid
	AdminUID int            `json:"admin_uid"` // admin_uid
	Type     sql.NullBool   `json:"type"`      // type
	Content  sql.NullString `json:"content"`   // content
	Addtime  sql.NullInt64  `json:"addTime"`   // addTime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoodsConsultationBb exists in the database.
func (gcb *GoodsConsultationBb) Exists() bool { //goods_consultation_bb
	return gcb._exists
}

// Deleted provides information if the GoodsConsultationBb has been deleted from the database.
func (gcb *GoodsConsultationBb) Deleted() bool {
	return gcb._deleted
}

// Get table name
func GetGoodsConsultationBbTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "goods_consultation_bb", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the GoodsConsultationBb to the database.
func (gcb *GoodsConsultationBb) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if gcb._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsConsultationBbTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`pid, gid, uid, admin_uid, type, content, addTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gcb.Pid, gcb.Gid, gcb.UID, gcb.AdminUID, gcb.Type, gcb.Content, gcb.Addtime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, gcb.Pid, gcb.Gid, gcb.UID, gcb.AdminUID, gcb.Type, gcb.Content, gcb.Addtime)
	} else {
		res, err = dbConn.Exec(sqlstr, gcb.Pid, gcb.Gid, gcb.UID, gcb.AdminUID, gcb.Type, gcb.Content, gcb.Addtime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	gcb.ID = int(id)
	gcb._exists = true

	return nil
}

// Update updates the GoodsConsultationBb in the database.
func (gcb *GoodsConsultationBb) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gcb._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsConsultationBbTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`pid = ?, gid = ?, uid = ?, admin_uid = ?, type = ?, content = ?, addTime = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gcb.Pid, gcb.Gid, gcb.UID, gcb.AdminUID, gcb.Type, gcb.Content, gcb.Addtime, gcb.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gcb.Pid, gcb.Gid, gcb.UID, gcb.AdminUID, gcb.Type, gcb.Content, gcb.Addtime, gcb.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, gcb.Pid, gcb.Gid, gcb.UID, gcb.AdminUID, gcb.Type, gcb.Content, gcb.Addtime, gcb.ID)
	}
	return err
}

// Save saves the GoodsConsultationBb to the database.
func (gcb *GoodsConsultationBb) Save(ctx context.Context) error {
	if gcb.Exists() {
		return gcb.Update(ctx)
	}

	return gcb.Insert(ctx)
}

// Delete deletes the GoodsConsultationBb from the database.
func (gcb *GoodsConsultationBb) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if gcb._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetGoodsConsultationBbTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gcb.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, gcb.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, gcb.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	gcb._deleted = true

	return nil
}

// GoodsConsultationBbByID retrieves a row from 'aypcddg.goods_consultation_bb' as a GoodsConsultationBb.
//
// Generated from index 'goods_consultation_bb_id_pkey'.
func GoodsConsultationBbByID(ctx context.Context, id int, key ...interface{}) (*GoodsConsultationBb, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetGoodsConsultationBbTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, pid, gid, uid, admin_uid, type, content, addTime ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	gcb := GoodsConsultationBb{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&gcb.ID, &gcb.Pid, &gcb.Gid, &gcb.UID, &gcb.AdminUID, &gcb.Type, &gcb.Content, &gcb.Addtime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&gcb.ID, &gcb.Pid, &gcb.Gid, &gcb.UID, &gcb.AdminUID, &gcb.Type, &gcb.Content, &gcb.Addtime)
		if err != nil {
			return nil, err
		}
	}

	return &gcb, nil
}
