// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"
	"time"

	"go.uber.org/zap"
)

// SelfDomain represents a row from 'aypcddg.self_domains'.
type SelfDomain struct {
	ID         int       `json:"id"`          // id
	Domain     string    `json:"domain"`      // domain
	Dtype      int       `json:"dtype"`       // dtype
	ExpireTime time.Time `json:"expire_time"` // expire_time
	Fid        int       `json:"fid"`         // fid
	Fsid       int       `json:"fsid"`        // fsid
	Fbid       int       `json:"fbid"`        // fbid
	App        string    `json:"app"`         // app
	Layoutid   int       `json:"layoutid"`    // layoutid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SelfDomain exists in the database.
func (sd *SelfDomain) Exists() bool { //self_domains
	return sd._exists
}

// Deleted provides information if the SelfDomain has been deleted from the database.
func (sd *SelfDomain) Deleted() bool {
	return sd._deleted
}

// Get table name
func GetSelfDomainTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "self_domains", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SelfDomain to the database.
func (sd *SelfDomain) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sd._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfDomainTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`domain, dtype, expire_time, fid, fsid, fbid, app, layoutid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sd.Domain, sd.Dtype, sd.ExpireTime, sd.Fid, sd.Fsid, sd.Fbid, sd.App, sd.Layoutid)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sd.Domain, sd.Dtype, sd.ExpireTime, sd.Fid, sd.Fsid, sd.Fbid, sd.App, sd.Layoutid)
	} else {
		res, err = dbConn.Exec(sqlstr, sd.Domain, sd.Dtype, sd.ExpireTime, sd.Fid, sd.Fsid, sd.Fbid, sd.App, sd.Layoutid)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sd.ID = int(id)
	sd._exists = true

	return nil
}

// Update updates the SelfDomain in the database.
func (sd *SelfDomain) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfDomainTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`domain = ?, dtype = ?, expire_time = ?, fid = ?, fsid = ?, fbid = ?, app = ?, layoutid = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sd.Domain, sd.Dtype, sd.ExpireTime, sd.Fid, sd.Fsid, sd.Fbid, sd.App, sd.Layoutid, sd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sd.Domain, sd.Dtype, sd.ExpireTime, sd.Fid, sd.Fsid, sd.Fbid, sd.App, sd.Layoutid, sd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sd.Domain, sd.Dtype, sd.ExpireTime, sd.Fid, sd.Fsid, sd.Fbid, sd.App, sd.Layoutid, sd.ID)
	}
	return err
}

// Save saves the SelfDomain to the database.
func (sd *SelfDomain) Save(ctx context.Context) error {
	if sd.Exists() {
		return sd.Update(ctx)
	}

	return sd.Insert(ctx)
}

// Delete deletes the SelfDomain from the database.
func (sd *SelfDomain) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sd._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSelfDomainTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sd.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sd.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sd.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sd._deleted = true

	return nil
}

// SelfDomainByDomain retrieves a row from 'aypcddg.self_domains' as a SelfDomain.
//
// Generated from index 'domain'.
func SelfDomainByDomain(ctx context.Context, domain string, key ...interface{}) (*SelfDomain, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSelfDomainTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, domain, dtype, expire_time, fid, fsid, fbid, app, layoutid ` +
		`FROM ` + tableName +
		` WHERE domain = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, domain)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sd := SelfDomain{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, domain).Scan(&sd.ID, &sd.Domain, &sd.Dtype, &sd.ExpireTime, &sd.Fid, &sd.Fsid, &sd.Fbid, &sd.App, &sd.Layoutid)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, domain).Scan(&sd.ID, &sd.Domain, &sd.Dtype, &sd.ExpireTime, &sd.Fid, &sd.Fsid, &sd.Fbid, &sd.App, &sd.Layoutid)
		if err != nil {
			return nil, err
		}
	}

	return &sd, nil
}

// SelfDomainByID retrieves a row from 'aypcddg.self_domains' as a SelfDomain.
//
// Generated from index 'self_domains_id_pkey'.
func SelfDomainByID(ctx context.Context, id int, key ...interface{}) (*SelfDomain, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSelfDomainTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, domain, dtype, expire_time, fid, fsid, fbid, app, layoutid ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sd := SelfDomain{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sd.ID, &sd.Domain, &sd.Dtype, &sd.ExpireTime, &sd.Fid, &sd.Fsid, &sd.Fbid, &sd.App, &sd.Layoutid)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sd.ID, &sd.Domain, &sd.Dtype, &sd.ExpireTime, &sd.Fid, &sd.Fsid, &sd.Fbid, &sd.App, &sd.Layoutid)
		if err != nil {
			return nil, err
		}
	}

	return &sd, nil
}
