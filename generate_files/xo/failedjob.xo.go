// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"
	"time"

	"go.uber.org/zap"
)

// FailedJob represents a row from 'aypcddg.failed_jobs'.
type FailedJob struct {
	ID         uint64    `json:"id"`         // id
	Connection string    `json:"connection"` // connection
	Queue      string    `json:"queue"`      // queue
	Payload    string    `json:"payload"`    // payload
	Exception  string    `json:"exception"`  // exception
	FailedAt   time.Time `json:"failed_at"`  // failed_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FailedJob exists in the database.
func (fj *FailedJob) Exists() bool { //failed_jobs
	return fj._exists
}

// Deleted provides information if the FailedJob has been deleted from the database.
func (fj *FailedJob) Deleted() bool {
	return fj._deleted
}

// Get table name
func GetFailedJobTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "failed_jobs", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FailedJob to the database.
func (fj *FailedJob) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fj._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFailedJobTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`connection, queue, payload, exception, failed_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fj.Connection, fj.Queue, fj.Payload, fj.Exception, fj.FailedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fj.Connection, fj.Queue, fj.Payload, fj.Exception, fj.FailedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, fj.Connection, fj.Queue, fj.Payload, fj.Exception, fj.FailedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fj.ID = uint64(id)
	fj._exists = true

	return nil
}

// Update updates the FailedJob in the database.
func (fj *FailedJob) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fj._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFailedJobTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`connection = ?, queue = ?, payload = ?, exception = ?, failed_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fj.Connection, fj.Queue, fj.Payload, fj.Exception, fj.FailedAt, fj.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fj.Connection, fj.Queue, fj.Payload, fj.Exception, fj.FailedAt, fj.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fj.Connection, fj.Queue, fj.Payload, fj.Exception, fj.FailedAt, fj.ID)
	}
	return err
}

// Save saves the FailedJob to the database.
func (fj *FailedJob) Save(ctx context.Context) error {
	if fj.Exists() {
		return fj.Update(ctx)
	}

	return fj.Insert(ctx)
}

// Delete deletes the FailedJob from the database.
func (fj *FailedJob) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fj._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFailedJobTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fj.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fj.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fj.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fj._deleted = true

	return nil
}

// FailedJobByID retrieves a row from 'aypcddg.failed_jobs' as a FailedJob.
//
// Generated from index 'failed_jobs_id_pkey'.
func FailedJobByID(ctx context.Context, id uint64, key ...interface{}) (*FailedJob, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFailedJobTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, connection, queue, payload, exception, failed_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fj := FailedJob{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&fj.ID, &fj.Connection, &fj.Queue, &fj.Payload, &fj.Exception, &fj.FailedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&fj.ID, &fj.Connection, &fj.Queue, &fj.Payload, &fj.Exception, &fj.FailedAt)
		if err != nil {
			return nil, err
		}
	}

	return &fj, nil
}
