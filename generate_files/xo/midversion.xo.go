// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// MidVersion represents a row from 'aypcddg.mid_version'.
type MidVersion struct {
	ID           uint64         `json:"id"`             // id
	VCode        int            `json:"v_code"`         // v_code
	Version      string         `json:"version"`        // version
	Platform     string         `json:"platform"`       // platform
	Name         string         `json:"name"`           // name
	Title        string         `json:"title"`          // title
	Desc         string         `json:"desc"`           // desc
	URL          string         `json:"url"`            // url
	Md5          sql.NullString `json:"md5"`            // md5
	MidAdminID   int            `json:"mid_admin_id"`   // mid_admin_id
	MidAdminName string         `json:"mid_admin_name"` // mid_admin_name
	Type         int16          `json:"type"`           // type
	Status       int8           `json:"status"`         // status
	IsOpen       int8           `json:"is_open"`        // is_open
	ReleaseTime  mysql.NullTime `json:"release_time"`   // release_time
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MidVersion exists in the database.
func (mv *MidVersion) Exists() bool { //mid_version
	return mv._exists
}

// Deleted provides information if the MidVersion has been deleted from the database.
func (mv *MidVersion) Deleted() bool {
	return mv._deleted
}

// Get table name
func GetMidVersionTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "mid_version", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the MidVersion to the database.
func (mv *MidVersion) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if mv._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidVersionTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`v_code, version, platform, name, title, desc, url, md5, mid_admin_id, mid_admin_name, type, status, is_open, release_time, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mv.VCode, mv.Version, mv.Platform, mv.Name, mv.Title, mv.Desc, mv.URL, mv.Md5, mv.MidAdminID, mv.MidAdminName, mv.Type, mv.Status, mv.IsOpen, mv.ReleaseTime, mv.CreatedAt, mv.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, mv.VCode, mv.Version, mv.Platform, mv.Name, mv.Title, mv.Desc, mv.URL, mv.Md5, mv.MidAdminID, mv.MidAdminName, mv.Type, mv.Status, mv.IsOpen, mv.ReleaseTime, mv.CreatedAt, mv.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, mv.VCode, mv.Version, mv.Platform, mv.Name, mv.Title, mv.Desc, mv.URL, mv.Md5, mv.MidAdminID, mv.MidAdminName, mv.Type, mv.Status, mv.IsOpen, mv.ReleaseTime, mv.CreatedAt, mv.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mv.ID = uint64(id)
	mv._exists = true

	return nil
}

// Update updates the MidVersion in the database.
func (mv *MidVersion) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mv._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidVersionTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`v_code = ?, version = ?, platform = ?, name = ?, title = ?, desc = ?, url = ?, md5 = ?, mid_admin_id = ?, mid_admin_name = ?, type = ?, status = ?, is_open = ?, release_time = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mv.VCode, mv.Version, mv.Platform, mv.Name, mv.Title, mv.Desc, mv.URL, mv.Md5, mv.MidAdminID, mv.MidAdminName, mv.Type, mv.Status, mv.IsOpen, mv.ReleaseTime, mv.CreatedAt, mv.UpdatedAt, mv.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mv.VCode, mv.Version, mv.Platform, mv.Name, mv.Title, mv.Desc, mv.URL, mv.Md5, mv.MidAdminID, mv.MidAdminName, mv.Type, mv.Status, mv.IsOpen, mv.ReleaseTime, mv.CreatedAt, mv.UpdatedAt, mv.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mv.VCode, mv.Version, mv.Platform, mv.Name, mv.Title, mv.Desc, mv.URL, mv.Md5, mv.MidAdminID, mv.MidAdminName, mv.Type, mv.Status, mv.IsOpen, mv.ReleaseTime, mv.CreatedAt, mv.UpdatedAt, mv.ID)
	}
	return err
}

// Save saves the MidVersion to the database.
func (mv *MidVersion) Save(ctx context.Context) error {
	if mv.Exists() {
		return mv.Update(ctx)
	}

	return mv.Insert(ctx)
}

// Delete deletes the MidVersion from the database.
func (mv *MidVersion) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mv._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetMidVersionTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mv.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mv.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mv.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	mv._deleted = true

	return nil
}

// MidVersionByID retrieves a row from 'aypcddg.mid_version' as a MidVersion.
//
// Generated from index 'mid_version_id_pkey'.
func MidVersionByID(ctx context.Context, id uint64, key ...interface{}) (*MidVersion, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetMidVersionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, v_code, version, platform, name, title, desc, url, md5, mid_admin_id, mid_admin_name, type, status, is_open, release_time, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mv := MidVersion{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&mv.ID, &mv.VCode, &mv.Version, &mv.Platform, &mv.Name, &mv.Title, &mv.Desc, &mv.URL, &mv.Md5, &mv.MidAdminID, &mv.MidAdminName, &mv.Type, &mv.Status, &mv.IsOpen, &mv.ReleaseTime, &mv.CreatedAt, &mv.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&mv.ID, &mv.VCode, &mv.Version, &mv.Platform, &mv.Name, &mv.Title, &mv.Desc, &mv.URL, &mv.Md5, &mv.MidAdminID, &mv.MidAdminName, &mv.Type, &mv.Status, &mv.IsOpen, &mv.ReleaseTime, &mv.CreatedAt, &mv.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &mv, nil
}
