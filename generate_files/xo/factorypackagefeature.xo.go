// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryPackageFeature represents a row from 'aypcddg.factory_package_feature'.
type FactoryPackageFeature struct {
	Fpfid uint  `json:"fpfid"` // fpfid
	Fpid  int16 `json:"fpid"`  // fpid
	Ffid  int16 `json:"ffid"`  // ffid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryPackageFeature exists in the database.
func (fpf *FactoryPackageFeature) Exists() bool { //factory_package_feature
	return fpf._exists
}

// Deleted provides information if the FactoryPackageFeature has been deleted from the database.
func (fpf *FactoryPackageFeature) Deleted() bool {
	return fpf._deleted
}

// Get table name
func GetFactoryPackageFeatureTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_package_feature", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryPackageFeature to the database.
func (fpf *FactoryPackageFeature) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fpf._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPackageFeatureTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fpid, ffid` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fpf.Fpid, fpf.Ffid)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fpf.Fpid, fpf.Ffid)
	} else {
		res, err = dbConn.Exec(sqlstr, fpf.Fpid, fpf.Ffid)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fpf.Fpfid = uint(id)
	fpf._exists = true

	return nil
}

// Update updates the FactoryPackageFeature in the database.
func (fpf *FactoryPackageFeature) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fpf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPackageFeatureTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fpid = ?, ffid = ?` +
		` WHERE fpfid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fpf.Fpid, fpf.Ffid, fpf.Fpfid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fpf.Fpid, fpf.Ffid, fpf.Fpfid)
	} else {
		_, err = dbConn.Exec(sqlstr, fpf.Fpid, fpf.Ffid, fpf.Fpfid)
	}
	return err
}

// Save saves the FactoryPackageFeature to the database.
func (fpf *FactoryPackageFeature) Save(ctx context.Context) error {
	if fpf.Exists() {
		return fpf.Update(ctx)
	}

	return fpf.Insert(ctx)
}

// Delete deletes the FactoryPackageFeature from the database.
func (fpf *FactoryPackageFeature) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fpf._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryPackageFeatureTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE fpfid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fpf.Fpfid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fpf.Fpfid)
	} else {
		_, err = dbConn.Exec(sqlstr, fpf.Fpfid)
	}

	if err != nil {
		return err
	}

	// set deleted
	fpf._deleted = true

	return nil
}

// FactoryPackageFeatureByFpfid retrieves a row from 'aypcddg.factory_package_feature' as a FactoryPackageFeature.
//
// Generated from index 'factory_package_feature_fpfid_pkey'.
func FactoryPackageFeatureByFpfid(ctx context.Context, fpfid uint, key ...interface{}) (*FactoryPackageFeature, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryPackageFeatureTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`fpfid, fpid, ffid ` +
		`FROM ` + tableName +
		` WHERE fpfid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fpfid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fpf := FactoryPackageFeature{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fpfid).Scan(&fpf.Fpfid, &fpf.Fpid, &fpf.Ffid)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fpfid).Scan(&fpf.Fpfid, &fpf.Fpid, &fpf.Ffid)
		if err != nil {
			return nil, err
		}
	}

	return &fpf, nil
}
