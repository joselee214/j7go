// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// OrderGood represents a row from 'aypcddg.order_goods'.
type OrderGood struct {
	OrderGid          int            `json:"order_gid"`           // order_gid
	Orderid           int            `json:"orderid"`             // orderid
	Pid               int            `json:"pid"`                 // pid
	Gid               int            `json:"gid"`                 // gid
	Title             sql.NullString `json:"title"`               // title
	Allprice          float64        `json:"allprice"`            // allprice
	PrepayPrice       float64        `json:"prepay_price"`        // prepay_price
	Price             float64        `json:"price"`               // price
	Number            int            `json:"number"`              // number
	Shipping          float64        `json:"shipping"`            // shipping
	GoodsUpdated      uint           `json:"goods_updated"`       // goods_updated
	Comment           bool           `json:"comment"`             // comment
	UID               uint           `json:"uid"`                 // uid
	RefundNums        sql.NullInt64  `json:"refund_nums"`         // refund_nums
	Next              int8           `json:"next"`                // next
	NoteUser          sql.NullString `json:"note_user"`           // note_user
	StockID           sql.NullInt64  `json:"stock_id"`            // stock_id
	Shareid           sql.NullInt64  `json:"shareid"`             // shareid
	FromUID           sql.NullInt64  `json:"from_uid"`            // from_uid
	ActivityID        int            `json:"activity_id"`         // activity_id
	GoodsOriginFee    float64        `json:"goods_origin_fee"`    // goods_origin_fee
	RealSettlementFee float64        `json:"real_settlement_fee"` // real_settlement_fee
	RefundFee         float64        `json:"refund_fee"`          // refund_fee

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OrderGood exists in the database.
func (og *OrderGood) Exists() bool { //order_goods
	return og._exists
}

// Deleted provides information if the OrderGood has been deleted from the database.
func (og *OrderGood) Deleted() bool {
	return og._deleted
}

// Get table name
func GetOrderGoodTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "order_goods", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the OrderGood to the database.
func (og *OrderGood) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if og._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`orderid, pid, gid, title, allprice, prepay_price, price, number, shipping, goods_updated, comment, uid, refund_nums, next, note_user, stock_id, shareid, from_uid, activity_id, goods_origin_fee, real_settlement_fee, refund_fee` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, og.Orderid, og.Pid, og.Gid, og.Title, og.Allprice, og.PrepayPrice, og.Price, og.Number, og.Shipping, og.GoodsUpdated, og.Comment, og.UID, og.RefundNums, og.Next, og.NoteUser, og.StockID, og.Shareid, og.FromUID, og.ActivityID, og.GoodsOriginFee, og.RealSettlementFee, og.RefundFee)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, og.Orderid, og.Pid, og.Gid, og.Title, og.Allprice, og.PrepayPrice, og.Price, og.Number, og.Shipping, og.GoodsUpdated, og.Comment, og.UID, og.RefundNums, og.Next, og.NoteUser, og.StockID, og.Shareid, og.FromUID, og.ActivityID, og.GoodsOriginFee, og.RealSettlementFee, og.RefundFee)
	} else {
		res, err = dbConn.Exec(sqlstr, og.Orderid, og.Pid, og.Gid, og.Title, og.Allprice, og.PrepayPrice, og.Price, og.Number, og.Shipping, og.GoodsUpdated, og.Comment, og.UID, og.RefundNums, og.Next, og.NoteUser, og.StockID, og.Shareid, og.FromUID, og.ActivityID, og.GoodsOriginFee, og.RealSettlementFee, og.RefundFee)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	og.OrderGid = int(id)
	og._exists = true

	return nil
}

// Update updates the OrderGood in the database.
func (og *OrderGood) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if og._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`orderid = ?, pid = ?, gid = ?, title = ?, allprice = ?, prepay_price = ?, price = ?, number = ?, shipping = ?, goods_updated = ?, comment = ?, uid = ?, refund_nums = ?, next = ?, note_user = ?, stock_id = ?, shareid = ?, from_uid = ?, activity_id = ?, goods_origin_fee = ?, real_settlement_fee = ?, refund_fee = ?` +
		` WHERE order_gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, og.Orderid, og.Pid, og.Gid, og.Title, og.Allprice, og.PrepayPrice, og.Price, og.Number, og.Shipping, og.GoodsUpdated, og.Comment, og.UID, og.RefundNums, og.Next, og.NoteUser, og.StockID, og.Shareid, og.FromUID, og.ActivityID, og.GoodsOriginFee, og.RealSettlementFee, og.RefundFee, og.OrderGid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, og.Orderid, og.Pid, og.Gid, og.Title, og.Allprice, og.PrepayPrice, og.Price, og.Number, og.Shipping, og.GoodsUpdated, og.Comment, og.UID, og.RefundNums, og.Next, og.NoteUser, og.StockID, og.Shareid, og.FromUID, og.ActivityID, og.GoodsOriginFee, og.RealSettlementFee, og.RefundFee, og.OrderGid)
	} else {
		_, err = dbConn.Exec(sqlstr, og.Orderid, og.Pid, og.Gid, og.Title, og.Allprice, og.PrepayPrice, og.Price, og.Number, og.Shipping, og.GoodsUpdated, og.Comment, og.UID, og.RefundNums, og.Next, og.NoteUser, og.StockID, og.Shareid, og.FromUID, og.ActivityID, og.GoodsOriginFee, og.RealSettlementFee, og.RefundFee, og.OrderGid)
	}
	return err
}

// Save saves the OrderGood to the database.
func (og *OrderGood) Save(ctx context.Context) error {
	if og.Exists() {
		return og.Update(ctx)
	}

	return og.Insert(ctx)
}

// Delete deletes the OrderGood from the database.
func (og *OrderGood) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if og._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetOrderGoodTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE order_gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, og.OrderGid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, og.OrderGid)
	} else {
		_, err = dbConn.Exec(sqlstr, og.OrderGid)
	}

	if err != nil {
		return err
	}

	// set deleted
	og._deleted = true

	return nil
}

// OrderGoodByOrderGid retrieves a row from 'aypcddg.order_goods' as a OrderGood.
//
// Generated from index 'order_goods_order_gid_pkey'.
func OrderGoodByOrderGid(ctx context.Context, orderGid int, key ...interface{}) (*OrderGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrderGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`order_gid, orderid, pid, gid, title, allprice, prepay_price, price, number, shipping, goods_updated, comment, uid, refund_nums, next, note_user, stock_id, shareid, from_uid, activity_id, goods_origin_fee, real_settlement_fee, refund_fee ` +
		`FROM ` + tableName +
		` WHERE order_gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, orderGid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	og := OrderGood{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, orderGid).Scan(&og.OrderGid, &og.Orderid, &og.Pid, &og.Gid, &og.Title, &og.Allprice, &og.PrepayPrice, &og.Price, &og.Number, &og.Shipping, &og.GoodsUpdated, &og.Comment, &og.UID, &og.RefundNums, &og.Next, &og.NoteUser, &og.StockID, &og.Shareid, &og.FromUID, &og.ActivityID, &og.GoodsOriginFee, &og.RealSettlementFee, &og.RefundFee)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, orderGid).Scan(&og.OrderGid, &og.Orderid, &og.Pid, &og.Gid, &og.Title, &og.Allprice, &og.PrepayPrice, &og.Price, &og.Number, &og.Shipping, &og.GoodsUpdated, &og.Comment, &og.UID, &og.RefundNums, &og.Next, &og.NoteUser, &og.StockID, &og.Shareid, &og.FromUID, &og.ActivityID, &og.GoodsOriginFee, &og.RealSettlementFee, &og.RefundFee)
		if err != nil {
			return nil, err
		}
	}

	return &og, nil
}

// OrderGoodsByOrderidGid retrieves a row from 'aypcddg.order_goods' as a OrderGood.
//
// Generated from index 'order_goods_orderid_gid_index'.
func OrderGoodsByOrderidGid(ctx context.Context, orderid int, gid int, key ...interface{}) ([]*OrderGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrderGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`order_gid, orderid, pid, gid, title, allprice, prepay_price, price, number, shipping, goods_updated, comment, uid, refund_nums, next, note_user, stock_id, shareid, from_uid, activity_id, goods_origin_fee, real_settlement_fee, refund_fee ` +
		`FROM ` + tableName +
		` WHERE orderid = ? AND gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, orderid, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, orderid, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, orderid, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*OrderGood, 0)
	for queryData.Next() {
		og := OrderGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&og.OrderGid, &og.Orderid, &og.Pid, &og.Gid, &og.Title, &og.Allprice, &og.PrepayPrice, &og.Price, &og.Number, &og.Shipping, &og.GoodsUpdated, &og.Comment, &og.UID, &og.RefundNums, &og.Next, &og.NoteUser, &og.StockID, &og.Shareid, &og.FromUID, &og.ActivityID, &og.GoodsOriginFee, &og.RealSettlementFee, &og.RefundFee)
		if err != nil {
			return nil, err
		}

		res = append(res, &og)
	}

	return res, nil
}

// OrderGoodsByOrderid retrieves a row from 'aypcddg.order_goods' as a OrderGood.
//
// Generated from index 'orderid'.
func OrderGoodsByOrderid(ctx context.Context, orderid int, key ...interface{}) ([]*OrderGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetOrderGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`order_gid, orderid, pid, gid, title, allprice, prepay_price, price, number, shipping, goods_updated, comment, uid, refund_nums, next, note_user, stock_id, shareid, from_uid, activity_id, goods_origin_fee, real_settlement_fee, refund_fee ` +
		`FROM ` + tableName +
		` WHERE orderid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, orderid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, orderid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, orderid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*OrderGood, 0)
	for queryData.Next() {
		og := OrderGood{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&og.OrderGid, &og.Orderid, &og.Pid, &og.Gid, &og.Title, &og.Allprice, &og.PrepayPrice, &og.Price, &og.Number, &og.Shipping, &og.GoodsUpdated, &og.Comment, &og.UID, &og.RefundNums, &og.Next, &og.NoteUser, &og.StockID, &og.Shareid, &og.FromUID, &og.ActivityID, &og.GoodsOriginFee, &og.RealSettlementFee, &og.RefundFee)
		if err != nil {
			return nil, err
		}

		res = append(res, &og)
	}

	return res, nil
}
