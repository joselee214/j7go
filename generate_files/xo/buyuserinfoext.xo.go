// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BuyUserInfoExt represents a row from 'aypcddg.buy_user_info_ext'.
type BuyUserInfoExt struct {
	ID              uint64         `json:"id"`               // id
	Buid            int            `json:"buid"`             // buid
	Device          string         `json:"device"`           // device
	SystemVersion   string         `json:"system_version"`   // system_version
	AppVersion      string         `json:"app_version"`      // app_version
	TouchID         string         `json:"touch_id"`         // touch_id
	RegisterChannel string         `json:"register_channel"` // register_channel
	LoginIP         string         `json:"login_ip"`         // login_ip
	LoginAt         mysql.NullTime `json:"login_at"`         // login_at
	LogoutAt        mysql.NullTime `json:"logout_at"`        // logout_at
	LogoffAt        mysql.NullTime `json:"logoff_at"`        // logoff_at
	CreatedAt       mysql.NullTime `json:"created_at"`       // created_at
	UpdatedAt       mysql.NullTime `json:"updated_at"`       // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BuyUserInfoExt exists in the database.
func (buie *BuyUserInfoExt) Exists() bool { //buy_user_info_ext
	return buie._exists
}

// Deleted provides information if the BuyUserInfoExt has been deleted from the database.
func (buie *BuyUserInfoExt) Deleted() bool {
	return buie._deleted
}

// Get table name
func GetBuyUserInfoExtTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "buy_user_info_ext", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BuyUserInfoExt to the database.
func (buie *BuyUserInfoExt) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if buie._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBuyUserInfoExtTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`buid, device, system_version, app_version, touch_id, register_channel, login_ip, login_at, logout_at, logoff_at, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, buie.Buid, buie.Device, buie.SystemVersion, buie.AppVersion, buie.TouchID, buie.RegisterChannel, buie.LoginIP, buie.LoginAt, buie.LogoutAt, buie.LogoffAt, buie.CreatedAt, buie.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, buie.Buid, buie.Device, buie.SystemVersion, buie.AppVersion, buie.TouchID, buie.RegisterChannel, buie.LoginIP, buie.LoginAt, buie.LogoutAt, buie.LogoffAt, buie.CreatedAt, buie.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, buie.Buid, buie.Device, buie.SystemVersion, buie.AppVersion, buie.TouchID, buie.RegisterChannel, buie.LoginIP, buie.LoginAt, buie.LogoutAt, buie.LogoffAt, buie.CreatedAt, buie.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	buie.ID = uint64(id)
	buie._exists = true

	return nil
}

// Update updates the BuyUserInfoExt in the database.
func (buie *BuyUserInfoExt) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if buie._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBuyUserInfoExtTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`buid = ?, device = ?, system_version = ?, app_version = ?, touch_id = ?, register_channel = ?, login_ip = ?, login_at = ?, logout_at = ?, logoff_at = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, buie.Buid, buie.Device, buie.SystemVersion, buie.AppVersion, buie.TouchID, buie.RegisterChannel, buie.LoginIP, buie.LoginAt, buie.LogoutAt, buie.LogoffAt, buie.CreatedAt, buie.UpdatedAt, buie.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, buie.Buid, buie.Device, buie.SystemVersion, buie.AppVersion, buie.TouchID, buie.RegisterChannel, buie.LoginIP, buie.LoginAt, buie.LogoutAt, buie.LogoffAt, buie.CreatedAt, buie.UpdatedAt, buie.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, buie.Buid, buie.Device, buie.SystemVersion, buie.AppVersion, buie.TouchID, buie.RegisterChannel, buie.LoginIP, buie.LoginAt, buie.LogoutAt, buie.LogoffAt, buie.CreatedAt, buie.UpdatedAt, buie.ID)
	}
	return err
}

// Save saves the BuyUserInfoExt to the database.
func (buie *BuyUserInfoExt) Save(ctx context.Context) error {
	if buie.Exists() {
		return buie.Update(ctx)
	}

	return buie.Insert(ctx)
}

// Delete deletes the BuyUserInfoExt from the database.
func (buie *BuyUserInfoExt) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if buie._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBuyUserInfoExtTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, buie.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, buie.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, buie.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	buie._deleted = true

	return nil
}

// BuyUserInfoExtByID retrieves a row from 'aypcddg.buy_user_info_ext' as a BuyUserInfoExt.
//
// Generated from index 'buy_user_info_ext_id_pkey'.
func BuyUserInfoExtByID(ctx context.Context, id uint64, key ...interface{}) (*BuyUserInfoExt, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBuyUserInfoExtTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, buid, device, system_version, app_version, touch_id, register_channel, login_ip, login_at, logout_at, logoff_at, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	buie := BuyUserInfoExt{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&buie.ID, &buie.Buid, &buie.Device, &buie.SystemVersion, &buie.AppVersion, &buie.TouchID, &buie.RegisterChannel, &buie.LoginIP, &buie.LoginAt, &buie.LogoutAt, &buie.LogoffAt, &buie.CreatedAt, &buie.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&buie.ID, &buie.Buid, &buie.Device, &buie.SystemVersion, &buie.AppVersion, &buie.TouchID, &buie.RegisterChannel, &buie.LoginIP, &buie.LoginAt, &buie.LogoutAt, &buie.LogoffAt, &buie.CreatedAt, &buie.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &buie, nil
}

// BuyUserInfoExtByBuid retrieves a row from 'aypcddg.buy_user_info_ext' as a BuyUserInfoExt.
//
// Generated from index 'unq_buid'.
func BuyUserInfoExtByBuid(ctx context.Context, buid int, key ...interface{}) (*BuyUserInfoExt, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBuyUserInfoExtTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, buid, device, system_version, app_version, touch_id, register_channel, login_ip, login_at, logout_at, logoff_at, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE buid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, buid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	buie := BuyUserInfoExt{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, buid).Scan(&buie.ID, &buie.Buid, &buie.Device, &buie.SystemVersion, &buie.AppVersion, &buie.TouchID, &buie.RegisterChannel, &buie.LoginIP, &buie.LoginAt, &buie.LogoutAt, &buie.LogoffAt, &buie.CreatedAt, &buie.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, buid).Scan(&buie.ID, &buie.Buid, &buie.Device, &buie.SystemVersion, &buie.AppVersion, &buie.TouchID, &buie.RegisterChannel, &buie.LoginIP, &buie.LoginAt, &buie.LogoutAt, &buie.LogoffAt, &buie.CreatedAt, &buie.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &buie, nil
}
