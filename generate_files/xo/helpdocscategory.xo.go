// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// HelpDocsCategory represents a row from 'aypcddg.help_docs_category'.
type HelpDocsCategory struct {
	ID           uint64         `json:"id"`             // id
	Title        string         `json:"title"`          // title
	Seq          int8           `json:"seq"`            // seq
	Status       int8           `json:"status"`         // status
	Platform     string         `json:"platform"`       // platform
	MidAdminName sql.NullString `json:"mid_admin_name"` // mid_admin_name
	MidAdminID   int            `json:"mid_admin_id"`   // mid_admin_id
	IsDelete     int8           `json:"is_delete"`      // is_delete
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HelpDocsCategory exists in the database.
func (hdc *HelpDocsCategory) Exists() bool { //help_docs_category
	return hdc._exists
}

// Deleted provides information if the HelpDocsCategory has been deleted from the database.
func (hdc *HelpDocsCategory) Deleted() bool {
	return hdc._deleted
}

// Get table name
func GetHelpDocsCategoryTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "help_docs_category", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the HelpDocsCategory to the database.
func (hdc *HelpDocsCategory) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if hdc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpDocsCategoryTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`title, seq, status, platform, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hdc.Title, hdc.Seq, hdc.Status, hdc.Platform, hdc.MidAdminName, hdc.MidAdminID, hdc.IsDelete, hdc.CreatedAt, hdc.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, hdc.Title, hdc.Seq, hdc.Status, hdc.Platform, hdc.MidAdminName, hdc.MidAdminID, hdc.IsDelete, hdc.CreatedAt, hdc.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, hdc.Title, hdc.Seq, hdc.Status, hdc.Platform, hdc.MidAdminName, hdc.MidAdminID, hdc.IsDelete, hdc.CreatedAt, hdc.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	hdc.ID = uint64(id)
	hdc._exists = true

	return nil
}

// Update updates the HelpDocsCategory in the database.
func (hdc *HelpDocsCategory) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if hdc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpDocsCategoryTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`title = ?, seq = ?, status = ?, platform = ?, mid_admin_name = ?, mid_admin_id = ?, is_delete = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hdc.Title, hdc.Seq, hdc.Status, hdc.Platform, hdc.MidAdminName, hdc.MidAdminID, hdc.IsDelete, hdc.CreatedAt, hdc.UpdatedAt, hdc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, hdc.Title, hdc.Seq, hdc.Status, hdc.Platform, hdc.MidAdminName, hdc.MidAdminID, hdc.IsDelete, hdc.CreatedAt, hdc.UpdatedAt, hdc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, hdc.Title, hdc.Seq, hdc.Status, hdc.Platform, hdc.MidAdminName, hdc.MidAdminID, hdc.IsDelete, hdc.CreatedAt, hdc.UpdatedAt, hdc.ID)
	}
	return err
}

// Save saves the HelpDocsCategory to the database.
func (hdc *HelpDocsCategory) Save(ctx context.Context) error {
	if hdc.Exists() {
		return hdc.Update(ctx)
	}

	return hdc.Insert(ctx)
}

// Delete deletes the HelpDocsCategory from the database.
func (hdc *HelpDocsCategory) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if hdc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetHelpDocsCategoryTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, hdc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, hdc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, hdc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	hdc._deleted = true

	return nil
}

// HelpDocsCategoryByID retrieves a row from 'aypcddg.help_docs_category' as a HelpDocsCategory.
//
// Generated from index 'help_docs_category_id_pkey'.
func HelpDocsCategoryByID(ctx context.Context, id uint64, key ...interface{}) (*HelpDocsCategory, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetHelpDocsCategoryTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, title, seq, status, platform, mid_admin_name, mid_admin_id, is_delete, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	hdc := HelpDocsCategory{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&hdc.ID, &hdc.Title, &hdc.Seq, &hdc.Status, &hdc.Platform, &hdc.MidAdminName, &hdc.MidAdminID, &hdc.IsDelete, &hdc.CreatedAt, &hdc.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&hdc.ID, &hdc.Title, &hdc.Seq, &hdc.Status, &hdc.Platform, &hdc.MidAdminName, &hdc.MidAdminID, &hdc.IsDelete, &hdc.CreatedAt, &hdc.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &hdc, nil
}
