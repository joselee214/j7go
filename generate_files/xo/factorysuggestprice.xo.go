// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// FactorySuggestPrice represents a row from 'aypcddg.factory_suggest_price'.
type FactorySuggestPrice struct {
	ID           uint64         `json:"id"`             // id
	Fid          int            `json:"fid"`            // fid
	Gcid         int            `json:"gcid"`           // gcid
	Gid          int            `json:"gid"`            // gid
	PlusPercent  float64        `json:"plus_percent"`   // plus_percent
	AbsPlusPrice float64        `json:"abs_plus_price"` // abs_plus_price
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactorySuggestPrice exists in the database.
func (fsp *FactorySuggestPrice) Exists() bool { //factory_suggest_price
	return fsp._exists
}

// Deleted provides information if the FactorySuggestPrice has been deleted from the database.
func (fsp *FactorySuggestPrice) Deleted() bool {
	return fsp._deleted
}

// Get table name
func GetFactorySuggestPriceTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_suggest_price", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactorySuggestPrice to the database.
func (fsp *FactorySuggestPrice) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fsp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySuggestPriceTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`fid, gcid, gid, plus_percent, abs_plus_price, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fsp.Fid, fsp.Gcid, fsp.Gid, fsp.PlusPercent, fsp.AbsPlusPrice, fsp.CreatedAt, fsp.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fsp.Fid, fsp.Gcid, fsp.Gid, fsp.PlusPercent, fsp.AbsPlusPrice, fsp.CreatedAt, fsp.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, fsp.Fid, fsp.Gcid, fsp.Gid, fsp.PlusPercent, fsp.AbsPlusPrice, fsp.CreatedAt, fsp.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fsp.ID = uint64(id)
	fsp._exists = true

	return nil
}

// Update updates the FactorySuggestPrice in the database.
func (fsp *FactorySuggestPrice) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fsp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySuggestPriceTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`fid = ?, gcid = ?, gid = ?, plus_percent = ?, abs_plus_price = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fsp.Fid, fsp.Gcid, fsp.Gid, fsp.PlusPercent, fsp.AbsPlusPrice, fsp.CreatedAt, fsp.UpdatedAt, fsp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fsp.Fid, fsp.Gcid, fsp.Gid, fsp.PlusPercent, fsp.AbsPlusPrice, fsp.CreatedAt, fsp.UpdatedAt, fsp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fsp.Fid, fsp.Gcid, fsp.Gid, fsp.PlusPercent, fsp.AbsPlusPrice, fsp.CreatedAt, fsp.UpdatedAt, fsp.ID)
	}
	return err
}

// Save saves the FactorySuggestPrice to the database.
func (fsp *FactorySuggestPrice) Save(ctx context.Context) error {
	if fsp.Exists() {
		return fsp.Update(ctx)
	}

	return fsp.Insert(ctx)
}

// Delete deletes the FactorySuggestPrice from the database.
func (fsp *FactorySuggestPrice) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fsp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactorySuggestPriceTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fsp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fsp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fsp.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fsp._deleted = true

	return nil
}

// FactorySuggestPricesByFid retrieves a row from 'aypcddg.factory_suggest_price' as a FactorySuggestPrice.
//
// Generated from index 'factory_suggest_price_fid_index'.
func FactorySuggestPricesByFid(ctx context.Context, fid int, key ...interface{}) ([]*FactorySuggestPrice, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, gcid, gid, plus_percent, abs_plus_price, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE fid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, fid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPrice, 0)
	for queryData.Next() {
		fsp := FactorySuggestPrice{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fsp.ID, &fsp.Fid, &fsp.Gcid, &fsp.Gid, &fsp.PlusPercent, &fsp.AbsPlusPrice, &fsp.CreatedAt, &fsp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &fsp)
	}

	return res, nil
}

// FactorySuggestPricesByGcid retrieves a row from 'aypcddg.factory_suggest_price' as a FactorySuggestPrice.
//
// Generated from index 'factory_suggest_price_gcid_index'.
func FactorySuggestPricesByGcid(ctx context.Context, gcid int, key ...interface{}) ([]*FactorySuggestPrice, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, gcid, gid, plus_percent, abs_plus_price, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE gcid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gcid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gcid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gcid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPrice, 0)
	for queryData.Next() {
		fsp := FactorySuggestPrice{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fsp.ID, &fsp.Fid, &fsp.Gcid, &fsp.Gid, &fsp.PlusPercent, &fsp.AbsPlusPrice, &fsp.CreatedAt, &fsp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &fsp)
	}

	return res, nil
}

// FactorySuggestPricesByGid retrieves a row from 'aypcddg.factory_suggest_price' as a FactorySuggestPrice.
//
// Generated from index 'factory_suggest_price_gid_index'.
func FactorySuggestPricesByGid(ctx context.Context, gid int, key ...interface{}) ([]*FactorySuggestPrice, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, gcid, gid, plus_percent, abs_plus_price, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*FactorySuggestPrice, 0)
	for queryData.Next() {
		fsp := FactorySuggestPrice{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&fsp.ID, &fsp.Fid, &fsp.Gcid, &fsp.Gid, &fsp.PlusPercent, &fsp.AbsPlusPrice, &fsp.CreatedAt, &fsp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &fsp)
	}

	return res, nil
}

// FactorySuggestPriceByID retrieves a row from 'aypcddg.factory_suggest_price' as a FactorySuggestPrice.
//
// Generated from index 'factory_suggest_price_id_pkey'.
func FactorySuggestPriceByID(ctx context.Context, id uint64, key ...interface{}) (*FactorySuggestPrice, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactorySuggestPriceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, fid, gcid, gid, plus_percent, abs_plus_price, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fsp := FactorySuggestPrice{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&fsp.ID, &fsp.Fid, &fsp.Gcid, &fsp.Gid, &fsp.PlusPercent, &fsp.AbsPlusPrice, &fsp.CreatedAt, &fsp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&fsp.ID, &fsp.Fid, &fsp.Gcid, &fsp.Gid, &fsp.PlusPercent, &fsp.AbsPlusPrice, &fsp.CreatedAt, &fsp.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &fsp, nil
}
