// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// CategoryBrand represents a row from 'aypcddg.category_brand'.
type CategoryBrand struct {
	Gcid uint `json:"gcid"` // gcid
	Fbid uint `json:"fbid"` // fbid
	St   bool `json:"st"`   // st

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CategoryBrand exists in the database.
func (cb *CategoryBrand) Exists() bool { //category_brand
	return cb._exists
}

// Deleted provides information if the CategoryBrand has been deleted from the database.
func (cb *CategoryBrand) Deleted() bool {
	return cb._deleted
}

// Get table name
func GetCategoryBrandTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "category_brand", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CategoryBrand to the database.
func (cb *CategoryBrand) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if cb._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCategoryBrandTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`gcid, fbid, st` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cb.Gcid, cb.Fbid, cb.St)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, cb.Gcid, cb.Fbid, cb.St)
	} else {
		res, err = dbConn.Exec(sqlstr, cb.Gcid, cb.Fbid, cb.St)
	}

	if err != nil {
		return err
	}

	// set existence
	cb._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cb.Fbid = uint(id)
	cb._exists = true

	return nil
}

// Update updates the CategoryBrand in the database.
func (cb *CategoryBrand) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cb._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCategoryBrandTableName(key...)
	if err != nil {
		return err
	}

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`st = ?` +
		` WHERE gcid = ? AND fbid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cb.St, cb.Gcid, cb.Fbid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cb.St, cb.Gcid, cb.Fbid)
	} else {
		_, err = dbConn.Exec(sqlstr, cb.St, cb.Gcid, cb.Fbid)
	}
	return err
}

// Save saves the CategoryBrand to the database.
func (cb *CategoryBrand) Save(ctx context.Context) error {
	if cb.Exists() {
		return cb.Update(ctx)
	}

	return cb.Insert(ctx)
}

// Delete deletes the CategoryBrand from the database.
func (cb *CategoryBrand) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cb._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCategoryBrandTableName(key...)
	if err != nil {
		return err
	}
	//2

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE fbid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cb.Fbid)))

	if tx != nil {
		_, err = tx.Exec(sqlstr, cb.Fbid)
	} else {
		_, err = dbConn.Exec(sqlstr, cb.Fbid)
	}
	if err != nil {
		return err
	}

	// set deleted
	cb._deleted = true

	return nil
}

// CategoryBrandByFbid retrieves a row from 'aypcddg.category_brand' as a CategoryBrand.
//
// Generated from index 'category_brand_fbid_pkey'.
func CategoryBrandByFbid(ctx context.Context, fbid uint, key ...interface{}) (*CategoryBrand, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCategoryBrandTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`gcid, fbid, st ` +
		`FROM ` + tableName +
		` WHERE fbid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fbid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	cb := CategoryBrand{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fbid).Scan(&cb.Gcid, &cb.Fbid, &cb.St)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fbid).Scan(&cb.Gcid, &cb.Fbid, &cb.St)
		if err != nil {
			return nil, err
		}
	}

	return &cb, nil
}
