// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// SaleGood represents a row from 'aypcddg.sale_goods'.
type SaleGood struct {
	Pid         sql.NullInt64   `json:"pid"`          // pid
	Sid         uint            `json:"sid"`          // sid
	Gid         uint            `json:"gid"`          // gid
	Status      int             `json:"status"`       // status
	Price       float64         `json:"price"`        // price
	PrepayPrice sql.NullFloat64 `json:"prepay_price"` // prepay_price
	Stock       uint            `json:"stock"`        // stock
	Stockday    uint            `json:"stockday"`     // stockday
	ShipID      sql.NullInt64   `json:"ship_id"`      // ship_id
	WarrantyID  int             `json:"warranty_id"`  // warranty_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SaleGood exists in the database.
func (sg *SaleGood) Exists() bool { //sale_goods
	return sg._exists
}

// Deleted provides information if the SaleGood has been deleted from the database.
func (sg *SaleGood) Deleted() bool {
	return sg._deleted
}

// Get table name
func GetSaleGoodTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "sale_goods", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the SaleGood to the database.
func (sg *SaleGood) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sg._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`pid, sid, gid, status, price, prepay_price, stock, stockday, ship_id, warranty_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sg.Pid, sg.Sid, sg.Gid, sg.Status, sg.Price, sg.PrepayPrice, sg.Stock, sg.Stockday, sg.ShipID, sg.WarrantyID)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, sg.Pid, sg.Sid, sg.Gid, sg.Status, sg.Price, sg.PrepayPrice, sg.Stock, sg.Stockday, sg.ShipID, sg.WarrantyID)
	} else {
		res, err = dbConn.Exec(sqlstr, sg.Pid, sg.Sid, sg.Gid, sg.Status, sg.Price, sg.PrepayPrice, sg.Stock, sg.Stockday, sg.ShipID, sg.WarrantyID)
	}

	if err != nil {
		return err
	}

	// set existence
	sg._exists = true

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sg.Gid = uint(id)
	sg._exists = true

	return nil
}

// Update updates the SaleGood in the database.
func (sg *SaleGood) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleGoodTableName(key...)
	if err != nil {
		return err
	}

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`pid = ?, status = ?, price = ?, prepay_price = ?, stock = ?, stockday = ?, ship_id = ?, warranty_id = ?` +
		` WHERE sid = ? AND gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sg.Pid, sg.Status, sg.Price, sg.PrepayPrice, sg.Stock, sg.Stockday, sg.ShipID, sg.WarrantyID, sg.Sid, sg.Gid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sg.Pid, sg.Status, sg.Price, sg.PrepayPrice, sg.Stock, sg.Stockday, sg.ShipID, sg.WarrantyID, sg.Sid, sg.Gid)
	} else {
		_, err = dbConn.Exec(sqlstr, sg.Pid, sg.Status, sg.Price, sg.PrepayPrice, sg.Stock, sg.Stockday, sg.ShipID, sg.WarrantyID, sg.Sid, sg.Gid)
	}
	return err
}

// Save saves the SaleGood to the database.
func (sg *SaleGood) Save(ctx context.Context) error {
	if sg.Exists() {
		return sg.Update(ctx)
	}

	return sg.Insert(ctx)
}

// Delete deletes the SaleGood from the database.
func (sg *SaleGood) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sg._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetSaleGoodTableName(key...)
	if err != nil {
		return err
	}
	//2

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sg.Gid)))

	if tx != nil {
		_, err = tx.Exec(sqlstr, sg.Gid)
	} else {
		_, err = dbConn.Exec(sqlstr, sg.Gid)
	}
	if err != nil {
		return err
	}

	// set deleted
	sg._deleted = true

	return nil
}

// SaleGoodByGid retrieves a row from 'aypcddg.sale_goods' as a SaleGood.
//
// Generated from index 'sale_goods_gid_pkey'.
func SaleGoodByGid(ctx context.Context, gid uint, key ...interface{}) (*SaleGood, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetSaleGoodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`pid, sid, gid, status, price, prepay_price, stock, stockday, ship_id, warranty_id ` +
		`FROM ` + tableName +
		` WHERE gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sg := SaleGood{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, gid).Scan(&sg.Pid, &sg.Sid, &sg.Gid, &sg.Status, &sg.Price, &sg.PrepayPrice, &sg.Stock, &sg.Stockday, &sg.ShipID, &sg.WarrantyID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, gid).Scan(&sg.Pid, &sg.Sid, &sg.Gid, &sg.Status, &sg.Price, &sg.PrepayPrice, &sg.Stock, &sg.Stockday, &sg.ShipID, &sg.WarrantyID)
		if err != nil {
			return nil, err
		}
	}

	return &sg, nil
}
