// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// FactoryWarrantytml represents a row from 'aypcddg.factory_warrantytml'.
type FactoryWarrantytml struct {
	ID      uint           `json:"id"`      // id
	UID     sql.NullInt64  `json:"uid"`     // uid
	Fid     sql.NullInt64  `json:"fid"`     // fid
	Sid     sql.NullInt64  `json:"sid"`     // sid
	Title   sql.NullString `json:"title"`   // title
	Content sql.NullString `json:"content"` // content

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FactoryWarrantytml exists in the database.
func (fw *FactoryWarrantytml) Exists() bool { //factory_warrantytml
	return fw._exists
}

// Deleted provides information if the FactoryWarrantytml has been deleted from the database.
func (fw *FactoryWarrantytml) Deleted() bool {
	return fw._deleted
}

// Get table name
func GetFactoryWarrantytmlTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "factory_warrantytml", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the FactoryWarrantytml to the database.
func (fw *FactoryWarrantytml) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if fw._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryWarrantytmlTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, fid, sid, title, content` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fw.UID, fw.Fid, fw.Sid, fw.Title, fw.Content)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, fw.UID, fw.Fid, fw.Sid, fw.Title, fw.Content)
	} else {
		res, err = dbConn.Exec(sqlstr, fw.UID, fw.Fid, fw.Sid, fw.Title, fw.Content)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fw.ID = uint(id)
	fw._exists = true

	return nil
}

// Update updates the FactoryWarrantytml in the database.
func (fw *FactoryWarrantytml) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fw._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryWarrantytmlTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, fid = ?, sid = ?, title = ?, content = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fw.UID, fw.Fid, fw.Sid, fw.Title, fw.Content, fw.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fw.UID, fw.Fid, fw.Sid, fw.Title, fw.Content, fw.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fw.UID, fw.Fid, fw.Sid, fw.Title, fw.Content, fw.ID)
	}
	return err
}

// Save saves the FactoryWarrantytml to the database.
func (fw *FactoryWarrantytml) Save(ctx context.Context) error {
	if fw.Exists() {
		return fw.Update(ctx)
	}

	return fw.Insert(ctx)
}

// Delete deletes the FactoryWarrantytml from the database.
func (fw *FactoryWarrantytml) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if fw._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetFactoryWarrantytmlTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fw.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, fw.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, fw.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	fw._deleted = true

	return nil
}

// FactoryWarrantytmlByID retrieves a row from 'aypcddg.factory_warrantytml' as a FactoryWarrantytml.
//
// Generated from index 'factory_warrantytml_id_pkey'.
func FactoryWarrantytmlByID(ctx context.Context, id uint, key ...interface{}) (*FactoryWarrantytml, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetFactoryWarrantytmlTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, fid, sid, title, content ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	fw := FactoryWarrantytml{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&fw.ID, &fw.UID, &fw.Fid, &fw.Sid, &fw.Title, &fw.Content)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&fw.ID, &fw.UID, &fw.Fid, &fw.Sid, &fw.Title, &fw.Content)
		if err != nil {
			return nil, err
		}
	}

	return &fw, nil
}
