// Package xo contains the types for schema 'aypcddg'.
package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// BuyUserInfo represents a row from 'aypcddg.buy_user_info'.
type BuyUserInfo struct {
	Buid             uint64         `json:"buid"`                // buid
	UID              int            `json:"uid"`                 // uid
	BuyNo            string         `json:"buy_no"`              // buy_no
	NickName         string         `json:"nick_name"`           // nick_name
	RealName         string         `json:"real_name"`           // real_name
	Avatar           string         `json:"avatar"`              // avatar
	OssID            string         `json:"oss_id"`              // oss_id
	Gender           int8           `json:"gender"`              // gender
	Birthday         string         `json:"birthday"`            // birthday
	Level            int16          `json:"level"`               // level
	Point            float64        `json:"point"`               // point
	Balance          float64        `json:"balance"`             // balance
	Tag              string         `json:"tag"`                 // tag
	Status           int8           `json:"status"`              // status
	Type             sql.NullInt64  `json:"type"`                // type
	IsAuthentication int8           `json:"is_authentication"`   // is_authentication
	IsOpenCartRemark int8           `json:"is_open_cart_remark"` // is_open_cart_remark
	CreatedAt        mysql.NullTime `json:"created_at"`          // created_at
	UpdatedAt        mysql.NullTime `json:"updated_at"`          // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BuyUserInfo exists in the database.
func (bui *BuyUserInfo) Exists() bool { //buy_user_info
	return bui._exists
}

// Deleted provides information if the BuyUserInfo has been deleted from the database.
func (bui *BuyUserInfo) Deleted() bool {
	return bui._deleted
}

// Get table name
func GetBuyUserInfoTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "buy_user_info", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BuyUserInfo to the database.
func (bui *BuyUserInfo) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if bui._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBuyUserInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`uid, buy_no, nick_name, real_name, avatar, oss_id, gender, birthday, level, point, balance, tag, status, type, is_authentication, is_open_cart_remark, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bui.UID, bui.BuyNo, bui.NickName, bui.RealName, bui.Avatar, bui.OssID, bui.Gender, bui.Birthday, bui.Level, bui.Point, bui.Balance, bui.Tag, bui.Status, bui.Type, bui.IsAuthentication, bui.IsOpenCartRemark, bui.CreatedAt, bui.UpdatedAt)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, bui.UID, bui.BuyNo, bui.NickName, bui.RealName, bui.Avatar, bui.OssID, bui.Gender, bui.Birthday, bui.Level, bui.Point, bui.Balance, bui.Tag, bui.Status, bui.Type, bui.IsAuthentication, bui.IsOpenCartRemark, bui.CreatedAt, bui.UpdatedAt)
	} else {
		res, err = dbConn.Exec(sqlstr, bui.UID, bui.BuyNo, bui.NickName, bui.RealName, bui.Avatar, bui.OssID, bui.Gender, bui.Birthday, bui.Level, bui.Point, bui.Balance, bui.Tag, bui.Status, bui.Type, bui.IsAuthentication, bui.IsOpenCartRemark, bui.CreatedAt, bui.UpdatedAt)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bui.Buid = uint64(id)
	bui._exists = true

	return nil
}

// Update updates the BuyUserInfo in the database.
func (bui *BuyUserInfo) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bui._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBuyUserInfoTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`uid = ?, buy_no = ?, nick_name = ?, real_name = ?, avatar = ?, oss_id = ?, gender = ?, birthday = ?, level = ?, point = ?, balance = ?, tag = ?, status = ?, type = ?, is_authentication = ?, is_open_cart_remark = ?, created_at = ?, updated_at = ?` +
		` WHERE buid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bui.UID, bui.BuyNo, bui.NickName, bui.RealName, bui.Avatar, bui.OssID, bui.Gender, bui.Birthday, bui.Level, bui.Point, bui.Balance, bui.Tag, bui.Status, bui.Type, bui.IsAuthentication, bui.IsOpenCartRemark, bui.CreatedAt, bui.UpdatedAt, bui.Buid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bui.UID, bui.BuyNo, bui.NickName, bui.RealName, bui.Avatar, bui.OssID, bui.Gender, bui.Birthday, bui.Level, bui.Point, bui.Balance, bui.Tag, bui.Status, bui.Type, bui.IsAuthentication, bui.IsOpenCartRemark, bui.CreatedAt, bui.UpdatedAt, bui.Buid)
	} else {
		_, err = dbConn.Exec(sqlstr, bui.UID, bui.BuyNo, bui.NickName, bui.RealName, bui.Avatar, bui.OssID, bui.Gender, bui.Birthday, bui.Level, bui.Point, bui.Balance, bui.Tag, bui.Status, bui.Type, bui.IsAuthentication, bui.IsOpenCartRemark, bui.CreatedAt, bui.UpdatedAt, bui.Buid)
	}
	return err
}

// Save saves the BuyUserInfo to the database.
func (bui *BuyUserInfo) Save(ctx context.Context) error {
	if bui.Exists() {
		return bui.Update(ctx)
	}

	return bui.Insert(ctx)
}

// Delete deletes the BuyUserInfo from the database.
func (bui *BuyUserInfo) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bui._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetBuyUserInfoTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE buid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bui.Buid)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bui.Buid)
	} else {
		_, err = dbConn.Exec(sqlstr, bui.Buid)
	}

	if err != nil {
		return err
	}

	// set deleted
	bui._deleted = true

	return nil
}

// BuyUserInfoByBuid retrieves a row from 'aypcddg.buy_user_info' as a BuyUserInfo.
//
// Generated from index 'buy_user_info_buid_pkey'.
func BuyUserInfoByBuid(ctx context.Context, buid uint64, key ...interface{}) (*BuyUserInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBuyUserInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`buid, uid, buy_no, nick_name, real_name, avatar, oss_id, gender, birthday, level, point, balance, tag, status, type, is_authentication, is_open_cart_remark, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE buid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, buid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bui := BuyUserInfo{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, buid).Scan(&bui.Buid, &bui.UID, &bui.BuyNo, &bui.NickName, &bui.RealName, &bui.Avatar, &bui.OssID, &bui.Gender, &bui.Birthday, &bui.Level, &bui.Point, &bui.Balance, &bui.Tag, &bui.Status, &bui.Type, &bui.IsAuthentication, &bui.IsOpenCartRemark, &bui.CreatedAt, &bui.UpdatedAt)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, buid).Scan(&bui.Buid, &bui.UID, &bui.BuyNo, &bui.NickName, &bui.RealName, &bui.Avatar, &bui.OssID, &bui.Gender, &bui.Birthday, &bui.Level, &bui.Point, &bui.Balance, &bui.Tag, &bui.Status, &bui.Type, &bui.IsAuthentication, &bui.IsOpenCartRemark, &bui.CreatedAt, &bui.UpdatedAt)
		if err != nil {
			return nil, err
		}
	}

	return &bui, nil
}

// BuyUserInfosByUIDStatus retrieves a row from 'aypcddg.buy_user_info' as a BuyUserInfo.
//
// Generated from index 'idx_uid_status'.
func BuyUserInfosByUIDStatus(ctx context.Context, uid int, status int8, key ...interface{}) ([]*BuyUserInfo, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetBuyUserInfoTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`buid, uid, buy_no, nick_name, real_name, avatar, oss_id, gender, birthday, level, point, balance, tag, status, type, is_authentication, is_open_cart_remark, created_at, updated_at ` +
		`FROM ` + tableName +
		` WHERE uid = ? AND status = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid, status)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, uid, status)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, uid, status)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*BuyUserInfo, 0)
	for queryData.Next() {
		bui := BuyUserInfo{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&bui.Buid, &bui.UID, &bui.BuyNo, &bui.NickName, &bui.RealName, &bui.Avatar, &bui.OssID, &bui.Gender, &bui.Birthday, &bui.Level, &bui.Point, &bui.Balance, &bui.Tag, &bui.Status, &bui.Type, &bui.IsAuthentication, &bui.IsOpenCartRemark, &bui.CreatedAt, &bui.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &bui)
	}

	return res, nil
}
