// Package product contains the types for schema 'saas'.
package region

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Region represents a row from 'saas.region'.
type Region struct {
	ID           uint   `json:"id"`            // id
	ProvinceID   uint   `json:"province_id"`   // province_id
	ProvinceName string `json:"province_name"` // province_name
	CityCode     string `json:"city_code"`     // city_code
	CityID       uint   `json:"city_id"`       // city_id
	CityName     string `json:"city_name"`     // city_name
	DistrictID   uint   `json:"district_id"`   // district_id
	DistrictName string `json:"district_name"` // district_name
	RegionType   int8   `json:"region_type"`   // region_type
	IsAvailable  int8   `json:"is_available"`  // is_available
	AliasName    string `json:"alias_name"`    // alias_name
	CreatedTime  uint   `json:"created_time"`  // created_time
	UpdatedTime  uint   `json:"updated_time"`  // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Region exists in the database.
func (r *Region) Exists() bool { //region
	return r._exists
}

// Deleted provides information if the Region has been deleted from the database.
func (r *Region) Deleted() bool {
	return r._deleted
}

// Get table name
func GetRegionTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "region", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Region to the database.
func (r *Region) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRegionTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`province_id, province_name, city_code, city_id, city_name, district_id, district_name, region_type, is_available, alias_name, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, r.ProvinceID, r.ProvinceName, r.CityCode, r.CityID, r.CityName, r.DistrictID, r.DistrictName, r.RegionType, r.IsAvailable, r.AliasName, r.CreatedTime, r.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, r.ProvinceID, r.ProvinceName, r.CityCode, r.CityID, r.CityName, r.DistrictID, r.DistrictName, r.RegionType, r.IsAvailable, r.AliasName, r.CreatedTime, r.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, r.ProvinceID, r.ProvinceName, r.CityCode, r.CityID, r.CityName, r.DistrictID, r.DistrictName, r.RegionType, r.IsAvailable, r.AliasName, r.CreatedTime, r.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	r.ID = uint(id)
	r._exists = true

	return nil
}

// Update updates the Region in the database.
func (r *Region) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRegionTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`province_id = ?, province_name = ?, city_code = ?, city_id = ?, city_name = ?, district_id = ?, district_name = ?, region_type = ?, is_available = ?, alias_name = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, r.ProvinceID, r.ProvinceName, r.CityCode, r.CityID, r.CityName, r.DistrictID, r.DistrictName, r.RegionType, r.IsAvailable, r.AliasName, r.CreatedTime, r.UpdatedTime, r.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, r.ProvinceID, r.ProvinceName, r.CityCode, r.CityID, r.CityName, r.DistrictID, r.DistrictName, r.RegionType, r.IsAvailable, r.AliasName, r.CreatedTime, r.UpdatedTime, r.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, r.ProvinceID, r.ProvinceName, r.CityCode, r.CityID, r.CityName, r.DistrictID, r.DistrictName, r.RegionType, r.IsAvailable, r.AliasName, r.CreatedTime, r.UpdatedTime, r.ID)
	}
	return err
}

// Save saves the Region to the database.
func (r *Region) Save(ctx context.Context) error {
	if r.Exists() {
		return r.Update(ctx)
	}

	return r.Insert(ctx)
}

// Delete deletes the Region from the database.
func (r *Region) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if r._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRegionTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, r.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, r.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, r.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RegionsByCityID retrieves a row from 'saas.region' as a Region.
//
// Generated from index 'city'.
func RegionsByCityID(ctx context.Context, cityID uint, key ...interface{}) ([]*Region, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRegionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, province_id, province_name, city_code, city_id, city_name, district_id, district_name, region_type, is_available, alias_name, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE city_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cityID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, cityID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, cityID)
		if err != nil {
			return nil, err
		}
		defer dbConn.Close()
	}

	// load results
	res := make([]*Region, 0)
	for queryData.Next() {
		r := Region{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&r.ID, &r.ProvinceID, &r.ProvinceName, &r.CityCode, &r.CityID, &r.CityName, &r.DistrictID, &r.DistrictName, &r.RegionType, &r.IsAvailable, &r.AliasName, &r.CreatedTime, &r.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RegionsByDistrictID retrieves a row from 'saas.region' as a Region.
//
// Generated from index 'district_id'.
func RegionsByDistrictID(ctx context.Context, districtID uint, key ...interface{}) ([]*Region, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRegionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, province_id, province_name, city_code, city_id, city_name, district_id, district_name, region_type, is_available, alias_name, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE district_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, districtID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, districtID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, districtID)
		if err != nil {
			return nil, err
		}
	}
	defer queryData.Close()

	// load results
	res := make([]*Region, 0)
	for queryData.Next() {
		r := Region{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&r.ID, &r.ProvinceID, &r.ProvinceName, &r.CityCode, &r.CityID, &r.CityName, &r.DistrictID, &r.DistrictName, &r.RegionType, &r.IsAvailable, &r.AliasName, &r.CreatedTime, &r.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RegionsByProvinceID retrieves a row from 'saas.region' as a Region.
//
// Generated from index 'province_id'.
func RegionsByProvinceID(ctx context.Context, provinceID uint, key ...interface{}) ([]*Region, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRegionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, province_id, province_name, city_code, city_id, city_name, district_id, district_name, region_type, is_available, alias_name, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE province_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, provinceID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, provinceID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, provinceID)
		if err != nil {
			return nil, err
		}
		defer dbConn.Close()
	}

	// load results
	res := make([]*Region, 0)
	for queryData.Next() {
		r := Region{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&r.ID, &r.ProvinceID, &r.ProvinceName, &r.CityCode, &r.CityID, &r.CityName, &r.DistrictID, &r.DistrictName, &r.RegionType, &r.IsAvailable, &r.AliasName, &r.CreatedTime, &r.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RegionByID retrieves a row from 'saas.region' as a Region.
//
// Generated from index 'region_id_pkey'.
func RegionByID(ctx context.Context, id uint, key ...interface{}) (*Region, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRegionTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, province_id, province_name, city_code, city_id, city_name, district_id, district_name, region_type, is_available, alias_name, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	r := Region{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&r.ID, &r.ProvinceID, &r.ProvinceName, &r.CityCode, &r.CityID, &r.CityName, &r.DistrictID, &r.DistrictName, &r.RegionType, &r.IsAvailable, &r.AliasName, &r.CreatedTime, &r.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&r.ID, &r.ProvinceID, &r.ProvinceName, &r.CityCode, &r.CityID, &r.CityName, &r.DistrictID, &r.DistrictName, &r.RegionType, &r.IsAvailable, &r.AliasName, &r.CreatedTime, &r.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &r, nil
}

//根据给定条件获取地区信息
func GetRegionInfoByCondition(ctx context.Context, conditions map[string]interface{}) (*Region, error) {
	sqlstr, args, err := squirrel.
		Select("id", "province_id", "province_name", "city_code", "city_id", "city_name", "district_id", "district_name", "region_type", "is_available", "alias_name", "created_time", "updated_time").
		Where(conditions).
		Limit(utils.ONE).
		ToSql()

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))

	var dbConn *sql.DB
	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	r := &Region{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, args).Scan(&r.ID, &r.ProvinceID, &r.ProvinceName, &r.CityCode, &r.CityID, &r.CityName, &r.DistrictID, &r.DistrictName, &r.RegionType, &r.IsAvailable, &r.AliasName, &r.CreatedTime, &r.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, args).Scan(&r.ID, &r.ProvinceID, &r.ProvinceName, &r.CityCode, &r.CityID, &r.CityName, &r.DistrictID, &r.DistrictName, &r.RegionType, &r.IsAvailable, &r.AliasName, &r.CreatedTime, &r.UpdatedTime)
		if err != nil {
			return nil, err
		}
		defer dbConn.Close()
	}

	return r, nil
}
