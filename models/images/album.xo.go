// Package xo contains the types for schema 'saas'.
package imagesModel

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Album represents a row from 'saas.album'.
type Album struct {
	ID          uint `json:"id"`           // id
	IsDel       int8 `json:"is_del"`       // is_del
	CreatedTime uint `json:"created_time"` // created_time
	UpdatedTime uint `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Album exists in the database.
func (a *Album) Exists() bool { //album
	return a._exists
}

// Deleted provides information if the Album has been deleted from the database.
func (a *Album) Deleted() bool {
	return a._deleted
}

// Get table name
func GetAlbumTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "album", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Album to the database.
func (a *Album) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAlbumTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.IsDel, a.CreatedTime, a.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, a.IsDel, a.CreatedTime, a.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, a.IsDel, a.CreatedTime, a.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = uint(id)
	a._exists = true

	return nil
}

// Update updates the Album in the database.
func (a *Album) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAlbumTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.IsDel, a.CreatedTime, a.UpdatedTime, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.IsDel, a.CreatedTime, a.UpdatedTime, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.IsDel, a.CreatedTime, a.UpdatedTime, a.ID)
	}
	return err
}

// Save saves the Album to the database.
func (a *Album) Save(ctx context.Context) error {
	if a.Exists() {
		return a.Update(ctx)
	}

	return a.Insert(ctx)
}

// Delete deletes the Album from the database.
func (a *Album) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if a._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAlbumTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, a.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, a.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, a.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AlbumByID retrieves a row from 'saas.album' as a Album.
//
// Generated from index 'album_id_pkey'.
func AlbumByID(ctx context.Context, id uint, key ...interface{}) (*Album, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAlbumTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	a := Album{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&a.ID, &a.IsDel, &a.CreatedTime, &a.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&a.ID, &a.IsDel, &a.CreatedTime, &a.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &a, nil
}

//批量删除相册
func BatchDeleteAlbums(ctx context.Context, albumIds []uint32, key ...interface{}) error {
	var dbConn *sql.DB

	tableName, err := GetAlbumTableName(key...)
	if err != nil {
		return err
	}

	sqlstr, args, err := squirrel.Update(tableName).Set("is_del", utils.DELETED).Where(squirrel.Eq{"id": albumIds}).ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,batch_delete_albums", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}
