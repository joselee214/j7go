// Package product contains the types for schema 'saas'.
package staff

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"go.7yes.com/go/proto/common"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// BrandSpecialtySetting represents a row from 'saas.brand_specialty_setting'.
type BrandSpecialtySetting struct {
	ID            uint          `json:"id"`             // id
	BrandID       uint          `json:"brand_id"`       // brand_id
	SpecialtyName string        `json:"specialty_name"` // specialty_name
	IsSystem      int8          `json:"is_system"`      // is_system
	IsDel         int8          `json:"is_del"`         // is_del
	CreatedTime   sql.NullInt64 `json:"created_time"`   // created_time
	UpdatedTime   sql.NullInt64 `json:"updated_time"`   // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BrandSpecialtySetting exists in the database.
func (bss *BrandSpecialtySetting) Exists() bool { //brand_specialty_setting
	return bss._exists
}

// Deleted provides information if the BrandSpecialtySetting has been deleted from the database.
func (bss *BrandSpecialtySetting) Deleted() bool {
	return bss._deleted
}

// Get table name
func getBrandSpecialtySettingTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "brand_specialty_setting", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the BrandSpecialtySetting to the database.
func (bss *BrandSpecialtySetting) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	// if already exist, bail
	if bss._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getBrandSpecialtySettingTableName(key...)
	if err != nil {
		return err
	}

	var res sql.Result
	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, specialty_name, is_system, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bss.BrandID, bss.SpecialtyName, bss.IsSystem, bss.IsDel, bss.CreatedTime, bss.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, bss.BrandID, bss.SpecialtyName, bss.IsSystem, bss.IsDel, bss.CreatedTime, bss.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, bss.BrandID, bss.SpecialtyName, bss.IsSystem, bss.IsDel, bss.CreatedTime, bss.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	bss.ID = uint(id)
	bss._exists = true

	return nil
}

// Update updates the BrandSpecialtySetting in the database.
func (bss *BrandSpecialtySetting) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bss._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getBrandSpecialtySettingTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, specialty_name = ?, is_system = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bss.BrandID, bss.SpecialtyName, bss.IsSystem, bss.IsDel, bss.CreatedTime, bss.UpdatedTime, bss.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bss.BrandID, bss.SpecialtyName, bss.IsSystem, bss.IsDel, bss.CreatedTime, bss.UpdatedTime, bss.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bss.BrandID, bss.SpecialtyName, bss.IsSystem, bss.IsDel, bss.CreatedTime, bss.UpdatedTime, bss.ID)
	}
	return err
}

// Save saves the BrandSpecialtySetting to the database.
func (bss *BrandSpecialtySetting) Save(ctx context.Context) error {
	if bss.Exists() {
		return bss.Update(ctx)
	}

	return bss.Insert(ctx)
}

// Delete deletes the BrandSpecialtySetting from the database.
func (bss *BrandSpecialtySetting) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if bss._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getBrandSpecialtySettingTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, bss.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, bss.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, bss.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	bss._deleted = true

	return nil
}

// BrandSpecialtySettingByID retrieves a row from 'saas.brand_specialty_setting' as a BrandSpecialtySetting.
//
// Generated from index 'brand_specialty_setting_id_pkey'.
func BrandSpecialtySettingByID(ctx context.Context, id uint) (*BrandSpecialtySetting, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getBrandSpecialtySettingTableName()
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, specialty_name, is_system, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ? and is_del = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id, common.DelStatus_NOT_DEL)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	bss := BrandSpecialtySetting{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id, common.DelStatus_NOT_DEL).Scan(&bss.ID, &bss.BrandID, &bss.SpecialtyName, &bss.IsSystem, &bss.IsDel, &bss.CreatedTime, &bss.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id, common.DelStatus_NOT_DEL).Scan(&bss.ID, &bss.BrandID, &bss.SpecialtyName, &bss.IsSystem, &bss.IsDel, &bss.CreatedTime, &bss.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &bss, nil
}
