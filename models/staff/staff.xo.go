// Package test contains the types for schema 'saas'.
package staff

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"go.7yes.com/j7f/proto/common"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Staff represents a row from 'saas.staff'.
type Staff struct {
	ID              uint   `json:"id"`               // id
	BrandID         uint   `json:"brand_id"`         // brand_id
	StaffName       string `json:"staff_name"`       // staff_name
	Nickname        string `json:"nickname"`         // nickname
	CountryCodeID   uint   `json:"country_code_id"`  // country_code_id
	Mobile          string `json:"mobile"`           // mobile
	Mail            string `json:"mail"`             // mail
	Sex             int8   `json:"sex"`              // sex
	IDType          int8   `json:"id_type"`          // id_type
	IDNumber        string `json:"id_number"`        // id_number
	StaffNum        string `json:"staff_num"`        // staff_num
	WorkingPost     string `json:"working_post"`     // working_post
	CoachLevelID    uint   `json:"coach_level_id"`   // coach_level_id
	NatureWork      int8   `json:"nature_work"`      // nature_work
	WorkStatus      int8   `json:"work_status"`      // work_status
	IsPermission    int8   `json:"is_permission"`    // is_permission
	Birthday        string `json:"birthday"`         // birthday
	GraduatedSchool string `json:"graduated_school"` // graduated_school
	GraduationTime  uint   `json:"graduation_time"`  // graduation_time
	Education       int8   `json:"education"`        // education
	Profession      string `json:"profession"`       // profession
	NativePlace     string `json:"native_place"`     // native_place
	MarryStatus     int8   `json:"marry_status"`     // marry_status
	ChildrenStatus  int8   `json:"children_status"`  // children_status
	ProvinceID      uint   `json:"province_id"`      // province_id
	ProvinceName    string `json:"province_name"`    // province_name
	CityID          uint   `json:"city_id"`          // city_id
	CityName        string `json:"city_name"`        // city_name
	DistrictID      uint   `json:"district_id"`      // district_id
	DistrictName    string `json:"district_name"`    // district_name
	Address         string `json:"address"`          // address
	Description     string `json:"description"`      // description
	EmploymentTime  uint   `json:"employment_time"`  // employment_time
	Introduction    string `json:"introduction"`     // introduction
	IsShow          int8   `json:"is_show"`          // is_show
	EntryDate       uint   `json:"entry_date"`       // entry_date
	LeaveDate       uint   `json:"leave_date"`       // leave_date
	AlbumID         uint   `json:"album_id"`         // album_id
	IsDel           int8   `json:"is_del"`           // is_del
	CreatedTime     uint   `json:"created_time"`     // created_time
	UpdatedTime     uint   `json:"updated_time"`     // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Staff exists in the database.
func (s *Staff) Exists() bool { //staff
	return s._exists
}

// Deleted provides information if the Staff has been deleted from the database.
func (s *Staff) Deleted() bool {
	return s._deleted
}

// Get table name
func GetStaffTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "staff", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Staff to the database.
func (s *Staff) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStaffTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, staff_name, nickname, country_code_id, mobile, mail, sex, id_type, id_number, staff_num, working_post, coach_level_id, nature_work, work_status, is_permission, birthday, graduated_school, graduation_time, education, profession, native_place, marry_status, children_status, province_id, province_name, city_id, city_name, district_id, district_name, address, description, employment_time, introduction, is_show, entry_date, leave_date, album_id, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.BrandID, s.StaffName, s.Nickname, s.CountryCodeID, s.Mobile, s.Mail, s.Sex, s.IDType, s.IDNumber, s.StaffNum, s.WorkingPost, s.CoachLevelID, s.NatureWork, s.WorkStatus, s.IsPermission, s.Birthday, s.GraduatedSchool, s.GraduationTime, s.Education, s.Profession, s.NativePlace, s.MarryStatus, s.ChildrenStatus, s.ProvinceID, s.ProvinceName, s.CityID, s.CityName, s.DistrictID, s.DistrictName, s.Address, s.Description, s.EmploymentTime, s.Introduction, s.IsShow, s.EntryDate, s.LeaveDate, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, s.BrandID, s.StaffName, s.Nickname, s.CountryCodeID, s.Mobile, s.Mail, s.Sex, s.IDType, s.IDNumber, s.StaffNum, s.WorkingPost, s.CoachLevelID, s.NatureWork, s.WorkStatus, s.IsPermission, s.Birthday, s.GraduatedSchool, s.GraduationTime, s.Education, s.Profession, s.NativePlace, s.MarryStatus, s.ChildrenStatus, s.ProvinceID, s.ProvinceName, s.CityID, s.CityName, s.DistrictID, s.DistrictName, s.Address, s.Description, s.EmploymentTime, s.Introduction, s.IsShow, s.EntryDate, s.LeaveDate, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, s.BrandID, s.StaffName, s.Nickname, s.CountryCodeID, s.Mobile, s.Mail, s.Sex, s.IDType, s.IDNumber, s.StaffNum, s.WorkingPost, s.CoachLevelID, s.NatureWork, s.WorkStatus, s.IsPermission, s.Birthday, s.GraduatedSchool, s.GraduationTime, s.Education, s.Profession, s.NativePlace, s.MarryStatus, s.ChildrenStatus, s.ProvinceID, s.ProvinceName, s.CityID, s.CityName, s.DistrictID, s.DistrictName, s.Address, s.Description, s.EmploymentTime, s.Introduction, s.IsShow, s.EntryDate, s.LeaveDate, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = uint(id)
	s._exists = true

	return nil
}

// Update updates the Staff in the database.
func (s *Staff) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStaffTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, staff_name = ?, nickname = ?, country_code_id = ?, mobile = ?, mail = ?, sex = ?, id_type = ?, id_number = ?, staff_num = ?, working_post = ?, coach_level_id = ?, nature_work = ?, work_status = ?, is_permission = ?, birthday = ?, graduated_school = ?, graduation_time = ?, education = ?, profession = ?, native_place = ?, marry_status = ?, children_status = ?, province_id = ?, province_name = ?, city_id = ?, city_name = ?, district_id = ?, district_name = ?, address = ?, description = ?, employment_time = ?, introduction = ?, is_show = ?, entry_date = ?, leave_date = ?, album_id = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.BrandID, s.StaffName, s.Nickname, s.CountryCodeID, s.Mobile, s.Mail, s.Sex, s.IDType, s.IDNumber, s.StaffNum, s.WorkingPost, s.CoachLevelID, s.NatureWork, s.WorkStatus, s.IsPermission, s.Birthday, s.GraduatedSchool, s.GraduationTime, s.Education, s.Profession, s.NativePlace, s.MarryStatus, s.ChildrenStatus, s.ProvinceID, s.ProvinceName, s.CityID, s.CityName, s.DistrictID, s.DistrictName, s.Address, s.Description, s.EmploymentTime, s.Introduction, s.IsShow, s.EntryDate, s.LeaveDate, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, s.BrandID, s.StaffName, s.Nickname, s.CountryCodeID, s.Mobile, s.Mail, s.Sex, s.IDType, s.IDNumber, s.StaffNum, s.WorkingPost, s.CoachLevelID, s.NatureWork, s.WorkStatus, s.IsPermission, s.Birthday, s.GraduatedSchool, s.GraduationTime, s.Education, s.Profession, s.NativePlace, s.MarryStatus, s.ChildrenStatus, s.ProvinceID, s.ProvinceName, s.CityID, s.CityName, s.DistrictID, s.DistrictName, s.Address, s.Description, s.EmploymentTime, s.Introduction, s.IsShow, s.EntryDate, s.LeaveDate, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, s.BrandID, s.StaffName, s.Nickname, s.CountryCodeID, s.Mobile, s.Mail, s.Sex, s.IDType, s.IDNumber, s.StaffNum, s.WorkingPost, s.CoachLevelID, s.NatureWork, s.WorkStatus, s.IsPermission, s.Birthday, s.GraduatedSchool, s.GraduationTime, s.Education, s.Profession, s.NativePlace, s.MarryStatus, s.ChildrenStatus, s.ProvinceID, s.ProvinceName, s.CityID, s.CityName, s.DistrictID, s.DistrictName, s.Address, s.Description, s.EmploymentTime, s.Introduction, s.IsShow, s.EntryDate, s.LeaveDate, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ID)
	}
	return err
}

// Save saves the Staff to the database.
func (s *Staff) Save(ctx context.Context) error {
	if s.Exists() {
		return s.Update(ctx)
	}

	return s.Insert(ctx)
}

// Delete deletes the Staff from the database.
func (s *Staff) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if s._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStaffTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, s.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, s.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// StaffByID retrieves a row from 'saas.staff' as a Staff.
//
// Generated from index 'staff_id_key'.
func StaffByID(ctx context.Context, id uint) (*Staff, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetStaffTableName()
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, staff_name, nickname, country_code_id, mobile, mail, sex, id_type, id_number, staff_num, working_post, coach_level_id, nature_work, work_status, is_permission, birthday, graduated_school, graduation_time, education, profession, native_place, marry_status, children_status, province_id, province_name, city_id, city_name, district_id, district_name, address, description, employment_time, introduction, is_show, entry_date, leave_date, album_id, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ? and is_del = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id, common.DelStatus_NOT_DEL)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	s := Staff{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id, common.DelStatus_NOT_DEL).Scan(&s.ID, &s.BrandID, &s.StaffName, &s.Nickname, &s.CountryCodeID, &s.Mobile, &s.Mail, &s.Sex, &s.IDType, &s.IDNumber, &s.StaffNum, &s.WorkingPost, &s.CoachLevelID, &s.NatureWork, &s.WorkStatus, &s.IsPermission, &s.Birthday, &s.GraduatedSchool, &s.GraduationTime, &s.Education, &s.Profession, &s.NativePlace, &s.MarryStatus, &s.ChildrenStatus, &s.ProvinceID, &s.ProvinceName, &s.CityID, &s.CityName, &s.DistrictID, &s.DistrictName, &s.Address, &s.Description, &s.EmploymentTime, &s.Introduction, &s.IsShow, &s.EntryDate, &s.LeaveDate, &s.AlbumID, &s.IsDel, &s.CreatedTime, &s.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id, common.DelStatus_NOT_DEL).Scan(&s.ID, &s.BrandID, &s.StaffName, &s.Nickname, &s.CountryCodeID, &s.Mobile, &s.Mail, &s.Sex, &s.IDType, &s.IDNumber, &s.StaffNum, &s.WorkingPost, &s.CoachLevelID, &s.NatureWork, &s.WorkStatus, &s.IsPermission, &s.Birthday, &s.GraduatedSchool, &s.GraduationTime, &s.Education, &s.Profession, &s.NativePlace, &s.MarryStatus, &s.ChildrenStatus, &s.ProvinceID, &s.ProvinceName, &s.CityID, &s.CityName, &s.DistrictID, &s.DistrictName, &s.Address, &s.Description, &s.EmploymentTime, &s.Introduction, &s.IsShow, &s.EntryDate, &s.LeaveDate, &s.AlbumID, &s.IsDel, &s.CreatedTime, &s.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &s, nil
}

//更新员工信息
func (s *Staff) StaffUpdate(ctx context.Context, staffId uint) error {
	var dbConn *sql.DB
	tableName, _ := GetStaffTableName()
	sqlstr, args, err := squirrel.
		Update(tableName).
		Where(squirrel.Eq{"id": staffId}).
		Set("brand_id", s.BrandID).
		Set("staff_name", s.StaffName).
		Set("nick_name", s.Nickname).
		Set("mobile", s.Mobile).
		Set("staff_num", s.StaffNum).
		Set("mail", s.Mail).
		Set("sex", s.Sex).
		Set("id_type", s.IDType).
		Set("id_number", s.IDNumber).
		Set("working_post", s.WorkingPost).
		Set("coach_level_id", s.CoachLevelID).
		Set("nature_work", s.NatureWork).
		Set("entry_date", s.EntryDate).
		Set("updated_time", s.UpdatedTime).
		ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,update_staff", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}

//更新员工详细信息
func (s *Staff) StaffDetailedUpdate(ctx context.Context, staffId uint) error {
	var dbConn *sql.DB
	tableName, _ := GetStaffTableName()
	sqlstr, args, err := squirrel.
		Update(tableName).
		Where(squirrel.Eq{"id": staffId}).
		Set("graduated_school", s.GraduatedSchool).
		Set("graduation_time", s.GraduationTime).
		Set("education", s.Education).
		Set("profession", s.Profession).
		Set("birthday", s.Birthday).
		Set("native_place", s.NativePlace).
		Set("marry_status", s.MarryStatus).
		Set("children_status", s.ChildrenStatus).
		Set("province_id", s.ProvinceID).
		Set("province_name", s.ProvinceName).
		Set("city_id", s.CityID).
		Set("city_name", s.CityName).
		Set("district_id", s.DistrictID).
		Set("district_name", s.DistrictName).
		Set("address", s.Address).
		Set("description", s.Description).
		Set("updated_time", s.UpdatedTime).
		ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,update_staff_detailed", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}

//更新员工教练信息
func (s *Staff) StaffCoachUpdate(ctx context.Context, staffId uint) error {
	var dbConn *sql.DB
	tableName, _ := GetStaffTableName()
	sqlstr, args, err := squirrel.
		Update(tableName).
		Where(squirrel.Eq{"id": staffId}).
		Set("employment_time", s.EmploymentTime).
		Set("introduction", s.Introduction).
		Set("album_id", s.AlbumID).
		Set("is_show", s.IsShow).
		Set("updated_time", s.UpdatedTime).
		ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,update_staff_coach", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}