// Package product contains the types for schema 'saas'.
package staff

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"go.7yes.com/j7f/proto/common"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// StaffMienCertification represents a row from 'saas.staff_mien_certification'.
type StaffMienCertification struct {
	ID                uint   `json:"id"`                 // id
	StaffID           uint   `json:"staff_id"`           // staff_id
	CertificationName string `json:"certification_name"` // certification_name
	IsDel             int8   `json:"is_del"`             // is_del
	CreatedTime       int    `json:"created_time"`       // created_time
	UpdatedTime       int    `json:"updated_time"`       // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the StaffMienCertification exists in the database.
func (smc *StaffMienCertification) Exists() bool { //staff_mien_certification
	return smc._exists
}

// Deleted provides information if the StaffMienCertification has been deleted from the database.
func (smc *StaffMienCertification) Deleted() bool {
	return smc._deleted
}

// Get table name
func getStaffMienCertificationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "staff_mien_certification", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the StaffMienCertification to the database.
func (smc *StaffMienCertification) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	// if already exist, bail
	if smc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getStaffMienCertificationTableName(key...)
	if err != nil {
		return err
	}

	var res sql.Result
	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`staff_id, certification_name, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, smc.StaffID, smc.CertificationName, smc.IsDel, smc.CreatedTime, smc.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, smc.StaffID, smc.CertificationName, smc.IsDel, smc.CreatedTime, smc.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, smc.StaffID, smc.CertificationName, smc.IsDel, smc.CreatedTime, smc.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	smc.ID = uint(id)
	smc._exists = true

	return nil
}

// Update updates the StaffMienCertification in the database.
func (smc *StaffMienCertification) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if smc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getStaffMienCertificationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`staff_id = ?, certification_name = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, smc.StaffID, smc.CertificationName, smc.IsDel, smc.CreatedTime, smc.UpdatedTime, smc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, smc.StaffID, smc.CertificationName, smc.IsDel, smc.CreatedTime, smc.UpdatedTime, smc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, smc.StaffID, smc.CertificationName, smc.IsDel, smc.CreatedTime, smc.UpdatedTime, smc.ID)
	}
	return err
}

// Save saves the StaffMienCertification to the database.
func (smc *StaffMienCertification) Save(ctx context.Context) error {
	if smc.Exists() {
		return smc.Update(ctx)
	}

	return smc.Insert(ctx)
}

// Delete deletes the StaffMienCertification from the database.
func (smc *StaffMienCertification) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if smc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getStaffMienCertificationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, smc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, smc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, smc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	smc._deleted = true

	return nil
}

// StaffMienCertificationByID retrieves a row from 'saas.staff_mien_certification' as a StaffMienCertification.
//
// Generated from index 'staff_mien_certification_id_pkey'.
func StaffMienCertificationByID(ctx context.Context, id uint, key ...interface{}) (*StaffMienCertification, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getStaffMienCertificationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, staff_id, certification_name, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	smc := StaffMienCertification{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&smc.ID, &smc.StaffID, &smc.CertificationName, &smc.IsDel, &smc.CreatedTime, &smc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&smc.ID, &smc.StaffID, &smc.CertificationName, &smc.IsDel, &smc.CreatedTime, &smc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &smc, nil
}

//获取员工所有证书
func GetStaffMienCertification(ctx context.Context, staffId uint) ([]*StaffMienCertification, error) {
	var err error
	var dbConn *sql.DB
	var q *sql.Rows
	tableName, err := getStaffMienCertificationTableName()
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, staff_id, certification_name, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE staff_id = ? and is_del = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, staffId, common.DelStatus_NOT_DEL)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	if tx != nil {
		q, err = tx.Query(sqlstr, staffId, common.DelStatus_NOT_DEL)
		if err != nil {
			return nil, err
		}
	} else {
		q, err = dbConn.Query(sqlstr, staffId, common.DelStatus_NOT_DEL)
		if err != nil {
			return nil, err
		}
	}
	defer q.Close()
	smc := make([]*StaffMienCertification, 0)
	for q.Next() {
		sm := &StaffMienCertification{}
		err = q.Scan(&sm.ID, &sm.StaffID, &sm.CertificationName, &sm.IsDel, &sm.CreatedTime, &sm.UpdatedTime)
		if err != nil {
			return nil, err
		}
		sm._exists = true
		smc = append(smc, sm)
	}

	return smc, nil
}
