// Package product contains the types for schema 'saas'.
package staff

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"go.7yes.com/j7f/proto/common"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// StaffIdentityRelation represents a row from 'saas.staff_identity_relation'.
type StaffIdentityRelation struct {
	ID          uint `json:"id"`           // id
	BrandID     uint `json:"brand_id"`     // brand_id
	StaffID     uint `json:"staff_id"`     // staff_id
	Identity    int8 `json:"identity"`     // identity
	IsDel       int8 `json:"is_del"`       // is_del
	CreatedTime uint `json:"created_time"` // created_time
	UpdatedTime uint `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the StaffIdentityRelation exists in the database.
func (sir *StaffIdentityRelation) Exists() bool { //staff_identity_relation
	return sir._exists
}

// Deleted provides information if the StaffIdentityRelation has been deleted from the database.
func (sir *StaffIdentityRelation) Deleted() bool {
	return sir._deleted
}

// Get table name
func getStaffIdentityRelationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "staff_identity_relation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the StaffIdentityRelation to the database.
func (sir *StaffIdentityRelation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	// if already exist, bail
	if sir._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getStaffIdentityRelationTableName(key...)
	if err != nil {
		return err
	}

	var res sql.Result
	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, staff_id, identity, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sir.BrandID, sir.StaffID, sir.Identity, sir.IsDel, sir.CreatedTime, sir.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sir.BrandID, sir.StaffID, sir.Identity, sir.IsDel, sir.CreatedTime, sir.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, sir.BrandID, sir.StaffID, sir.Identity, sir.IsDel, sir.CreatedTime, sir.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sir.ID = uint(id)
	sir._exists = true

	return nil
}

// Update updates the StaffIdentityRelation in the database.
func (sir *StaffIdentityRelation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sir._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getStaffIdentityRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, staff_id = ?, identity = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sir.BrandID, sir.StaffID, sir.Identity, sir.IsDel, sir.CreatedTime, sir.UpdatedTime, sir.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sir.BrandID, sir.StaffID, sir.Identity, sir.IsDel, sir.CreatedTime, sir.UpdatedTime, sir.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sir.BrandID, sir.StaffID, sir.Identity, sir.IsDel, sir.CreatedTime, sir.UpdatedTime, sir.ID)
	}
	return err
}

// Save saves the StaffIdentityRelation to the database.
func (sir *StaffIdentityRelation) Save(ctx context.Context) error {
	if sir.Exists() {
		return sir.Update(ctx)
	}

	return sir.Insert(ctx)
}

// Delete deletes the StaffIdentityRelation from the database.
func (sir *StaffIdentityRelation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sir._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getStaffIdentityRelationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sir.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sir.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sir.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sir._deleted = true

	return nil
}

// StaffIdentityRelationByID retrieves a row from 'saas.staff_identity_relation' as a StaffIdentityRelation.
//
// Generated from index 'staff_identity_relation_id_pkey'.
func StaffIdentityRelationByID(ctx context.Context, id uint, key ...interface{}) (*StaffIdentityRelation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getStaffIdentityRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, staff_id, identity, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sir := StaffIdentityRelation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sir.ID, &sir.BrandID, &sir.StaffID, &sir.Identity, &sir.IsDel, &sir.CreatedTime, &sir.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sir.ID, &sir.BrandID, &sir.StaffID, &sir.Identity, &sir.IsDel, &sir.CreatedTime, &sir.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &sir, nil
}

//获取员工所有身份
func GetStaffIdentityRelation(ctx context.Context, brandId, staffId uint) ([]*StaffIdentityRelation, error) {
	var err error
	var dbConn *sql.DB
	var q *sql.Rows
	tableName, err := getStaffIdentityRelationTableName()
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, staff_id, identity, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE brand_id = ? and staff_id = ? and is_del = ? `

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, brandId, staffId, common.DelStatus_NOT_DEL)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	if tx != nil {
		q, err = tx.Query(sqlstr, brandId, staffId, common.DelStatus_NOT_DEL)
		if err != nil {
			return nil, err
		}
	} else {
		q, err = dbConn.Query(sqlstr, brandId, staffId, common.DelStatus_NOT_DEL)
		if err != nil {
			return nil, err
		}
	}
	defer q.Close()

	staffs := make([]*StaffIdentityRelation, 0)
	for q.Next() {
		sir := &StaffIdentityRelation{}
		err = q.Scan(&sir.ID, &sir.BrandID, &sir.StaffID, &sir.Identity, &sir.IsDel, &sir.CreatedTime, &sir.UpdatedTime)
		if err != nil {
			return nil, err
		}
		sir._exists = true
		staffs = append(staffs, sir)
	}

	return staffs, nil
}


//删除员工身份
func UpdateStaffIdentityRelation(ctx context.Context, brandId, staffId uint) error {
	var err error
	var dbConn *sql.DB
	// if deleted, bail
	sir := StaffIdentityRelation{
		_exists: true,
	}

	if sir._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getStaffIdentityRelationTableName()
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`is_del = ?` +
		` WHERE brand_id = ? and staff_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sir.BrandID, sir.StaffID, sir.Identity, sir.IsDel, sir.CreatedTime, sir.UpdatedTime, sir.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, common.DelStatus_DELED, brandId, staffId)
	} else {
		_, err = dbConn.Exec(sqlstr, common.DelStatus_DELED, brandId, staffId)
	}
	return err
}
