// Package test contains the types for schema 'saas'.
package staff

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"go.7yes.com/go/proto/common"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// AppSetting represents a row from 'saas.app_setting'.
type AppSetting struct {
	ID          uint          `json:"id"`           // id
	BrandID     uint          `json:"brand_id"`     // brand_id
	SettingName string        `json:"setting_name"` // setting_name
	SettingType int8          `json:"setting_type"` // setting_type
	SettingFrom int8          `json:"setting_from"` // setting_from
	IsDel       int8          `json:"is_del"`       // is_del
	UsedNumber  int           `json:"used_number"`  // used_number
	OperatorID  int           `json:"operator_id"`  // operator_id
	CreatedTime sql.NullInt64 `json:"created_time"` // created_time
	UpdatedTime sql.NullInt64 `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AppSetting exists in the database.
func (as *AppSetting) Exists() bool { //app_setting
	return as._exists
}

// Deleted provides information if the AppSetting has been deleted from the database.
func (as *AppSetting) Deleted() bool {
	return as._deleted
}

// Get table name
func GetAppSettingTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "app_setting", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the AppSetting to the database.
func (as *AppSetting) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if as._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAppSettingTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, setting_name, setting_type, setting_from, is_del, used_number, operator_id, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, as.BrandID, as.SettingName, as.SettingType, as.SettingFrom, as.IsDel, as.UsedNumber, as.OperatorID, as.CreatedTime, as.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, as.BrandID, as.SettingName, as.SettingType, as.SettingFrom, as.IsDel, as.UsedNumber, as.OperatorID, as.CreatedTime, as.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, as.BrandID, as.SettingName, as.SettingType, as.SettingFrom, as.IsDel, as.UsedNumber, as.OperatorID, as.CreatedTime, as.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	as.ID = uint(id)
	as._exists = true

	return nil
}

// Update updates the AppSetting in the database.
func (as *AppSetting) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if as._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAppSettingTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, setting_name = ?, setting_type = ?, setting_from = ?, is_del = ?, used_number = ?, operator_id = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, as.BrandID, as.SettingName, as.SettingType, as.SettingFrom, as.IsDel, as.UsedNumber, as.OperatorID, as.CreatedTime, as.UpdatedTime, as.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, as.BrandID, as.SettingName, as.SettingType, as.SettingFrom, as.IsDel, as.UsedNumber, as.OperatorID, as.CreatedTime, as.UpdatedTime, as.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, as.BrandID, as.SettingName, as.SettingType, as.SettingFrom, as.IsDel, as.UsedNumber, as.OperatorID, as.CreatedTime, as.UpdatedTime, as.ID)
	}
	return err
}

// Save saves the AppSetting to the database.
func (as *AppSetting) Save(ctx context.Context) error {
	if as.Exists() {
		return as.Update(ctx)
	}

	return as.Insert(ctx)
}

// Delete deletes the AppSetting from the database.
func (as *AppSetting) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if as._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetAppSettingTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, as.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, as.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, as.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	as._deleted = true

	return nil
}

// AppSettingByID retrieves a row from 'saas.app_setting' as a AppSetting.
//
// Generated from index 'app_setting_id_pkey'.
func AppSettingByID(ctx context.Context, id uint, key ...interface{}) (*AppSetting, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAppSettingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, setting_name, setting_type, setting_from, is_del, used_number, operator_id, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	as := AppSetting{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&as.ID, &as.BrandID, &as.SettingName, &as.SettingType, &as.SettingFrom, &as.IsDel, &as.UsedNumber, &as.OperatorID, &as.CreatedTime, &as.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&as.ID, &as.BrandID, &as.SettingName, &as.SettingType, &as.SettingFrom, &as.IsDel, &as.UsedNumber, &as.OperatorID, &as.CreatedTime, &as.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &as, nil
}

//获取教练等级
func GetBrandCoachLevel(ctx context.Context, id, brandId uint) (*AppSetting, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetAppSettingTableName()
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, setting_name, setting_type, setting_from, is_del, used_number, operator_id, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ? and brand_id = ? and type = ? and is_del = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id, brandId, COACH_LEVEL, common.DelStatus_NOT_DEL)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	asb := AppSetting{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id, brandId, COACH_LEVEL, common.DelStatus_NOT_DEL).Scan(&asb.ID, &asb.BrandID, &asb.SettingName, &asb.SettingType, &asb.SettingFrom, &asb.IsDel, &asb.UsedNumber, &asb.OperatorID, &asb.CreatedTime, &asb.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id, brandId, COACH_LEVEL, common.DelStatus_NOT_DEL).Scan(&asb.ID, &asb.BrandID, &asb.SettingName, &asb.SettingType, &asb.SettingFrom, &asb.IsDel, &asb.UsedNumber, &asb.OperatorID, &asb.CreatedTime, &asb.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &asb, nil
}
