// Package test contains the types for schema 'saas'.
package staff

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"go.7yes.com/j7f/proto/common"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// StaffBankCard represents a row from 'saas.staff_bank_card'.
type StaffBankCard struct {
	ID          uint   `json:"id"`           // id
	BrandID     uint   `json:"brand_id"`     // brand_id
	StaffID     uint   `json:"staff_id"`     // staff_id
	BankName    string `json:"bank_name"`    // bank_name
	CardNumber  string `json:"card_number"`  // card_number
	AccountName string `json:"account_name"` // account_name
	IsDel       bool   `json:"is_del"`       // is_del
	CreatedTime uint   `json:"created_time"` // created_time
	UpdatedTime uint   `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the StaffBankCard exists in the database.
func (sbc *StaffBankCard) Exists() bool { //staff_bank_card
	return sbc._exists
}

// Deleted provides information if the StaffBankCard has been deleted from the database.
func (sbc *StaffBankCard) Deleted() bool {
	return sbc._deleted
}

// Get table name
func GetStaffBankCardTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "staff_bank_card", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the StaffBankCard to the database.
func (sbc *StaffBankCard) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sbc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStaffBankCardTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, staff_id, bank_name, card_number, account_name, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sbc.BrandID, sbc.StaffID, sbc.BankName, sbc.CardNumber, sbc.AccountName, sbc.IsDel, sbc.CreatedTime, sbc.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sbc.BrandID, sbc.StaffID, sbc.BankName, sbc.CardNumber, sbc.AccountName, sbc.IsDel, sbc.CreatedTime, sbc.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, sbc.BrandID, sbc.StaffID, sbc.BankName, sbc.CardNumber, sbc.AccountName, sbc.IsDel, sbc.CreatedTime, sbc.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sbc.ID = uint(id)
	sbc._exists = true

	return nil
}

// Update updates the StaffBankCard in the database.
func (sbc *StaffBankCard) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sbc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStaffBankCardTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, staff_id = ?, bank_name = ?, card_number = ?, account_name = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sbc.BrandID, sbc.StaffID, sbc.BankName, sbc.CardNumber, sbc.AccountName, sbc.IsDel, sbc.CreatedTime, sbc.UpdatedTime, sbc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sbc.BrandID, sbc.StaffID, sbc.BankName, sbc.CardNumber, sbc.AccountName, sbc.IsDel, sbc.CreatedTime, sbc.UpdatedTime, sbc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sbc.BrandID, sbc.StaffID, sbc.BankName, sbc.CardNumber, sbc.AccountName, sbc.IsDel, sbc.CreatedTime, sbc.UpdatedTime, sbc.ID)
	}
	return err
}

// Save saves the StaffBankCard to the database.
func (sbc *StaffBankCard) Save(ctx context.Context) error {
	if sbc.Exists() {
		return sbc.Update(ctx)
	}

	return sbc.Insert(ctx)
}

// Delete deletes the StaffBankCard from the database.
func (sbc *StaffBankCard) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sbc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetStaffBankCardTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sbc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sbc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sbc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sbc._deleted = true

	return nil
}

// StaffBankCardByID retrieves a row from 'saas.staff_bank_card' as a StaffBankCard.
//
// Generated from index 'staff_bank_card_id_pkey'.
func StaffBankCardByID(ctx context.Context, id uint, key ...interface{}) (*StaffBankCard, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetStaffBankCardTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, staff_id, bank_name, card_number, account_name, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sbc := StaffBankCard{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sbc.ID, &sbc.BrandID, &sbc.StaffID, &sbc.BankName, &sbc.CardNumber, &sbc.AccountName, &sbc.IsDel, &sbc.CreatedTime, &sbc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sbc.ID, &sbc.BrandID, &sbc.StaffID, &sbc.BankName, &sbc.CardNumber, &sbc.AccountName, &sbc.IsDel, &sbc.CreatedTime, &sbc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &sbc, nil
}

//获取员工账户信息
func GetStaffBankCard(ctx context.Context, staffId uint32) (*StaffBankCard, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetStaffBankCardTableName()
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, staff_id, bank_name, card_number, account_name, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE staff_id = ? and is_del = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, staffId, common.DelStatus_NOT_DEL)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sbc := StaffBankCard{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, staffId, common.DelStatus_NOT_DEL).Scan(&sbc.ID, &sbc.BrandID, &sbc.StaffID, &sbc.BankName, &sbc.CardNumber, &sbc.AccountName, &sbc.IsDel, &sbc.CreatedTime, &sbc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, staffId, common.DelStatus_NOT_DEL).Scan(&sbc.ID, &sbc.BrandID, &sbc.StaffID, &sbc.BankName, &sbc.CardNumber, &sbc.AccountName, &sbc.IsDel, &sbc.CreatedTime, &sbc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &sbc, nil
}

//根据staffId更新
func (sbc *StaffBankCard) UpdateStaffBank(ctx context.Context, staffId uint32) error {
	var dbConn *sql.DB
	tableName, _ := GetStaffBankCardTableName()
	sqlstr, args, err := squirrel.
		Update(tableName).
		Where(squirrel.Eq{"staff_id": staffId}).
		Set("bank_name", sbc.BankName).
		Set("card_number", sbc.CardNumber).
		Set("account_name", sbc.AccountName).
		Set("brand_id", sbc.BrandID).
		Set("updated_time", sbc.UpdatedTime).
		ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,update_staff_bank", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}