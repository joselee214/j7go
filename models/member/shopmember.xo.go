// Package xo contains the types for schema 'saas'.
package member

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

//会员状态
const (
	//正常会员
	MEMBER_STATUS_NORMAL = 1
	//失效会员
	MEMBER_STATUS_INVALID = 2
)

//会员等级
const (
	//潜在会员
	MEMBER_LEVEL_LATENT = 1
	//正式会员
	MEMBER_LEVEL_FORMAL = 2
	//过期会员
	MEMBER_LEVEL_OVERDUE = 3
)

// ShopMember represents a row from 'saas.shop_member'.
type ShopMember struct {
	ID               uint `json:"id"`                 // id
	BrandID          uint `json:"brand_id"`           // brand_id
	ShopID           uint `json:"shop_id"`            // shop_id
	MemberID         uint `json:"member_id"`          // member_id
	MemberStatus     int8 `json:"member_status"`      // member_status
	MemberLevel      uint `json:"member_level"`       // member_level
	FollowSalesmanID uint `json:"follow_salesman_id"` // follow_salesman_id
	FollowCoachID    uint `json:"follow_coach_id"`    // follow_coach_id
	BeMemberTime     uint `json:"be_member_time"`     // be_member_time
	IsDel            int8 `json:"is_del"`             // is_del
	CreatedTime      uint `json:"created_time"`       // created_time
	UpdatedTime      uint `json:"updated_time"`       // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopMember exists in the database.
func (sm *ShopMember) Exists() bool { //shop_member
	return sm._exists
}

// Deleted provides information if the ShopMember has been deleted from the database.
func (sm *ShopMember) Deleted() bool {
	return sm._deleted
}

// Get table name
func GetShopMemberTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_member", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopMember to the database.
func (sm *ShopMember) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sm._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopMemberTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, member_id, member_status, member_level, follow_salesman_id, follow_coach_id, be_member_time, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sm.BrandID, sm.ShopID, sm.MemberID, sm.MemberStatus, sm.MemberLevel, sm.FollowSalesmanID, sm.FollowCoachID, sm.BeMemberTime, sm.IsDel, sm.CreatedTime, sm.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sm.BrandID, sm.ShopID, sm.MemberID, sm.MemberStatus, sm.MemberLevel, sm.FollowSalesmanID, sm.FollowCoachID, sm.BeMemberTime, sm.IsDel, sm.CreatedTime, sm.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, sm.BrandID, sm.ShopID, sm.MemberID, sm.MemberStatus, sm.MemberLevel, sm.FollowSalesmanID, sm.FollowCoachID, sm.BeMemberTime, sm.IsDel, sm.CreatedTime, sm.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sm.ID = uint(id)
	sm._exists = true

	return nil
}

// Update updates the ShopMember in the database.
func (sm *ShopMember) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopMemberTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, member_id = ?, member_status = ?, member_level = ?, follow_salesman_id = ?, follow_coach_id = ?, be_member_time = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sm.BrandID, sm.ShopID, sm.MemberID, sm.MemberStatus, sm.MemberLevel, sm.FollowSalesmanID, sm.FollowCoachID, sm.BeMemberTime, sm.IsDel, sm.CreatedTime, sm.UpdatedTime, sm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sm.BrandID, sm.ShopID, sm.MemberID, sm.MemberStatus, sm.MemberLevel, sm.FollowSalesmanID, sm.FollowCoachID, sm.BeMemberTime, sm.IsDel, sm.CreatedTime, sm.UpdatedTime, sm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sm.BrandID, sm.ShopID, sm.MemberID, sm.MemberStatus, sm.MemberLevel, sm.FollowSalesmanID, sm.FollowCoachID, sm.BeMemberTime, sm.IsDel, sm.CreatedTime, sm.UpdatedTime, sm.ID)
	}
	return err
}

// Save saves the ShopMember to the database.
func (sm *ShopMember) Save(ctx context.Context) error {
	if sm.Exists() {
		return sm.Update(ctx)
	}

	return sm.Insert(ctx)
}

// Delete deletes the ShopMember from the database.
func (sm *ShopMember) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sm._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopMemberTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sm.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sm._deleted = true

	return nil
}

// ShopMemberByID retrieves a row from 'saas.shop_member' as a ShopMember.
//
// Generated from index 'shop_member_id_pkey'.
func ShopMemberByID(ctx context.Context, id uint, key ...interface{}) (*ShopMember, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopMemberTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, member_id, member_status, member_level, follow_salesman_id, follow_coach_id, be_member_time, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sm := ShopMember{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sm.ID, &sm.BrandID, &sm.ShopID, &sm.MemberID, &sm.MemberStatus, &sm.MemberLevel, &sm.FollowSalesmanID, &sm.FollowCoachID, &sm.BeMemberTime, &sm.IsDel, &sm.CreatedTime, &sm.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sm.ID, &sm.BrandID, &sm.ShopID, &sm.MemberID, &sm.MemberStatus, &sm.MemberLevel, &sm.FollowSalesmanID, &sm.FollowCoachID, &sm.BeMemberTime, &sm.IsDel, &sm.CreatedTime, &sm.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &sm, nil
}
