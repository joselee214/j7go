// Package xo contains the types for schema 'saas'.
package member

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// RegisterWay represents a row from 'saas.register_way'.
type RegisterWay struct {
	ID           uint   `json:"id"`            // id
	WayName      string `json:"way_name"`      // way_name
	RegisterType int8   `json:"register_type"` // register_type
	IsDel        int8   `json:"is_del"`        // is_del
	CreatedTime  uint   `json:"created_time"`  // created_time
	UpdatedTime  uint   `json:"updated_time"`  // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RegisterWay exists in the database.
func (rw *RegisterWay) Exists() bool { //register_way
	return rw._exists
}

// Deleted provides information if the RegisterWay has been deleted from the database.
func (rw *RegisterWay) Deleted() bool {
	return rw._deleted
}

// Get table name
func GetRegisterWayTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "register_way", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the RegisterWay to the database.
func (rw *RegisterWay) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if rw._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRegisterWayTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`way_name, register_type, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rw.WayName, rw.RegisterType, rw.IsDel, rw.CreatedTime, rw.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, rw.WayName, rw.RegisterType, rw.IsDel, rw.CreatedTime, rw.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, rw.WayName, rw.RegisterType, rw.IsDel, rw.CreatedTime, rw.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	rw.ID = uint(id)
	rw._exists = true

	return nil
}

// Update updates the RegisterWay in the database.
func (rw *RegisterWay) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rw._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRegisterWayTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`way_name = ?, register_type = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rw.WayName, rw.RegisterType, rw.IsDel, rw.CreatedTime, rw.UpdatedTime, rw.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rw.WayName, rw.RegisterType, rw.IsDel, rw.CreatedTime, rw.UpdatedTime, rw.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rw.WayName, rw.RegisterType, rw.IsDel, rw.CreatedTime, rw.UpdatedTime, rw.ID)
	}
	return err
}

// Save saves the RegisterWay to the database.
func (rw *RegisterWay) Save(ctx context.Context) error {
	if rw.Exists() {
		return rw.Update(ctx)
	}

	return rw.Insert(ctx)
}

// Delete deletes the RegisterWay from the database.
func (rw *RegisterWay) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rw._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetRegisterWayTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rw.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rw.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rw.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	rw._deleted = true

	return nil
}

// RegisterWayByID retrieves a row from 'saas.register_way' as a RegisterWay.
//
// Generated from index 'register_way_id_pkey'.
func RegisterWayByID(ctx context.Context, id uint, key ...interface{}) (*RegisterWay, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetRegisterWayTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, way_name, register_type, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	rw := RegisterWay{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&rw.ID, &rw.WayName, &rw.RegisterType, &rw.IsDel, &rw.CreatedTime, &rw.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&rw.ID, &rw.WayName, &rw.RegisterType, &rw.IsDel, &rw.CreatedTime, &rw.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &rw, nil
}
