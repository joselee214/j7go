// Package xo contains the types for schema 'saas'.
package shopModel

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopContactWay represents a row from 'saas.shop_contact_ways'.
type ShopContactWay struct {
	ID            uint   `json:"id"`             // id
	ShopID        uint   `json:"shop_id"`        // shop_id
	ContactDetail string `json:"contact_detail"` // contact_detail
	ContactType   int8   `json:"contact_type"`   // contact_type
	IsFavorite    int8   `json:"is_favorite"`    // is_favorite
	IsDel         int8   `json:"is_del"`         // is_del
	CreatedTime   uint   `json:"created_time"`   // created_time
	UpdatedTime   uint   `json:"updated_time"`   // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopContactWay exists in the database.
func (scw *ShopContactWay) Exists() bool { //shop_contact_ways
	return scw._exists
}

// Deleted provides information if the ShopContactWay has been deleted from the database.
func (scw *ShopContactWay) Deleted() bool {
	return scw._deleted
}

// Get table name
func getShopContactWayTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_contact_ways", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopContactWay to the database.
func (scw *ShopContactWay) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	// if already exist, bail
	if scw._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopContactWayTableName(key...)
	if err != nil {
		return err
	}

	var res sql.Result
	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`shop_id, contact_detail, contact_type, is_favorite, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scw.ShopID, scw.ContactDetail, scw.ContactType, scw.IsFavorite, scw.IsDel, scw.CreatedTime, scw.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, scw.ShopID, scw.ContactDetail, scw.ContactType, scw.IsFavorite, scw.IsDel, scw.CreatedTime, scw.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, scw.ShopID, scw.ContactDetail, scw.ContactType, scw.IsFavorite, scw.IsDel, scw.CreatedTime, scw.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	scw.ID = uint(id)
	scw._exists = true

	return nil
}

// Update updates the ShopContactWay in the database.
func (scw *ShopContactWay) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scw._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopContactWayTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`shop_id = ?, contact_detail = ?, contact_type = ?, is_favorite = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scw.ShopID, scw.ContactDetail, scw.ContactType, scw.IsFavorite, scw.IsDel, scw.CreatedTime, scw.UpdatedTime, scw.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scw.ShopID, scw.ContactDetail, scw.ContactType, scw.IsFavorite, scw.IsDel, scw.CreatedTime, scw.UpdatedTime, scw.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scw.ShopID, scw.ContactDetail, scw.ContactType, scw.IsFavorite, scw.IsDel, scw.CreatedTime, scw.UpdatedTime, scw.ID)
	}
	return err
}

// Save saves the ShopContactWay to the database.
func (scw *ShopContactWay) Save(ctx context.Context) error {
	if scw.Exists() {
		return scw.Update(ctx)
	}

	return scw.Insert(ctx)
}

// Delete deletes the ShopContactWay from the database.
func (scw *ShopContactWay) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scw._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopContactWayTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = ? WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scw.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, utils.DELETED, scw.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, utils.DELETED, scw.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	scw._deleted = true

	return nil
}

// ShopContactWayByID retrieves a row from 'saas.shop_contact_ways' as a ShopContactWay.
//
// Generated from index 'shop_contact_ways_id_pkey'.
func ShopContactWayByID(ctx context.Context, id uint, key ...interface{}) (*ShopContactWay, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getShopContactWayTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, shop_id, contact_detail, contact_type, is_favorite, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	scw := ShopContactWay{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&scw.ID, &scw.ShopID, &scw.ContactDetail, &scw.ContactType, &scw.IsFavorite, &scw.IsDel, &scw.CreatedTime, &scw.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&scw.ID, &scw.ShopID, &scw.ContactDetail, &scw.ContactType, &scw.IsFavorite, &scw.IsDel, &scw.CreatedTime, &scw.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &scw, nil
}

//根据shopid获取门店联系方式
func GetShopContactWaysByShopId(ctx context.Context, shopId uint, key ...interface{}) ([]*ShopContactWay, error) {
	var err error
	var dbConn *sql.DB
	var rows *sql.Rows

	tableName, err := getShopContactWayTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, shop_id, contact_detail, contact_type, is_favorite, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE shop_id = ? AND is_del = ?`

	// run query
	components.L.Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopId)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	if tx != nil {
		rows, err = tx.Query(sqlstr, shopId, utils.NOT_DELETED)
		if err != nil {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlstr, shopId, utils.NOT_DELETED)
		if err != nil {
			return nil, err
		}
	}
	defer rows.Close()

	shopContactWays := make([]*ShopContactWay, 0)
	for rows.Next() {
		scw := &ShopContactWay{
			_exists: true,
		}

		err = rows.Scan(&scw.ID, &scw.ShopID, &scw.ContactDetail, &scw.ContactType, &scw.IsFavorite, &scw.IsDel, &scw.CreatedTime, &scw.UpdatedTime)
		if err != nil {
			return nil, err
		}
		shopContactWays = append(shopContactWays, scw)
	}

	if err != nil {
		return nil, err
	}

	return shopContactWays, nil
}
