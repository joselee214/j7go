// Package xo contains the types for schema 'saas'.
package shopModel

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopBusinessTime represents a row from 'saas.shop_business_time'.
type ShopBusinessTime struct {
	ID          uint   `json:"id"`           // id
	ShopID      uint   `json:"shop_id"`      // shop_id
	WeekDay     int8   `json:"week_day"`     // week_day
	StartTime   string `json:"start_time"`   // start_time
	EndTime     string `json:"end_time"`     // end_time
	IsDel       int8   `json:"is_del"`       // is_del
	CreatedTime uint   `json:"created_time"` // created_time
	UpdatedTime uint   `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopBusinessTime exists in the database.
func (sbt *ShopBusinessTime) Exists() bool { //shop_business_time
	return sbt._exists
}

// Deleted provides information if the ShopBusinessTime has been deleted from the database.
func (sbt *ShopBusinessTime) Deleted() bool {
	return sbt._deleted
}

// Get table name
func getShopBusinessTimeTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_business_time", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopBusinessTime to the database.
func (sbt *ShopBusinessTime) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	// if already exist, bail
	if sbt._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopBusinessTimeTableName(key...)
	if err != nil {
		return err
	}

	var res sql.Result
	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`shop_id, week_day, start_time, end_time, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sbt.ShopID, sbt.WeekDay, sbt.StartTime, sbt.EndTime, sbt.IsDel, sbt.CreatedTime, sbt.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sbt.ShopID, sbt.WeekDay, sbt.StartTime, sbt.EndTime, sbt.IsDel, sbt.CreatedTime, sbt.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, sbt.ShopID, sbt.WeekDay, sbt.StartTime, sbt.EndTime, sbt.IsDel, sbt.CreatedTime, sbt.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sbt.ID = uint(id)
	sbt._exists = true

	return nil
}

// Update updates the ShopBusinessTime in the database.
func (sbt *ShopBusinessTime) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sbt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopBusinessTimeTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`shop_id = ?, week_day = ?, start_time = ?, end_time = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sbt.ShopID, sbt.WeekDay, sbt.StartTime, sbt.EndTime, sbt.IsDel, sbt.CreatedTime, sbt.UpdatedTime, sbt.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sbt.ShopID, sbt.WeekDay, sbt.StartTime, sbt.EndTime, sbt.IsDel, sbt.CreatedTime, sbt.UpdatedTime, sbt.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sbt.ShopID, sbt.WeekDay, sbt.StartTime, sbt.EndTime, sbt.IsDel, sbt.CreatedTime, sbt.UpdatedTime, sbt.ID)
	}
	return err
}

// Save saves the ShopBusinessTime to the database.
func (sbt *ShopBusinessTime) Save(ctx context.Context) error {
	if sbt.Exists() {
		return sbt.Update(ctx)
	}

	return sbt.Insert(ctx)
}

// Delete deletes the ShopBusinessTime from the database.
func (sbt *ShopBusinessTime) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sbt._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopBusinessTimeTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = ? WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sbt.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, utils.DELETED, sbt.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, utils.DELETED, sbt.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sbt._deleted = true

	return nil
}

// ShopBusinessTimeByID retrieves a row from 'saas.shop_business_time' as a ShopBusinessTime.
//
// Generated from index 'shop_business_time_id_pkey'.
func ShopBusinessTimeByID(ctx context.Context, id uint, key ...interface{}) (*ShopBusinessTime, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getShopBusinessTimeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, shop_id, week_day, start_time, end_time, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ? AND is_del = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sbt := ShopBusinessTime{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id, utils.NOT_DELETED).Scan(&sbt.ID, &sbt.ShopID, &sbt.WeekDay, &sbt.StartTime, &sbt.EndTime, &sbt.IsDel, &sbt.CreatedTime, &sbt.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id, utils.NOT_DELETED).Scan(&sbt.ID, &sbt.ShopID, &sbt.WeekDay, &sbt.StartTime, &sbt.EndTime, &sbt.IsDel, &sbt.CreatedTime, &sbt.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &sbt, nil
}

//根据shopid 获取门店营业时间数据
func ShopBusinessTimeByShopId(ctx context.Context, shopId uint, key ...interface{}) ([]*ShopBusinessTime, error) {
	var err error
	var dbConn *sql.DB
	var rows *sql.Rows

	tableName, err := getShopBusinessTimeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, shop_id, week_day, start_time, end_time, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE shop_id = ? AND is_del = ?`

	// run query
	components.L.Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopId)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	if tx != nil {
		rows, err = tx.Query(sqlstr, shopId, utils.NOT_DELETED)
		if err != nil {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlstr, shopId, utils.NOT_DELETED)
		if err != nil {
			return nil, err
		}
	}
	defer rows.Close()

	shopBusinessTime := make([]*ShopBusinessTime, 0)
	for rows.Next() {
		sbt := &ShopBusinessTime{
			_exists: true,
		}

		err = rows.Scan(&sbt.ID, &sbt.ShopID, &sbt.WeekDay, &sbt.StartTime, &sbt.EndTime, &sbt.IsDel, &sbt.CreatedTime, &sbt.UpdatedTime)
		if err != nil {
			return nil, err
		}
		shopBusinessTime = append(shopBusinessTime, sbt)
	}

	if err != nil {
		return nil, err
	}

	return shopBusinessTime, nil
}
