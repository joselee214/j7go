// Package xo contains the types for schema 'saas'.
package shopModel

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"go.7yes.com/j7f/proto/common"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopService represents a row from 'saas.shop_services'.
type ShopService struct {
	ID          uint   `json:"id"`           // id
	ServiceName string `json:"service_name"` // service_name
	ImgURL      string `json:"img_url"`      // img_url
	IsDel       int8   `json:"is_del"`       // is_del
	CreatedTime uint   `json:"created_time"` // created_time
	UpdatedTime uint   `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopService exists in the database.
func (ss *ShopService) Exists() bool { //shop_services
	return ss._exists
}

// Deleted provides information if the ShopService has been deleted from the database.
func (ss *ShopService) Deleted() bool {
	return ss._deleted
}

// Get table name
func getShopServiceTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_services", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopService to the database.
func (ss *ShopService) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	// if already exist, bail
	if ss._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopServiceTableName(key...)
	if err != nil {
		return err
	}

	var res sql.Result
	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`service_name, img_url, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ss.ServiceName, ss.ImgURL, ss.IsDel, ss.CreatedTime, ss.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ss.ServiceName, ss.ImgURL, ss.IsDel, ss.CreatedTime, ss.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, ss.ServiceName, ss.ImgURL, ss.IsDel, ss.CreatedTime, ss.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ss.ID = uint(id)
	ss._exists = true

	return nil
}

// Update updates the ShopService in the database.
func (ss *ShopService) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ss._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopServiceTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`service_name = ?, img_url = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ss.ServiceName, ss.ImgURL, ss.IsDel, ss.CreatedTime, ss.UpdatedTime, ss.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ss.ServiceName, ss.ImgURL, ss.IsDel, ss.CreatedTime, ss.UpdatedTime, ss.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ss.ServiceName, ss.ImgURL, ss.IsDel, ss.CreatedTime, ss.UpdatedTime, ss.ID)
	}
	return err
}

// Save saves the ShopService to the database.
func (ss *ShopService) Save(ctx context.Context) error {
	if ss.Exists() {
		return ss.Update(ctx)
	}

	return ss.Insert(ctx)
}

// Delete deletes the ShopService from the database.
func (ss *ShopService) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ss._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopServiceTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = ? WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ss.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, common.DelStatus_DELED, ss.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, common.DelStatus_DELED, ss.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ss._deleted = true

	return nil
}

// ShopServiceByID retrieves a row from 'saas.shop_services' as a ShopService.
//
// Generated from index 'shop_services_id_pkey'.
func ShopServiceByID(ctx context.Context, id uint, key ...interface{}) (*ShopService, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getShopServiceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, service_name, img_url, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ss := ShopService{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ss.ID, &ss.ServiceName, &ss.ImgURL, &ss.IsDel, &ss.CreatedTime, &ss.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ss.ID, &ss.ServiceName, &ss.ImgURL, &ss.IsDel, &ss.CreatedTime, &ss.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &ss, nil
}

//根据shopId获取门店服务列表
func GetShopServicesByShopId(ctx context.Context, shopID uint) ([]*ShopService, error) {
	var dbConn *sql.DB
	var rows *sql.Rows
	var err error

	shopServicesTableName, err := getShopServiceTableName()
	if err != nil {
		return nil, err
	}
	ServicesRelationTableName, err := getShopServicesRelationTableName()
	if err != nil {
		return nil, err
	}
	// 关联shop_services_relation和shop_service表
	sqlstr := `SELECT ` +
		`ser.id, ser.service_name, ser.img_url, ser.is_del, ser.created_time, ser.updated_time ` +
		` FROM ` + ServicesRelationTableName + ` AS re ` +
		`INNER JOIN ` + shopServicesTableName + ` AS ser ` +
		`ON re.service_id = ser.id ` +
		`WHERE re.shop_id = ? And re.is_del = ? And ser.is_del = ?`

	components.L.Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopID, common.DelStatus_NOT_DEL, common.DelStatus_NOT_DEL)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	if tx != nil {
		rows, err = tx.Query(sqlstr, shopID, utils.NOT_DELETED, utils.NOT_DELETED)
		if err != nil {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlstr, shopID, utils.NOT_DELETED, utils.NOT_DELETED)
		if err != nil {
			return nil, err
		}
	}
	defer rows.Close()

	shopServices := make([]*ShopService, 0)
	for rows.Next() {
		ss := &ShopService{
			_exists: true,
		}

		err = rows.Scan(&ss.ID, &ss.ServiceName, &ss.ImgURL, &ss.IsDel, &ss.CreatedTime, &ss.UpdatedTime)
		if err != nil {
			return nil, err
		}
		shopServices = append(shopServices, ss)
	}

	if err != nil {
		return nil, err
	}

	return shopServices, nil
}
