// Package xo contains the types for schema 'saas'.
package shopModel

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Shop represents a row from 'saas.shop'.
type Shop struct {
	ID           uint    `json:"id"`            // id
	BrandID      uint    `json:"brand_id"`      // brand_id
	ShopName     string  `json:"shop_name"`     // shop_name
	Address      string  `json:"address"`       // address
	ShopStatus   int8    `json:"shop_status"`   // shop_status
	Description  string  `json:"description"`   // description
	IsAllday     int8    `json:"is_allday"`     // is_allday
	ProvinceID   uint    `json:"province_id"`   // province_id
	CityID       uint    `json:"city_id"`       // city_id
	DistrictID   uint    `json:"district_id"`   // district_id
	Lat          float64 `json:"lat"`           // lat
	Lng          float64 `json:"lng"`           // lng
	AlbumID      uint    `json:"album_id"`      // album_id
	IsDel        int8    `json:"is_del"`        // is_del
	CreatedTime  uint    `json:"created_time"`  // created_time
	UpdatedTime  uint    `json:"updated_time"`  // updated_time
	ProvinceName string  `json:"province_name"` // province_name
	CityName     string  `json:"city_name"`     // city_name
	DistrictName string  `json:"district_name"` // district_name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Shop exists in the database.
func (s *Shop) Exists() bool { //shop
	return s._exists
}

// Deleted provides information if the Shop has been deleted from the database.
func (s *Shop) Deleted() bool {
	return s._deleted
}

// Get table name
func GetShopTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Shop to the database.
func (s *Shop) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_name, address, shop_status, description, is_allday, province_id, city_id, district_id, lat, lng, album_id, is_del, created_time, updated_time, province_name, city_name, district_name` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.BrandID, s.ShopName, s.Address, s.ShopStatus, s.Description, s.IsAllday, s.ProvinceID, s.CityID, s.DistrictID, s.Lat, s.Lng, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ProvinceName, s.CityName, s.DistrictName)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, s.BrandID, s.ShopName, s.Address, s.ShopStatus, s.Description, s.IsAllday, s.ProvinceID, s.CityID, s.DistrictID, s.Lat, s.Lng, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ProvinceName, s.CityName, s.DistrictName)
	} else {
		res, err = dbConn.Exec(sqlstr, s.BrandID, s.ShopName, s.Address, s.ShopStatus, s.Description, s.IsAllday, s.ProvinceID, s.CityID, s.DistrictID, s.Lat, s.Lng, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ProvinceName, s.CityName, s.DistrictName)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = uint(id)
	s._exists = true

	return nil
}

// Update updates the Shop in the database.
func (s *Shop) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_name = ?, address = ?, shop_status = ?, description = ?, is_allday = ?, province_id = ?, city_id = ?, district_id = ?, lat = ?, lng = ?, album_id = ?, is_del = ?, created_time = ?, updated_time = ?, province_name = ?, city_name = ?, district_name = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.BrandID, s.ShopName, s.Address, s.ShopStatus, s.Description, s.IsAllday, s.ProvinceID, s.CityID, s.DistrictID, s.Lat, s.Lng, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ProvinceName, s.CityName, s.DistrictName, s.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, s.BrandID, s.ShopName, s.Address, s.ShopStatus, s.Description, s.IsAllday, s.ProvinceID, s.CityID, s.DistrictID, s.Lat, s.Lng, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ProvinceName, s.CityName, s.DistrictName, s.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, s.BrandID, s.ShopName, s.Address, s.ShopStatus, s.Description, s.IsAllday, s.ProvinceID, s.CityID, s.DistrictID, s.Lat, s.Lng, s.AlbumID, s.IsDel, s.CreatedTime, s.UpdatedTime, s.ProvinceName, s.CityName, s.DistrictName, s.ID)
	}
	return err
}

// Save saves the Shop to the database.
func (s *Shop) Save(ctx context.Context) error {
	if s.Exists() {
		return s.Update(ctx)
	}

	return s.Insert(ctx)
}

// Delete deletes the Shop from the database.
func (s *Shop) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if s._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, s.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, s.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, s.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// ShopByID retrieves a row from 'saas.shop' as a Shop.
//
// Generated from index 'shop_id_pkey'.
func ShopByID(ctx context.Context, id uint, key ...interface{}) (*Shop, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_name, address, shop_status, description, is_allday, province_id, city_id, district_id, lat, lng, album_id, is_del, created_time, updated_time, province_name, city_name, district_name ` +
		`FROM ` + tableName +
		` WHERE id = ? AND is_del = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id, utils.NOT_DELETED)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	s := Shop{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id, utils.NOT_DELETED).Scan(&s.ID, &s.BrandID, &s.ShopName, &s.Address, &s.ShopStatus, &s.Description, &s.IsAllday, &s.ProvinceID, &s.CityID, &s.DistrictID, &s.Lat, &s.Lng, &s.AlbumID, &s.IsDel, &s.CreatedTime, &s.UpdatedTime, &s.ProvinceName, &s.CityName, &s.DistrictName)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id, utils.NOT_DELETED).Scan(&s.ID, &s.BrandID, &s.ShopName, &s.Address, &s.ShopStatus, &s.Description, &s.IsAllday, &s.ProvinceID, &s.CityID, &s.DistrictID, &s.Lat, &s.Lng, &s.AlbumID, &s.IsDel, &s.CreatedTime, &s.UpdatedTime, &s.ProvinceName, &s.CityName, &s.DistrictName)
		if err != nil {
			return nil, err
		}
	}

	return &s, nil
}

//根据品牌id获取门店信息
func ShopByBrandID(ctx context.Context, BrandID uint, key ...interface{}) ([]*Shop, error) {
	var err error
	var dbConn *sql.DB
	var rows *sql.Rows
	shops := make([]*Shop, 0)

	tableName, err := GetShopTableName(key...)
	if err != nil {
		return nil, err
	}

	sqlStr, args, err := squirrel.Select(
		"id",
		"brand_id",
		"shop_name",
		"address",
		"shop_status",
		"description",
		"is_allday",
		"province_id",
		"city_id",
		"district_id",
		"lat",
		"lng",
		"album_id",
		"is_del",
		"created_time",
		"updated_time",
		"province_name",
		"city_name",
		"district_name",
	).From(tableName).
		Where(squirrel.Eq{"brand_id": BrandID, "is_del": utils.Unavailable}).
		ToSql()

	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, args)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	if tx != nil {
		rows, err = tx.Query(sqlStr, args...)
		if err != nil {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, args...)
		if err != nil {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		shop := Shop{}
		err := rows.Scan(&shop.ID,
			&shop.BrandID,
			&shop.ShopName,
			&shop.Address,
			&shop.ShopStatus,
			&shop.Description,
			&shop.IsAllday,
			&shop.ProvinceID,
			&shop.CityID,
			&shop.DistrictID,
			&shop.Lat,
			&shop.Lng,
			&shop.AlbumID,
			&shop.IsDel,
			&shop.CreatedTime,
			&shop.UpdatedTime,
			&shop.ProvinceName,
			&shop.CityName,
			&shop.DistrictName)
		if err != nil {
			return nil, err
		}
		shops = append(shops, &shop)
	}

	return shops, nil
}

//根据门店名称获取门店信息
func GetShopInfoByName(ctx context.Context, shopName string, brandId uint32, key ...interface{}) (*Shop, error) {
	var err error
	var dbConn *sql.DB

	tableName, _ := GetShopTableName(key...)
	sqlstr, args, err := squirrel.
		Select("*").
		From(tableName).
		Where(
			squirrel.Eq{
				"shop_name": shopName,
				"brand_id":  brandId,
				"is_del":    utils.NOT_DELETED,
			}).
		ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopName)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	s := Shop{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, args...).Scan(&s.ID, &s.BrandID, &s.ShopName, &s.Address, &s.ShopStatus, &s.Description, &s.IsAllday, &s.ProvinceID, &s.CityID, &s.DistrictID, &s.Lat, &s.Lng, &s.AlbumID, &s.IsDel, &s.CreatedTime, &s.UpdatedTime, &s.ProvinceName, &s.CityName, &s.DistrictName)
	} else {
		err = dbConn.QueryRow(sqlstr, args...).Scan(&s.ID, &s.BrandID, &s.ShopName, &s.Address, &s.ShopStatus, &s.Description, &s.IsAllday, &s.ProvinceID, &s.CityID, &s.DistrictID, &s.Lat, &s.Lng, &s.AlbumID, &s.IsDel, &s.CreatedTime, &s.UpdatedTime, &s.ProvinceName, &s.CityName, &s.DistrictName)
	}
	if err != nil && err != sql.ErrNoRows {
		return nil, err
	}

	return &s, nil
}

//根据门店id更新门店信息
func (s *Shop) UpdateShopById(ctx context.Context, shopId uint, key ...interface{}) (err error) {
	var dbConn *sql.DB
	tableName, _ := GetShopTableName(key...)
	sqlstr, args, err := squirrel.
		Update(tableName).
		Where(squirrel.Eq{"id": shopId}).
		Set("brand_id", s.BrandID).
		Set("shop_name", s.ShopName).
		Set("address", s.Address).
		Set("shop_status", s.ShopStatus).
		Set("description", s.Description).
		Set("is_allday", s.IsAllday).
		Set("province_id", s.ProvinceID).
		Set("city_id", s.CityID).
		Set("district_id", s.DistrictID).
		Set("lat", s.Lat).
		Set("lng", s.Lng).
		Set("is_del", s.IsDel).
		Set("updated_time", s.UpdatedTime).
		Set("province_name", s.ProvinceName).
		Set("city_name", s.CityName).
		Set("district_name", s.DistrictName).
		ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,update_shop_by_id", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil

}
