// Package test contains the types for schema 'saas'.
package payment

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// PaymentMethod represents a row from 'saas.payment_method'.
type PaymentMethod struct {
	ID           int    `json:"id"`            // id
	PaymentName  string `json:"payment_name"`  // payment_name
	CreatingMode int8   `json:"creating_mode"` // creating_mode
	IsOnlinePay  int8   `json:"is_online_pay"` // is_online_pay
	IsDel        int8   `json:"is_del"`        // is_del
	CreatedTime  int    `json:"created_time"`  // created_time
	UpdatedTime  int    `json:"updated_time"`  // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PaymentMethod exists in the database.
func (pm *PaymentMethod) Exists() bool { //payment_method
	return pm._exists
}

// Deleted provides information if the PaymentMethod has been deleted from the database.
func (pm *PaymentMethod) Deleted() bool {
	return pm._deleted
}

// Get table name
func GetPaymentMethodTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "payment_method", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the PaymentMethod to the database.
func (pm *PaymentMethod) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if pm._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPaymentMethodTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`payment_name, creating_mode, is_online_pay, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pm.PaymentName, pm.CreatingMode, pm.IsOnlinePay, pm.IsDel, pm.CreatedTime, pm.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, pm.PaymentName, pm.CreatingMode, pm.IsOnlinePay, pm.IsDel, pm.CreatedTime, pm.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, pm.PaymentName, pm.CreatingMode, pm.IsOnlinePay, pm.IsDel, pm.CreatedTime, pm.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pm.ID = int(id)
	pm._exists = true

	return nil
}

// Update updates the PaymentMethod in the database.
func (pm *PaymentMethod) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPaymentMethodTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`is_del = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pm.PaymentName, pm.CreatingMode, pm.IsOnlinePay, pm.IsDel, pm.CreatedTime, pm.UpdatedTime, pm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pm.IsDel, pm.UpdatedTime, pm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pm.IsDel, pm.UpdatedTime, pm.ID)
	}
	return err
}

// Save saves the PaymentMethod to the database.
func (pm *PaymentMethod) Save(ctx context.Context) error {
	if pm.Exists() {
		return pm.Update(ctx)
	}

	return pm.Insert(ctx)
}

// Delete deletes the PaymentMethod from the database.
func (pm *PaymentMethod) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pm._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPaymentMethodTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pm.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pm.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pm.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	pm._deleted = true

	return nil
}

// PaymentMethodByID retrieves a row from 'saas.payment_method' as a PaymentMethod.
//
// Generated from index 'payment_method_id_pkey'.
func PaymentMethodByID(ctx context.Context, id int, key ...interface{}) (*PaymentMethod, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPaymentMethodTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, payment_name, creating_mode, is_online_pay, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	pm := PaymentMethod{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&pm.ID, &pm.PaymentName, &pm.CreatingMode, &pm.IsOnlinePay, &pm.IsDel, &pm.CreatedTime, &pm.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&pm.ID, &pm.PaymentName, &pm.CreatingMode, &pm.IsOnlinePay, &pm.IsDel, &pm.CreatedTime, &pm.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &pm, nil
}

func PaymentMethods(ctx context.Context) ([]*PaymentMethod, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPaymentMethodTableName()
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, payment_name, creating_mode, is_online_pay, is_del, created_time, updated_time ` +
		`FROM ` + tableName

	// run query
	components.L.Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return nil, err
		}
	}
	pms := make([]*PaymentMethod, 0)

	var q *sql.Rows

	if tx != nil {
		q, err = tx.Query(sqlstr)
		if err != nil {
			return nil, err
		}
	} else {
		q, err = dbConn.Query(sqlstr)
		if err != nil {
			return nil, err
		}
	}
	defer q.Close()

	for q.Next() {
		pm := &PaymentMethod{}
		err = q.Scan(&pm.ID, &pm.PaymentName, &pm.CreatingMode, &pm.IsOnlinePay, &pm.IsDel, &pm.CreatedTime, &pm.UpdatedTime)
		if err != nil {
			return nil, err
		}
		pm._exists = true
		pms = append(pms, pm)
	}

	return pms, nil
}