// Package ddg contains the types for schema 'aypcddg'.
package ddg

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// DdgAdminFile represents a row from 'aypcddg.ddg_admin_files'.
type DdgAdminFile struct {
	FileID         uint64 `json:"file_id"`          // file_id
	AdminID        int    `json:"admin_id"`         // admin_id
	FileType       int8   `json:"file_type"`        // file_type
	FileMime       string `json:"file_mime"`        // file_mime
	FileExt        string `json:"file_ext"`         // file_ext
	FileName       string `json:"file_name"`        // file_name
	Fileserver     int    `json:"fileserver"`       // fileserver
	Fpath          string `json:"fpath"`            // fpath
	Storage        int    `json:"storage"`          // storage
	Sha            string `json:"sha"`              // sha
	OssLogID       int    `json:"oss_log_id"`       // oss_log_id
	Width          int    `json:"width"`            // width
	Height         int    `json:"height"`           // height
	LastUploadTime int    `json:"last_upload_time"` // last_upload_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DdgAdminFile exists in the database.
func (daf *DdgAdminFile) Exists() bool { //ddg_admin_files
	return daf._exists
}

// Deleted provides information if the DdgAdminFile has been deleted from the database.
func (daf *DdgAdminFile) Deleted() bool {
	return daf._deleted
}

// Get table name
func GetDdgAdminFileTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "ddg_admin_files", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DdgAdminFile to the database.
func (daf *DdgAdminFile) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if daf._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgAdminFileTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`admin_id, file_type, file_mime, file_ext, file_name, fileserver, fpath, storage, sha, oss_log_id, width, height, last_upload_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daf.AdminID, daf.FileType, daf.FileMime, daf.FileExt, daf.FileName, daf.Fileserver, daf.Fpath, daf.Storage, daf.Sha, daf.OssLogID, daf.Width, daf.Height, daf.LastUploadTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, daf.AdminID, daf.FileType, daf.FileMime, daf.FileExt, daf.FileName, daf.Fileserver, daf.Fpath, daf.Storage, daf.Sha, daf.OssLogID, daf.Width, daf.Height, daf.LastUploadTime)
	} else {
		res, err = dbConn.Exec(sqlstr, daf.AdminID, daf.FileType, daf.FileMime, daf.FileExt, daf.FileName, daf.Fileserver, daf.Fpath, daf.Storage, daf.Sha, daf.OssLogID, daf.Width, daf.Height, daf.LastUploadTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	daf.FileID = uint64(id)
	daf._exists = true

	return nil
}

// Update updates the DdgAdminFile in the database.
func (daf *DdgAdminFile) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if daf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgAdminFileTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`admin_id = ?, file_type = ?, file_mime = ?, file_ext = ?, file_name = ?, fileserver = ?, fpath = ?, storage = ?, sha = ?, oss_log_id = ?, width = ?, height = ?, last_upload_time = ?` +
		` WHERE file_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daf.AdminID, daf.FileType, daf.FileMime, daf.FileExt, daf.FileName, daf.Fileserver, daf.Fpath, daf.Storage, daf.Sha, daf.OssLogID, daf.Width, daf.Height, daf.LastUploadTime, daf.FileID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, daf.AdminID, daf.FileType, daf.FileMime, daf.FileExt, daf.FileName, daf.Fileserver, daf.Fpath, daf.Storage, daf.Sha, daf.OssLogID, daf.Width, daf.Height, daf.LastUploadTime, daf.FileID)
	} else {
		_, err = dbConn.Exec(sqlstr, daf.AdminID, daf.FileType, daf.FileMime, daf.FileExt, daf.FileName, daf.Fileserver, daf.Fpath, daf.Storage, daf.Sha, daf.OssLogID, daf.Width, daf.Height, daf.LastUploadTime, daf.FileID)
	}
	return err
}

// Save saves the DdgAdminFile to the database.
func (daf *DdgAdminFile) Save(ctx context.Context) error {
	if daf.Exists() {
		return daf.Update(ctx)
	}

	return daf.Insert(ctx)
}

// Delete deletes the DdgAdminFile from the database.
func (daf *DdgAdminFile) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if daf._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgAdminFileTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE file_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daf.FileID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, daf.FileID)
	} else {
		_, err = dbConn.Exec(sqlstr, daf.FileID)
	}

	if err != nil {
		return err
	}

	// set deleted
	daf._deleted = true

	return nil
}

// DdgAdminFileByFileID retrieves a row from 'aypcddg.ddg_admin_files' as a DdgAdminFile.
//
// Generated from index 'ddg_admin_files_file_id_pkey'.
func DdgAdminFileByFileID(ctx context.Context, fileID uint64, key ...interface{}) (*DdgAdminFile, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDdgAdminFileTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`file_id, admin_id, file_type, file_mime, file_ext, file_name, fileserver, fpath, storage, sha, oss_log_id, width, height, last_upload_time ` +
		`FROM ` + tableName +
		` WHERE file_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, fileID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	daf := DdgAdminFile{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, fileID).Scan(&daf.FileID, &daf.AdminID, &daf.FileType, &daf.FileMime, &daf.FileExt, &daf.FileName, &daf.Fileserver, &daf.Fpath, &daf.Storage, &daf.Sha, &daf.OssLogID, &daf.Width, &daf.Height, &daf.LastUploadTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, fileID).Scan(&daf.FileID, &daf.AdminID, &daf.FileType, &daf.FileMime, &daf.FileExt, &daf.FileName, &daf.Fileserver, &daf.Fpath, &daf.Storage, &daf.Sha, &daf.OssLogID, &daf.Width, &daf.Height, &daf.LastUploadTime)
		if err != nil {
			return nil, err
		}
	}

	return &daf, nil
}
