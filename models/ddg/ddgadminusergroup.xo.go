// Package ddg contains the types for schema 'aypcddg'.
package ddg

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// DdgAdminUserGroup represents a row from 'aypcddg.ddg_admin_user_groups'.
type DdgAdminUserGroup struct {
	ID  uint64 `json:"id"`  // id
	Gid int    `json:"gid"` // gid
	UID int    `json:"uid"` // uid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DdgAdminUserGroup exists in the database.
func (daug *DdgAdminUserGroup) Exists() bool { //ddg_admin_user_groups
	return daug._exists
}

// Deleted provides information if the DdgAdminUserGroup has been deleted from the database.
func (daug *DdgAdminUserGroup) Deleted() bool {
	return daug._deleted
}

// Get table name
func GetDdgAdminUserGroupTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("aypcddg", "ddg_admin_user_groups", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DdgAdminUserGroup to the database.
func (daug *DdgAdminUserGroup) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if daug._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgAdminUserGroupTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`gid, uid` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daug.Gid, daug.UID)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, daug.Gid, daug.UID)
	} else {
		res, err = dbConn.Exec(sqlstr, daug.Gid, daug.UID)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	daug.ID = uint64(id)
	daug._exists = true

	return nil
}

// Update updates the DdgAdminUserGroup in the database.
func (daug *DdgAdminUserGroup) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if daug._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgAdminUserGroupTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`gid = ?, uid = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daug.Gid, daug.UID, daug.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, daug.Gid, daug.UID, daug.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, daug.Gid, daug.UID, daug.ID)
	}
	return err
}

// Save saves the DdgAdminUserGroup to the database.
func (daug *DdgAdminUserGroup) Save(ctx context.Context) error {
	if daug.Exists() {
		return daug.Update(ctx)
	}

	return daug.Insert(ctx)
}

// Delete deletes the DdgAdminUserGroup from the database.
func (daug *DdgAdminUserGroup) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if daug._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetDdgAdminUserGroupTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, daug.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, daug.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, daug.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	daug._deleted = true

	return nil
}

// DdgAdminUserGroupByID retrieves a row from 'aypcddg.ddg_admin_user_groups' as a DdgAdminUserGroup.
//
// Generated from index 'ddg_admin_user_groups_id_pkey'.
func DdgAdminUserGroupByID(ctx context.Context, id uint64, key ...interface{}) (*DdgAdminUserGroup, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDdgAdminUserGroupTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, uid ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	daug := DdgAdminUserGroup{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&daug.ID, &daug.Gid, &daug.UID)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&daug.ID, &daug.Gid, &daug.UID)
		if err != nil {
			return nil, err
		}
	}

	return &daug, nil
}

// DdgAdminUserGroupsByGid retrieves a row from 'aypcddg.ddg_admin_user_groups' as a DdgAdminUserGroup.
//
// Generated from index 'gid'.
func DdgAdminUserGroupsByGid(ctx context.Context, gid int, key ...interface{}) ([]*DdgAdminUserGroup, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDdgAdminUserGroupTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, uid ` +
		`FROM ` + tableName +
		` WHERE gid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, gid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, gid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*DdgAdminUserGroup, 0)
	for queryData.Next() {
		daug := DdgAdminUserGroup{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&daug.ID, &daug.Gid, &daug.UID)
		if err != nil {
			return nil, err
		}

		res = append(res, &daug)
	}

	return res, nil
}

// DdgAdminUserGroupsByUID retrieves a row from 'aypcddg.ddg_admin_user_groups' as a DdgAdminUserGroup.
//
// Generated from index 'uid'.
func DdgAdminUserGroupsByUID(ctx context.Context, uid int, key ...interface{}) ([]*DdgAdminUserGroup, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetDdgAdminUserGroupTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, gid, uid ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*DdgAdminUserGroup, 0)
	for queryData.Next() {
		daug := DdgAdminUserGroup{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&daug.ID, &daug.Gid, &daug.UID)
		if err != nil {
			return nil, err
		}

		res = append(res, &daug)
	}

	return res, nil
}
