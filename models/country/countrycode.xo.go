// Package product contains the types for schema 'saas'.
package country

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// CountryCode represents a row from 'saas.country_code'.
type CountryCode struct {
	ID          uint   `json:"id"`           // id
	EnglishName string `json:"english_name"` // english_name
	ChineseName string `json:"chinese_name"` // chinese_name
	ShortName   string `json:"short_name"`   // short_name
	PhoneCode   int16  `json:"phone_code"`   // phone_code
	JetLag      int16  `json:"jet_lag"`      // jet_lag
	IsDel       int8   `json:"is_del"`       // is_del
	UpdatedTime uint   `json:"updated_time"` // updated_time
	CreatedTime uint   `json:"created_time"` // created_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CountryCode exists in the database.
func (cc *CountryCode) Exists() bool { //country_code
	return cc._exists
}

// Deleted provides information if the CountryCode has been deleted from the database.
func (cc *CountryCode) Deleted() bool {
	return cc._deleted
}

// Get table name
func GetCountryCodeTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "country_code", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CountryCode to the database.
func (cc *CountryCode) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if cc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCountryCodeTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`english_name, chinese_name, short_name, phone_code, jet_lag, is_del, updated_time, created_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cc.EnglishName, cc.ChineseName, cc.ShortName, cc.PhoneCode, cc.JetLag, cc.IsDel, cc.UpdatedTime, cc.CreatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, cc.EnglishName, cc.ChineseName, cc.ShortName, cc.PhoneCode, cc.JetLag, cc.IsDel, cc.UpdatedTime, cc.CreatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, cc.EnglishName, cc.ChineseName, cc.ShortName, cc.PhoneCode, cc.JetLag, cc.IsDel, cc.UpdatedTime, cc.CreatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cc.ID = uint(id)
	cc._exists = true

	return nil
}

// Update updates the CountryCode in the database.
func (cc *CountryCode) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCountryCodeTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`english_name = ?, chinese_name = ?, short_name = ?, phone_code = ?, jet_lag = ?, is_del = ?, updated_time = ?, created_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cc.EnglishName, cc.ChineseName, cc.ShortName, cc.PhoneCode, cc.JetLag, cc.IsDel, cc.UpdatedTime, cc.CreatedTime, cc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cc.EnglishName, cc.ChineseName, cc.ShortName, cc.PhoneCode, cc.JetLag, cc.IsDel, cc.UpdatedTime, cc.CreatedTime, cc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cc.EnglishName, cc.ChineseName, cc.ShortName, cc.PhoneCode, cc.JetLag, cc.IsDel, cc.UpdatedTime, cc.CreatedTime, cc.ID)
	}
	return err
}

// Save saves the CountryCode to the database.
func (cc *CountryCode) Save(ctx context.Context) error {
	if cc.Exists() {
		return cc.Update(ctx)
	}

	return cc.Insert(ctx)
}

// Delete deletes the CountryCode from the database.
func (cc *CountryCode) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCountryCodeTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	cc._deleted = true

	return nil
}

// CountryCodeByID retrieves a row from 'saas.country_code' as a CountryCode.
//
// Generated from index 'country_code_id_pkey'.
func CountryCodeByID(ctx context.Context, id uint, key ...interface{}) (*CountryCode, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCountryCodeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, english_name, chinese_name, short_name, phone_code, jet_lag, is_del, updated_time, created_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	cc := CountryCode{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&cc.ID, &cc.EnglishName, &cc.ChineseName, &cc.ShortName, &cc.PhoneCode, &cc.JetLag, &cc.IsDel, &cc.UpdatedTime, &cc.CreatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&cc.ID, &cc.EnglishName, &cc.ChineseName, &cc.ShortName, &cc.PhoneCode, &cc.JetLag, &cc.IsDel, &cc.UpdatedTime, &cc.CreatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &cc, nil
}
