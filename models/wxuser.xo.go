// Package models contains the types for schema 'ypcfx'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// WxUser represents a row from 'ypcfx.wx_users'.
type WxUser struct {
	ID         int            `json:"id"`          // id
	Openid     string         `json:"openid"`      // openid
	SessionID  sql.NullString `json:"session_id"`  // session_id
	Unionid    sql.NullString `json:"unionid"`     // unionid
	Appid      sql.NullString `json:"appid"`       // appid
	UID        sql.NullInt64  `json:"uid"`         // uid
	Gcode      sql.NullString `json:"gcode"`       // gcode
	Tcode      sql.NullString `json:"tcode"`       // tcode
	Tuid       sql.NullInt64  `json:"tuid"`        // tuid
	Tfid       sql.NullInt64  `json:"tfid"`        // tfid
	Tsid       sql.NullInt64  `json:"tsid"`        // tsid
	SessionKey sql.NullString `json:"session_key"` // session_key
	ExpiresIn  int            `json:"expires_in"`  // expires_in
	Nickname   sql.NullString `json:"nickName"`    // nickName
	Gender     sql.NullString `json:"gender"`      // gender
	Avatarurl  sql.NullString `json:"avatarUrl"`   // avatarUrl
	City       sql.NullString `json:"city"`        // city
	Province   sql.NullString `json:"province"`    // province
	Country    sql.NullString `json:"country"`     // country
	Created    mysql.NullTime `json:"created"`     // created
	Updated    mysql.NullTime `json:"updated"`     // updated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WxUser exists in the database.
func (wu *WxUser) Exists() bool { //wx_users
	return wu._exists
}

// Deleted provides information if the WxUser has been deleted from the database.
func (wu *WxUser) Deleted() bool {
	return wu._deleted
}

// Get table name 11
func GetWxUserTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("ypcfx", "wx_users", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the WxUser to the database.
func (wu *WxUser) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if wu._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWxUserTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`openid, session_id, unionid, appid, uid, gcode, tcode, tuid, tfid, tsid, session_key, expires_in, nickName, gender, avatarUrl, city, province, country, created, updated` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, wu.Openid, wu.SessionID, wu.Unionid, wu.Appid, wu.UID, wu.Gcode, wu.Tcode, wu.Tuid, wu.Tfid, wu.Tsid, wu.SessionKey, wu.ExpiresIn, wu.Nickname, wu.Gender, wu.Avatarurl, wu.City, wu.Province, wu.Country, wu.Created, wu.Updated)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, wu.Openid, wu.SessionID, wu.Unionid, wu.Appid, wu.UID, wu.Gcode, wu.Tcode, wu.Tuid, wu.Tfid, wu.Tsid, wu.SessionKey, wu.ExpiresIn, wu.Nickname, wu.Gender, wu.Avatarurl, wu.City, wu.Province, wu.Country, wu.Created, wu.Updated)
	} else {
		res, err = dbConn.Exec(sqlstr, wu.Openid, wu.SessionID, wu.Unionid, wu.Appid, wu.UID, wu.Gcode, wu.Tcode, wu.Tuid, wu.Tfid, wu.Tsid, wu.SessionKey, wu.ExpiresIn, wu.Nickname, wu.Gender, wu.Avatarurl, wu.City, wu.Province, wu.Country, wu.Created, wu.Updated)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wu.ID = int(id)
	wu._exists = true

	return nil
}

// Update updates the WxUser in the database.
func (wu *WxUser) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if wu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWxUserTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`openid = ?, session_id = ?, unionid = ?, appid = ?, uid = ?, gcode = ?, tcode = ?, tuid = ?, tfid = ?, tsid = ?, session_key = ?, expires_in = ?, nickName = ?, gender = ?, avatarUrl = ?, city = ?, province = ?, country = ?, created = ?, updated = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, wu.Openid, wu.SessionID, wu.Unionid, wu.Appid, wu.UID, wu.Gcode, wu.Tcode, wu.Tuid, wu.Tfid, wu.Tsid, wu.SessionKey, wu.ExpiresIn, wu.Nickname, wu.Gender, wu.Avatarurl, wu.City, wu.Province, wu.Country, wu.Created, wu.Updated, wu.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, wu.Openid, wu.SessionID, wu.Unionid, wu.Appid, wu.UID, wu.Gcode, wu.Tcode, wu.Tuid, wu.Tfid, wu.Tsid, wu.SessionKey, wu.ExpiresIn, wu.Nickname, wu.Gender, wu.Avatarurl, wu.City, wu.Province, wu.Country, wu.Created, wu.Updated, wu.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, wu.Openid, wu.SessionID, wu.Unionid, wu.Appid, wu.UID, wu.Gcode, wu.Tcode, wu.Tuid, wu.Tfid, wu.Tsid, wu.SessionKey, wu.ExpiresIn, wu.Nickname, wu.Gender, wu.Avatarurl, wu.City, wu.Province, wu.Country, wu.Created, wu.Updated, wu.ID)
	}
	return err
}

// Save saves the WxUser to the database.
func (wu *WxUser) Save(ctx context.Context) error {
	if wu.Exists() {
		return wu.Update(ctx)
	}

	return wu.Insert(ctx)
}

// Delete deletes the WxUser from the database.
func (wu *WxUser) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if wu._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetWxUserTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, wu.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, wu.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, wu.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	wu._deleted = true

	return nil
}

// WxUserByAppidOpenid retrieves a row from 'ypcfx.wx_users' as a WxUser.
//
// Generated from index 'appidopenid'.
func WxUserByAppidOpenid(ctx context.Context, appid sql.NullString, openid string, key ...interface{}) (*WxUser, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetWxUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, openid, session_id, unionid, appid, uid, gcode, tcode, tuid, tfid, tsid, session_key, expires_in, nickName, gender, avatarUrl, city, province, country, created, updated ` +
		`FROM ` + tableName +
		` WHERE appid = ? AND openid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, appid, openid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	wu := WxUser{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, appid, openid).Scan(&wu.ID, &wu.Openid, &wu.SessionID, &wu.Unionid, &wu.Appid, &wu.UID, &wu.Gcode, &wu.Tcode, &wu.Tuid, &wu.Tfid, &wu.Tsid, &wu.SessionKey, &wu.ExpiresIn, &wu.Nickname, &wu.Gender, &wu.Avatarurl, &wu.City, &wu.Province, &wu.Country, &wu.Created, &wu.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, appid, openid).Scan(&wu.ID, &wu.Openid, &wu.SessionID, &wu.Unionid, &wu.Appid, &wu.UID, &wu.Gcode, &wu.Tcode, &wu.Tuid, &wu.Tfid, &wu.Tsid, &wu.SessionKey, &wu.ExpiresIn, &wu.Nickname, &wu.Gender, &wu.Avatarurl, &wu.City, &wu.Province, &wu.Country, &wu.Created, &wu.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &wu, nil
}

// WxUsersByUnionid retrieves a row from 'ypcfx.wx_users' as a WxUser.
//
// Generated from index 'unionid'.
func WxUsersByUnionid(ctx context.Context, unionid sql.NullString, key ...interface{}) ([]*WxUser, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetWxUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, openid, session_id, unionid, appid, uid, gcode, tcode, tuid, tfid, tsid, session_key, expires_in, nickName, gender, avatarUrl, city, province, country, created, updated ` +
		`FROM ` + tableName +
		` WHERE unionid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, unionid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, unionid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, unionid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*WxUser, 0)
	for queryData.Next() {
		wu := WxUser{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&wu.ID, &wu.Openid, &wu.SessionID, &wu.Unionid, &wu.Appid, &wu.UID, &wu.Gcode, &wu.Tcode, &wu.Tuid, &wu.Tfid, &wu.Tsid, &wu.SessionKey, &wu.ExpiresIn, &wu.Nickname, &wu.Gender, &wu.Avatarurl, &wu.City, &wu.Province, &wu.Country, &wu.Created, &wu.Updated)
		if err != nil {
			return nil, err
		}

		res = append(res, &wu)
	}

	return res, nil
}

// WxUserByID retrieves a row from 'ypcfx.wx_users' as a WxUser.
//
// Generated from index 'wx_users_id_pkey'.
func WxUserByID(ctx context.Context, id int, key ...interface{}) (*WxUser, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetWxUserTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, openid, session_id, unionid, appid, uid, gcode, tcode, tuid, tfid, tsid, session_key, expires_in, nickName, gender, avatarUrl, city, province, country, created, updated ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	wu := WxUser{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&wu.ID, &wu.Openid, &wu.SessionID, &wu.Unionid, &wu.Appid, &wu.UID, &wu.Gcode, &wu.Tcode, &wu.Tuid, &wu.Tfid, &wu.Tsid, &wu.SessionKey, &wu.ExpiresIn, &wu.Nickname, &wu.Gender, &wu.Avatarurl, &wu.City, &wu.Province, &wu.Country, &wu.Created, &wu.Updated)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&wu.ID, &wu.Openid, &wu.SessionID, &wu.Unionid, &wu.Appid, &wu.UID, &wu.Gcode, &wu.Tcode, &wu.Tuid, &wu.Tfid, &wu.Tsid, &wu.SessionKey, &wu.ExpiresIn, &wu.Nickname, &wu.Gender, &wu.Avatarurl, &wu.City, &wu.Province, &wu.Country, &wu.Created, &wu.Updated)
		if err != nil {
			return nil, err
		}
	}

	return &wu, nil
}
