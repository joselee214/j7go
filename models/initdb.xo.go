// Package models contains the types for schema 'j7go'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Initdb represents a row from 'j7go.initdb'.
type Initdb struct {
	ID        int       `json:"id"`         // id
	Pid       int       `json:"pid"`        // pid
	Name      string    `json:"name"`       // name
	PassOk    string    `json:"pass_ok"`    // pass_ok
	CreatedAt time.Time `json:"created_at"` // created_at
	Price     float64   `json:"price"`      // price

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Initdb exists in the database.
func (i *Initdb) Exists() bool {
	return i._exists
}

// Deleted provides information if the Initdb has been deleted from the database.
func (i *Initdb) Deleted() bool {
	return i._deleted
}

// Insert inserts the Initdb to the database.
func (i *Initdb) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO j7go.initdb (` +
		`pid, name, pass_ok, created_at, price` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, i.Pid, i.Name, i.PassOk, i.CreatedAt, i.Price)
	res, err := db.Exec(sqlstr, i.Pid, i.Name, i.PassOk, i.CreatedAt, i.Price)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	i.ID = int(id)
	i._exists = true

	return nil
}

// Update updates the Initdb in the database.
func (i *Initdb) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE j7go.initdb SET ` +
		`pid = ?, name = ?, pass_ok = ?, created_at = ?, price = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, i.Pid, i.Name, i.PassOk, i.CreatedAt, i.Price, i.ID)
	_, err = db.Exec(sqlstr, i.Pid, i.Name, i.PassOk, i.CreatedAt, i.Price, i.ID)
	return err
}

// Save saves the Initdb to the database.
func (i *Initdb) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Delete deletes the Initdb from the database.
func (i *Initdb) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM j7go.initdb WHERE id = ?`

	// run query
	XOLog(sqlstr, i.ID)
	_, err = db.Exec(sqlstr, i.ID)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// InitdbByID retrieves a row from 'j7go.initdb' as a Initdb.
//
// Generated from index 'initdb_id_pkey'.
func InitdbByID(db XODB, id int) (*Initdb, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pid, name, pass_ok, created_at, price ` +
		`FROM j7go.initdb ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	i := Initdb{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&i.ID, &i.Pid, &i.Name, &i.PassOk, &i.CreatedAt, &i.Price)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
