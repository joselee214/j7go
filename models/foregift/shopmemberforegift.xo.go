// Package models contains the types for schema 'saas'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"github.com/go-sql-driver/mysql"
	"go.uber.org/zap"
)

// ShopMemberForegift represents a row from 'saas.shop_member_foregift'.
type ShopMemberForegift struct {
	ID            uint           `json:"id"`              // id
	UID           int64          `json:"uid"`             // uid
	ShopID        int64          `json:"shop_id"`         // shop_id
	MemberID      int            `json:"member_id"`       // member_id
	Name          string         `json:"name"`            // name
	CardNumber    sql.NullString `json:"card_number"`     // card_number
	Mobile        int64          `json:"mobile"`          // mobile
	ContractID    sql.NullInt64  `json:"contract_id"`     // contract_id
	LogContractID sql.NullInt64  `json:"log_contract_id"` // log_contract_id
	Tenancy       sql.NullString `json:"tenancy"`         // tenancy
	Type          int8           `json:"type"`            // type
	Status        int8           `json:"status"`          // status
	PayType       int8           `json:"pay_type"`        // pay_type
	Price         float64        `json:"price"`           // price
	SellerID      int            `json:"seller_id"`       // seller_id
	PayeeID       int64          `json:"payee_id"`        // payee_id
	Remark        sql.NullString `json:"remark"`          // remark
	CreatedTime   mysql.NullTime `json:"created_time"`    // created_time
	UpdatedTime   mysql.NullTime `json:"updated_time"`    // updated_time
}

// ShopMemberForegiftsByID retrieves a row from 'saas.shop_member_foregift' as a ShopMemberForegift.
//

// Get table name
func GetShopMemberForegiftTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "country_code", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}


// Generated from index 'id'.
func ShopMemberForegiftsByID(ctx context.Context, id uint, key ...interface{}) ([]*ShopMemberForegift, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopMemberForegiftTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, shop_id, member_id, name, card_number, mobile, contract_id, log_contract_id, tenancy, type, status, pay_type, price, seller_id, payee_id, remark, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, id)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, id)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*ShopMemberForegift, 0)
	for queryData.Next() {
		smf := ShopMemberForegift{}

		// scan
		err = queryData.Scan(&smf.ID, &smf.UID, &smf.ShopID, &smf.MemberID, &smf.Name, &smf.CardNumber, &smf.Mobile, &smf.ContractID, &smf.LogContractID, &smf.Tenancy, &smf.Type, &smf.Status, &smf.PayType, &smf.Price, &smf.SellerID, &smf.PayeeID, &smf.Remark, &smf.CreatedTime, &smf.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &smf)
	}

	return res, nil
}

// ShopMemberForegiftsByMemberID retrieves a row from 'saas.shop_member_foregift' as a ShopMemberForegift.
//
// Generated from index 'member_id'.
func ShopMemberForegiftsByMemberID(ctx context.Context, memberID int, key ...interface{}) ([]*ShopMemberForegift, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopMemberForegiftTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, shop_id, member_id, name, card_number, mobile, contract_id, log_contract_id, tenancy, type, status, pay_type, price, seller_id, payee_id, remark, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE member_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, memberID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, memberID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, memberID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*ShopMemberForegift, 0)
	for queryData.Next() {
		smf := ShopMemberForegift{}

		// scan
		err = queryData.Scan(&smf.ID, &smf.UID, &smf.ShopID, &smf.MemberID, &smf.Name, &smf.CardNumber, &smf.Mobile, &smf.ContractID, &smf.LogContractID, &smf.Tenancy, &smf.Type, &smf.Status, &smf.PayType, &smf.Price, &smf.SellerID, &smf.PayeeID, &smf.Remark, &smf.CreatedTime, &smf.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &smf)
	}

	return res, nil
}

// ShopMemberForegiftsByShopID retrieves a row from 'saas.shop_member_foregift' as a ShopMemberForegift.
//
// Generated from index 'shop_id'.
func ShopMemberForegiftsByShopID(ctx context.Context, shopID int64, key ...interface{}) ([]*ShopMemberForegift, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopMemberForegiftTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, shop_id, member_id, name, card_number, mobile, contract_id, log_contract_id, tenancy, type, status, pay_type, price, seller_id, payee_id, remark, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE shop_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopID)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, shopID)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, shopID)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*ShopMemberForegift, 0)
	for queryData.Next() {
		smf := ShopMemberForegift{}

		// scan
		err = queryData.Scan(&smf.ID, &smf.UID, &smf.ShopID, &smf.MemberID, &smf.Name, &smf.CardNumber, &smf.Mobile, &smf.ContractID, &smf.LogContractID, &smf.Tenancy, &smf.Type, &smf.Status, &smf.PayType, &smf.Price, &smf.SellerID, &smf.PayeeID, &smf.Remark, &smf.CreatedTime, &smf.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &smf)
	}

	return res, nil
}

// ShopMemberForegiftsByUID retrieves a row from 'saas.shop_member_foregift' as a ShopMemberForegift.
//
// Generated from index 'uid'.
func ShopMemberForegiftsByUID(ctx context.Context, uid int64, key ...interface{}) ([]*ShopMemberForegift, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopMemberForegiftTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, uid, shop_id, member_id, name, card_number, mobile, contract_id, log_contract_id, tenancy, type, status, pay_type, price, seller_id, payee_id, remark, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE uid = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, uid)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, uid)
		if err != nil {
			return nil, err
		}
	}

	defer queryData.Close()

	// load results
	res := make([]*ShopMemberForegift, 0)
	for queryData.Next() {
		smf := ShopMemberForegift{}

		// scan
		err = queryData.Scan(&smf.ID, &smf.UID, &smf.ShopID, &smf.MemberID, &smf.Name, &smf.CardNumber, &smf.Mobile, &smf.ContractID, &smf.LogContractID, &smf.Tenancy, &smf.Type, &smf.Status, &smf.PayType, &smf.Price, &smf.SellerID, &smf.PayeeID, &smf.Remark, &smf.CreatedTime, &smf.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &smf)
	}

	return res, nil
}
