// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// TeamCourseSchedule represents a row from 'saas.team_course_schedule'.
type TeamCourseSchedule struct {
	ID            uint   `json:"id"`              // id
	BrandID       uint   `json:"brand_id"`        // brand_id
	ShopID        uint   `json:"shop_id"`         // shop_id
	ScheduleDate  uint   `json:"schedule_date"`   // schedule_date
	StartTime     uint   `json:"start_time"`      // start_time
	EndTime       uint   `json:"end_time"`        // end_time
	CourseID      uint   `json:"course_id"`       // course_id
	CourseName    string `json:"course_name"`     // course_name
	CoachID       uint   `json:"coach_id"`        // coach_id
	CoachName     string `json:"coach_name"`      // coach_name
	CourtID       uint   `json:"court_id"`        // court_id
	CourtName     string `json:"court_name"`      // court_name
	CourtSiteID   uint   `json:"court_site_id"`   // court_site_id
	CourtSiteName string `json:"court_site_name"` // court_site_name
	LimitNum      uint   `json:"limit_num"`       // limit_num
	CheckinNum    uint   `json:"checkin_num"`     // checkin_num
	ReservedNum   uint   `json:"reserved_num"`    // reserved_num
	ReserveMax    uint   `json:"reserve_max"`     // reserve_max
	BackupNum     uint   `json:"backup_num"`      // backup_num
	CourseFee     uint   `json:"course_fee"`      // course_fee
	IsDel         int8   `json:"is_del"`          // is_del
	CreatedTime   uint   `json:"created_time"`    // created_time
	UpdatedTime   uint   `json:"updated_time"`    // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TeamCourseSchedule exists in the database.
func (tcs *TeamCourseSchedule) Exists() bool { //team_course_schedule
	return tcs._exists
}

// Deleted provides information if the TeamCourseSchedule has been deleted from the database.
func (tcs *TeamCourseSchedule) Deleted() bool {
	return tcs._deleted
}

// Get table name
func getTeamCourseScheduleTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "team_course_schedule", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the TeamCourseSchedule to the database.
func (tcs *TeamCourseSchedule) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if tcs._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getTeamCourseScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, brand_id, shop_id, schedule_date, start_time, end_time, course_id, course_name, coach_id, coach_name, court_id, court_name, court_site_id, court_site_name, limit_num, checkin_num, reserved_num, reserve_max, backup_num, course_fee, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tcs.ID, tcs.BrandID, tcs.ShopID, tcs.ScheduleDate, tcs.StartTime, tcs.EndTime, tcs.CourseID, tcs.CourseName, tcs.CoachID, tcs.CoachName, tcs.CourtID, tcs.CourtName, tcs.CourtSiteID, tcs.CourtSiteName, tcs.LimitNum, tcs.CheckinNum, tcs.ReservedNum, tcs.ReserveMax, tcs.BackupNum, tcs.CourseFee, tcs.IsDel, tcs.CreatedTime, tcs.UpdatedTime)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, tcs.ID, tcs.BrandID, tcs.ShopID, tcs.ScheduleDate, tcs.StartTime, tcs.EndTime, tcs.CourseID, tcs.CourseName, tcs.CoachID, tcs.CoachName, tcs.CourtID, tcs.CourtName, tcs.CourtSiteID, tcs.CourtSiteName, tcs.LimitNum, tcs.CheckinNum, tcs.ReservedNum, tcs.ReserveMax, tcs.BackupNum, tcs.CourseFee, tcs.IsDel, tcs.CreatedTime, tcs.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, tcs.ID, tcs.BrandID, tcs.ShopID, tcs.ScheduleDate, tcs.StartTime, tcs.EndTime, tcs.CourseID, tcs.CourseName, tcs.CoachID, tcs.CoachName, tcs.CourtID, tcs.CourtName, tcs.CourtSiteID, tcs.CourtSiteName, tcs.LimitNum, tcs.CheckinNum, tcs.ReservedNum, tcs.ReserveMax, tcs.BackupNum, tcs.CourseFee, tcs.IsDel, tcs.CreatedTime, tcs.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// set existence
	tcs._exists = true

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tcs.ID = uint(id)
	tcs._exists = true

	return nil
}

// Update updates the TeamCourseSchedule in the database.
func (tcs *TeamCourseSchedule) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if tcs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getTeamCourseScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, schedule_date = ?, start_time = ?, end_time = ?, course_id = ?, course_name = ?, coach_id = ?, coach_name = ?, court_id = ?, court_name = ?, court_site_id = ?, court_site_name = ?, limit_num = ?, checkin_num = ?, reserved_num = ?, reserve_max = ?, backup_num = ?, course_fee = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tcs.BrandID, tcs.ShopID, tcs.ScheduleDate, tcs.StartTime, tcs.EndTime, tcs.CourseID, tcs.CourseName, tcs.CoachID, tcs.CoachName, tcs.CourtID, tcs.CourtName, tcs.CourtSiteID, tcs.CourtSiteName, tcs.LimitNum, tcs.CheckinNum, tcs.ReservedNum, tcs.ReserveMax, tcs.BackupNum, tcs.CourseFee, tcs.IsDel, tcs.CreatedTime, tcs.UpdatedTime, tcs.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, tcs.BrandID, tcs.ShopID, tcs.ScheduleDate, tcs.StartTime, tcs.EndTime, tcs.CourseID, tcs.CourseName, tcs.CoachID, tcs.CoachName, tcs.CourtID, tcs.CourtName, tcs.CourtSiteID, tcs.CourtSiteName, tcs.LimitNum, tcs.CheckinNum, tcs.ReservedNum, tcs.ReserveMax, tcs.BackupNum, tcs.CourseFee, tcs.IsDel, tcs.CreatedTime, tcs.UpdatedTime, tcs.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, tcs.BrandID, tcs.ShopID, tcs.ScheduleDate, tcs.StartTime, tcs.EndTime, tcs.CourseID, tcs.CourseName, tcs.CoachID, tcs.CoachName, tcs.CourtID, tcs.CourtName, tcs.CourtSiteID, tcs.CourtSiteName, tcs.LimitNum, tcs.CheckinNum, tcs.ReservedNum, tcs.ReserveMax, tcs.BackupNum, tcs.CourseFee, tcs.IsDel, tcs.CreatedTime, tcs.UpdatedTime, tcs.ID)
	}
	return err
}

// Save saves the TeamCourseSchedule to the database.
func (tcs *TeamCourseSchedule) Save(ctx context.Context) error {
	if tcs.Exists() {
		return tcs.Update(ctx)
	}

	return tcs.Insert(ctx)
}

// Delete deletes the TeamCourseSchedule from the database.
func (tcs *TeamCourseSchedule) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if tcs._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getTeamCourseScheduleTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tcs.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, tcs.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, tcs.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	tcs._deleted = true

	return nil
}

// TeamCourseScheduleByID retrieves a row from 'saas.team_course_schedule' as a TeamCourseSchedule.
//
// Generated from index 'team_course_schedule_id_pkey'.
func TeamCourseScheduleByID(ctx context.Context, id uint, key ...interface{}) (*TeamCourseSchedule, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getTeamCourseScheduleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, schedule_date, start_time, end_time, course_id, course_name, coach_id, coach_name, court_id, court_name, court_site_id, court_site_name, limit_num, checkin_num, reserved_num, reserve_max, backup_num, course_fee, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	tcs := TeamCourseSchedule{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&tcs.ID, &tcs.BrandID, &tcs.ShopID, &tcs.ScheduleDate, &tcs.StartTime, &tcs.EndTime, &tcs.CourseID, &tcs.CourseName, &tcs.CoachID, &tcs.CoachName, &tcs.CourtID, &tcs.CourtName, &tcs.CourtSiteID, &tcs.CourtSiteName, &tcs.LimitNum, &tcs.CheckinNum, &tcs.ReservedNum, &tcs.ReserveMax, &tcs.BackupNum, &tcs.CourseFee, &tcs.IsDel, &tcs.CreatedTime, &tcs.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&tcs.ID, &tcs.BrandID, &tcs.ShopID, &tcs.ScheduleDate, &tcs.StartTime, &tcs.EndTime, &tcs.CourseID, &tcs.CourseName, &tcs.CoachID, &tcs.CoachName, &tcs.CourtID, &tcs.CourtName, &tcs.CourtSiteID, &tcs.CourtSiteName, &tcs.LimitNum, &tcs.CheckinNum, &tcs.ReservedNum, &tcs.ReserveMax, &tcs.BackupNum, &tcs.CourseFee, &tcs.IsDel, &tcs.CreatedTime, &tcs.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &tcs, nil
}
