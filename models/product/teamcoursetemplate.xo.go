// Package test contains the types for schema 'product'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// TeamCourseTemplate represents a row from 'saas.team_course_template'.
type TeamCourseTemplate struct {
	ID             uint   `json:"id"`              // id
	BrandID        uint   `json:"brand_id"`        // brand_id
	ShopID         uint   `json:"shop_id"`         // shop_id
	CourseName     string `json:"course_name"`     // course_name
	CategoryID     uint   `json:"category_id"`     // category_id
	Duration       uint   `json:"duration"`        // duration
	TimeUnit       int8   `json:"time_unit"`       // time_unit
	Price          uint   `json:"price"`           // price
	StrengthLevel  int8   `json:"strength_level"`  // strength_level
	Calories       uint   `json:"calories"`        // calories
	AlbumID        uint   `json:"album_id"`        // album_id
	Description    string `json:"description"`     // description
	ShopSetting    int8   `json:"shop_setting"`    // shop_setting
	PublishChannel int8   `json:"publish_channel"` // publish_channel
	IsAvailable    int8   `json:"is_available"`    // is_available
	OperatorID     uint   `json:"operator_id"`     // operator_id
	IsDel          int8   `json:"is_del"`          // is_del
	CreatedTime    uint   `json:"created_time"`    // created_time
	UpdatedTime    uint   `json:"updated_time"`    // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TeamCourseTemplate exists in the database.
func (tct *TeamCourseTemplate) Exists() bool { //team_course_template
	return tct._exists
}

// Deleted provides information if the TeamCourseTemplate has been deleted from the database.
func (tct *TeamCourseTemplate) Deleted() bool {
	return tct._deleted
}

// Get table name
func GetTeamCourseTemplateTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "team_course_template", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the TeamCourseTemplate to the database.
func (tct *TeamCourseTemplate) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if tct._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTeamCourseTemplateTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, course_name, category_id, duration, time_unit, price, strength_level, calories, album_id, description, shop_setting, publish_channel, is_available, operator_id, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tct.BrandID, tct.ShopID, tct.CourseName, tct.CategoryID, tct.Duration, tct.TimeUnit, tct.Price, tct.StrengthLevel, tct.Calories, tct.AlbumID, tct.Description, tct.ShopSetting, tct.PublishChannel, tct.IsAvailable, tct.OperatorID, tct.IsDel, tct.CreatedTime, tct.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, tct.BrandID, tct.ShopID, tct.CourseName, tct.CategoryID, tct.Duration, tct.TimeUnit, tct.Price, tct.StrengthLevel, tct.Calories, tct.AlbumID, tct.Description, tct.ShopSetting, tct.PublishChannel, tct.IsAvailable, tct.OperatorID, tct.IsDel, tct.CreatedTime, tct.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, tct.BrandID, tct.ShopID, tct.CourseName, tct.CategoryID, tct.Duration, tct.TimeUnit, tct.Price, tct.StrengthLevel, tct.Calories, tct.AlbumID, tct.Description, tct.ShopSetting, tct.PublishChannel, tct.IsAvailable, tct.OperatorID, tct.IsDel, tct.CreatedTime, tct.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tct.ID = uint(id)
	tct._exists = true

	return nil
}

// Update updates the TeamCourseTemplate in the database.
func (tct *TeamCourseTemplate) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if tct._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTeamCourseTemplateTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, course_name = ?, category_id = ?, duration = ?, time_unit = ?, price = ?, strength_level = ?, calories = ?, album_id = ?, description = ?, shop_setting = ?, publish_channel = ?, is_available = ?, operator_id = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tct.BrandID, tct.ShopID, tct.CourseName, tct.CategoryID, tct.Duration, tct.TimeUnit, tct.Price, tct.StrengthLevel, tct.Calories, tct.AlbumID, tct.Description, tct.ShopSetting, tct.PublishChannel, tct.IsAvailable, tct.OperatorID, tct.IsDel, tct.CreatedTime, tct.UpdatedTime, tct.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, tct.BrandID, tct.ShopID, tct.CourseName, tct.CategoryID, tct.Duration, tct.TimeUnit, tct.Price, tct.StrengthLevel, tct.Calories, tct.AlbumID, tct.Description, tct.ShopSetting, tct.PublishChannel, tct.IsAvailable, tct.OperatorID, tct.IsDel, tct.CreatedTime, tct.UpdatedTime, tct.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, tct.BrandID, tct.ShopID, tct.CourseName, tct.CategoryID, tct.Duration, tct.TimeUnit, tct.Price, tct.StrengthLevel, tct.Calories, tct.AlbumID, tct.Description, tct.ShopSetting, tct.PublishChannel, tct.IsAvailable, tct.OperatorID, tct.IsDel, tct.CreatedTime, tct.UpdatedTime, tct.ID)
	}
	return err
}

// Save saves the TeamCourseTemplate to the database.
func (tct *TeamCourseTemplate) Save(ctx context.Context) error {
	if tct.Exists() {
		return tct.Update(ctx)
	}

	return tct.Insert(ctx)
}

// Delete deletes the TeamCourseTemplate from the database.
func (tct *TeamCourseTemplate) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if tct._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTeamCourseTemplateTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tct.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, tct.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, tct.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	tct._deleted = true

	return nil
}

// TeamCourseTemplateByID retrieves a row from 'saas.team_course_template' as a TeamCourseTemplate.
//
// Generated from index 'team_course_template_id_pkey'.
func TeamCourseTemplateByID(ctx context.Context, id uint, key ...interface{}) (*TeamCourseTemplate, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetTeamCourseTemplateTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, course_name, category_id, duration, time_unit, price, strength_level, calories, album_id, description, shop_setting, publish_channel, is_available, operator_id, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ? AND is_del = 0`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	tct := TeamCourseTemplate{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&tct.ID, &tct.BrandID, &tct.ShopID, &tct.CourseName, &tct.CategoryID, &tct.Duration, &tct.TimeUnit, &tct.Price, &tct.StrengthLevel, &tct.Calories, &tct.AlbumID, &tct.Description, &tct.ShopSetting, &tct.PublishChannel, &tct.IsAvailable, &tct.OperatorID, &tct.IsDel, &tct.CreatedTime, &tct.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&tct.ID, &tct.BrandID, &tct.ShopID, &tct.CourseName, &tct.CategoryID, &tct.Duration, &tct.TimeUnit, &tct.Price, &tct.StrengthLevel, &tct.Calories, &tct.AlbumID, &tct.Description, &tct.ShopSetting, &tct.PublishChannel, &tct.IsAvailable, &tct.OperatorID, &tct.IsDel, &tct.CreatedTime, &tct.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &tct, nil
}
