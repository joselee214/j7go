// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"time"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// PersonalCourseSchedule represents a row from 'saas.personal_course_schedule'.
type PersonalCourseSchedule struct {
	ID           uint `json:"id"`            // id
	BrandID      uint `json:"brand_id"`      // brand_id
	ShopID       uint `json:"shop_id"`       // shop_id
	CoachID      uint `json:"coach_id"`      // coach_id
	ScheduleDate uint `json:"schedule_date"` // schedule_date
	StartTime    uint `json:"start_time"`    // start_time
	EndTime      uint `json:"end_time"`      // end_time
	IsDel        int8 `json:"is_del"`        // is_del
	CreatedTime  uint `json:"created_time"`  // created_time
	UpdatedTime  uint `json:"updated_time"`  // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PersonalCourseSchedule exists in the database.
func (pcs *PersonalCourseSchedule) Exists() bool { //personal_course_schedule
	return pcs._exists
}

// Deleted provides information if the PersonalCourseSchedule has been deleted from the database.
func (pcs *PersonalCourseSchedule) Deleted() bool {
	return pcs._deleted
}

// Get table name
func getPersonalCourseScheduleTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "personal_course_schedule", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the PersonalCourseSchedule to the database.
func (pcs *PersonalCourseSchedule) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if pcs._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCourseScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, coach_id, schedule_date, start_time, end_time, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pcs.BrandID, pcs.ShopID, pcs.CoachID, pcs.ScheduleDate, pcs.StartTime, pcs.EndTime, pcs.IsDel, pcs.CreatedTime, pcs.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, pcs.BrandID, pcs.ShopID, pcs.CoachID, pcs.ScheduleDate, pcs.StartTime, pcs.EndTime, pcs.IsDel, pcs.CreatedTime, pcs.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, pcs.BrandID, pcs.ShopID, pcs.CoachID, pcs.ScheduleDate, pcs.StartTime, pcs.EndTime, pcs.IsDel, pcs.CreatedTime, pcs.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pcs.ID = uint(id)
	pcs._exists = true

	return nil
}

// Update updates the PersonalCourseSchedule in the database.
func (pcs *PersonalCourseSchedule) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pcs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCourseScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, coach_id = ?, schedule_date = ?, start_time = ?, end_time = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pcs.BrandID, pcs.ShopID, pcs.CoachID, pcs.ScheduleDate, pcs.StartTime, pcs.EndTime, pcs.IsDel, pcs.CreatedTime, pcs.UpdatedTime, pcs.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pcs.BrandID, pcs.ShopID, pcs.CoachID, pcs.ScheduleDate, pcs.StartTime, pcs.EndTime, pcs.IsDel, pcs.CreatedTime, pcs.UpdatedTime, pcs.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pcs.BrandID, pcs.ShopID, pcs.CoachID, pcs.ScheduleDate, pcs.StartTime, pcs.EndTime, pcs.IsDel, pcs.CreatedTime, pcs.UpdatedTime, pcs.ID)
	}
	return err
}

// Save saves the PersonalCourseSchedule to the database.
func (pcs *PersonalCourseSchedule) Save(ctx context.Context) error {
	if pcs.Exists() {
		return pcs.Update(ctx)
	}

	return pcs.Insert(ctx)
}

// Delete deletes the PersonalCourseSchedule from the database.
func (pcs *PersonalCourseSchedule) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pcs._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCourseScheduleTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pcs.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pcs.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pcs.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	pcs._deleted = true

	return nil
}

// PersonalCourseScheduleByID retrieves a row from 'saas.personal_course_schedule' as a PersonalCourseSchedule.
//
// Generated from index 'personal_course_schedule_id_pkey'.
func PersonalCourseScheduleByID(ctx context.Context, id uint, key ...interface{}) (*PersonalCourseSchedule, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getPersonalCourseScheduleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, coach_id, schedule_date, start_time, end_time, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	pcs := PersonalCourseSchedule{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&pcs.ID, &pcs.BrandID, &pcs.ShopID, &pcs.CoachID, &pcs.ScheduleDate, &pcs.StartTime, &pcs.EndTime, &pcs.IsDel, &pcs.CreatedTime, &pcs.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&pcs.ID, &pcs.BrandID, &pcs.ShopID, &pcs.CoachID, &pcs.ScheduleDate, &pcs.StartTime, &pcs.EndTime, &pcs.IsDel, &pcs.CreatedTime, &pcs.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &pcs, nil
}

// BatchInsert inserts the CardPriceSetting to the database.
func PersonalSchedulingBatchInsert(ctx context.Context, schedules []*PersonalCourseSchedule, key ...interface{}) error {
	if utils.IntZero == len(schedules) {
		return nil
	}
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCourseScheduleTableName(key...)

	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "shop_id", "coach_id", "schedule_date", "start_time", "end_time", "end_time", "created_time", "updated_time")
	createdTime := uint(time.Now().Unix())
	updateTime := uint(time.Now().Unix())
	for _, schedule := range schedules {
		sqlBuilder = sqlBuilder.Values(schedule.BrandID, schedule.ShopID, schedule.ScheduleDate,
			schedule.StartTime, schedule.EndTime, utils.NOT_DELETED, createdTime, updateTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

//更新私教排期
func EditPersonalScheduling(ctx context.Context, schedule *PersonalCourseSchedule, key ...interface{}) error {
	var dbConn *sql.DB

	tableName, err := getPersonalCourseScheduleTableName()
	if err != nil {
		return err
	}
	updateTime := uint(time.Now().Unix())
	sqlStr, args, err := squirrel.Update(tableName).SetMap(squirrel.Eq{"start_time": schedule.StartTime, "end_time": schedule.EndTime, "updated_time": updateTime}).Where(squirrel.Eq{"id": schedule.ID}).ToSql()
	if err != nil {
		return err
	}

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,edit_personal_scheduling", fmt.Sprint(sqlStr)), zap.Any("args", args))
	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlStr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlStr, args...)
		if err != nil {
			return err
		}
	}
	return nil
}
