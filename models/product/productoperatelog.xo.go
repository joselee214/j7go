// Package tpl contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"go.uber.org/zap"
	"j7go/components"
	"j7go/utils"
)

// ProductOperateLog represents a row from 'saas2.0-product.product_operate_log'.
type ProductOperateLog struct {
	ID           uint   `json:"id"`            // id
	TraceID      string `json:"trace_id"`      // trace_id
	BrandID      uint   `json:"brand_id"`      // brand_id
	ShopID       uint   `json:"shop_id"`       // shop_id
	ProductType  int8   `json:"product_type"`  // product_type
	ProductID    uint   `json:"product_id"`    // product_id
	OperatorID   uint   `json:"operator_id"`   // operator_id
	OperateTable string `json:"operate_table"` // operate_table
	OperateType  int8   `json:"operate_type"`  // operate_type
	Reason       string `json:"reason"`        // reason
	ContentOld   string `json:"content_old"`   // content_old
	ContentNew   string `json:"content_new"`   // content_new
	IsDel        int8   `json:"is_del"`        // is_del
	CreatedTime  uint   `json:"created_time"`  // created_time
	UpdatedTime  uint   `json:"updated_time"`  // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ProductOperateLog exists in the database.
func (pol *ProductOperateLog) Exists() bool { //product_operate_log
	return pol._exists
}

// Deleted provides information if the ProductOperateLog has been deleted from the database.
func (pol *ProductOperateLog) Deleted() bool {
	return pol._deleted
}

// Get table name
func GetProductOperateLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas2.0-product", "product_operate_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ProductOperateLog to the database.
func (pol *ProductOperateLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if pol._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetProductOperateLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`trace_id, brand_id, shop_id, product_type, product_id, operator_id, operate_table, operate_type, reason, content_old, content_new, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pol.TraceID, pol.BrandID, pol.ShopID, pol.ProductType, pol.ProductID, pol.OperatorID, pol.OperateTable, pol.OperateType, pol.Reason, pol.ContentOld, pol.ContentNew, pol.IsDel, pol.CreatedTime, pol.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, pol.TraceID, pol.BrandID, pol.ShopID, pol.ProductType, pol.ProductID, pol.OperatorID, pol.OperateTable, pol.OperateType, pol.Reason, pol.ContentOld, pol.ContentNew, pol.IsDel, pol.CreatedTime, pol.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, pol.TraceID, pol.BrandID, pol.ShopID, pol.ProductType, pol.ProductID, pol.OperatorID, pol.OperateTable, pol.OperateType, pol.Reason, pol.ContentOld, pol.ContentNew, pol.IsDel, pol.CreatedTime, pol.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pol.ID = uint(id)
	pol._exists = true

	return nil
}

// Update updates the ProductOperateLog in the database.
func (pol *ProductOperateLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pol._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetProductOperateLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`trace_id = ?, brand_id = ?, shop_id = ?, product_type = ?, product_id = ?, operator_id = ?, operate_table = ?, operate_type = ?, reason = ?, content_old = ?, content_new = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pol.TraceID, pol.BrandID, pol.ShopID, pol.ProductType, pol.ProductID, pol.OperatorID, pol.OperateTable, pol.OperateType, pol.Reason, pol.ContentOld, pol.ContentNew, pol.IsDel, pol.CreatedTime, pol.UpdatedTime, pol.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pol.TraceID, pol.BrandID, pol.ShopID, pol.ProductType, pol.ProductID, pol.OperatorID, pol.OperateTable, pol.OperateType, pol.Reason, pol.ContentOld, pol.ContentNew, pol.IsDel, pol.CreatedTime, pol.UpdatedTime, pol.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pol.TraceID, pol.BrandID, pol.ShopID, pol.ProductType, pol.ProductID, pol.OperatorID, pol.OperateTable, pol.OperateType, pol.Reason, pol.ContentOld, pol.ContentNew, pol.IsDel, pol.CreatedTime, pol.UpdatedTime, pol.ID)
	}
	return err
}

// Save saves the ProductOperateLog to the database.
func (pol *ProductOperateLog) Save(ctx context.Context) error {
	if pol.Exists() {
		return pol.Update(ctx)
	}

	return pol.Insert(ctx)
}

// Delete deletes the ProductOperateLog from the database.
func (pol *ProductOperateLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pol._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetProductOperateLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pol.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pol.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pol.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	pol._deleted = true

	return nil
}

// ProductOperateLogsByProductTypeProductIDOperateType retrieves a row from 'saas2.0-product.product_operate_log' as a ProductOperateLog.
//
// Generated from index 'idx_type_pro_op'.
func ProductOperateLogsByProductTypeProductIDOperateType(ctx context.Context, productType int8, productID uint, operateType int8, key ...interface{}) ([]*ProductOperateLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetProductOperateLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, trace_id, brand_id, shop_id, product_type, product_id, operator_id, operate_table, operate_type, reason, content_old, content_new, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE product_type = ? AND product_id = ? AND operate_type = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, productType, productID, operateType)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	var queryData *sql.Rows
	if tx != nil {
		queryData, err = tx.Query(sqlstr, productType, productID, operateType)
		if err != nil {
			return nil, err
		}
	} else {
		queryData, err = dbConn.Query(sqlstr, productType, productID, operateType)
		if err != nil {
			return nil, err
		}
	}
	defer queryData.Close()

	// load results
	res := make([]*ProductOperateLog, 0)
	for queryData.Next() {
		pol := ProductOperateLog{
			_exists: true,
		}

		// scan
		err = queryData.Scan(&pol.ID, &pol.TraceID, &pol.BrandID, &pol.ShopID, &pol.ProductType, &pol.ProductID, &pol.OperatorID, &pol.OperateTable, &pol.OperateType, &pol.Reason, &pol.ContentOld, &pol.ContentNew, &pol.IsDel, &pol.CreatedTime, &pol.UpdatedTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &pol)
	}

	return res, nil
}

// ProductOperateLogByID retrieves a row from 'saas2.0-product.product_operate_log' as a ProductOperateLog.
//
// Generated from index 'product_operate_log_id_pkey'.
func ProductOperateLogByID(ctx context.Context, id uint, key ...interface{}) (*ProductOperateLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetProductOperateLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, trace_id, brand_id, shop_id, product_type, product_id, operator_id, operate_table, operate_type, reason, content_old, content_new, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	pol := ProductOperateLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&pol.ID, &pol.TraceID, &pol.BrandID, &pol.ShopID, &pol.ProductType, &pol.ProductID, &pol.OperatorID, &pol.OperateTable, &pol.OperateType, &pol.Reason, &pol.ContentOld, &pol.ContentNew, &pol.IsDel, &pol.CreatedTime, &pol.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&pol.ID, &pol.TraceID, &pol.BrandID, &pol.ShopID, &pol.ProductType, &pol.ProductID, &pol.OperatorID, &pol.OperateTable, &pol.OperateType, &pol.Reason, &pol.ContentOld, &pol.ContentNew, &pol.IsDel, &pol.CreatedTime, &pol.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &pol, nil
}

func OperateLogBatchInsert(ctx context.Context, logs []*ProductOperateLog, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetProductSupportShopTableName(key...)

	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "shop_id", "product_type", "product_id", "operator_id", "operate_table", "operate_type", "reason", "content_old", "content_new", "is_del", "created_time", "updated_time")

	for _, log := range logs {
		sqlBuilder = sqlBuilder.Values(log.BrandID, log.ShopID, log.ProductType, log.ProductID, log.OperatorID, log.OperateTable, log.OperateType, log.Reason, log.ContentOld, log.ContentNew, log.IsDel, log.CreatedTime, log.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}
