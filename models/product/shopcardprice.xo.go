// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopCardPrice represents a row from 'saas.shop_card_price'.
type ShopCardPrice struct {
	ID                    uint `json:"id"`                        // id
	BrandID               uint `json:"brand_id"`                  // brand_id
	ShopID                uint `json:"shop_id"`                   // shop_id
	CardID                uint `json:"card_id"`                   //  card_id
	CardTplPriceSettingID uint `json:"card_tpl_price_setting_id"` // card_tpl_price_setting_id
	RallyPrice            uint `json:"rally_price"`               // rally_price
	IsDel                 int8 `json:"is_del"`                    // is_del
	CreatedTime           uint `json:"created_time"`              // created_time
	UpdatedTime           uint `json:"updated_time"`              // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopCardPrice exists in the database.
func (scp *ShopCardPrice) Exists() bool { //shop_card_price
	return scp._exists
}

// Deleted provides information if the ShopCardPrice has been deleted from the database.
func (scp *ShopCardPrice) Deleted() bool {
	return scp._deleted
}

// Get table name
func GetShopCardPriceTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_card_price", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopCardPrice to the database.
func (scp *ShopCardPrice) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if scp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardPriceTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, card_id, card_tpl_price_setting_id, rally_price, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scp.BrandID, scp.ShopID, scp.CardID, scp.CardTplPriceSettingID, scp.RallyPrice, scp.IsDel, scp.CreatedTime, scp.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, scp.BrandID, scp.ShopID, scp.CardID, scp.CardTplPriceSettingID, scp.RallyPrice, scp.IsDel, scp.CreatedTime, scp.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, scp.BrandID, scp.ShopID, scp.CardID, scp.CardTplPriceSettingID, scp.RallyPrice, scp.IsDel, scp.CreatedTime, scp.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	scp.ID = uint(id)
	scp._exists = true

	return nil
}

// BatchInsert inserts the ShopCardPrice to the database.
func ShopCardPriceBatchInsert(ctx context.Context, shopCardPriceList []*ShopCardPrice, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardPriceTableName(key...)
	if err != nil {
		return err
	}
	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "shop_id", "card_id", "card_tpl_price_setting_id", "rally_price", "is_del", "created_time", "updated_time")

	for _, shopCardPrice := range shopCardPriceList {
		sqlBuilder = sqlBuilder.Values(shopCardPrice.BrandID, shopCardPrice.ShopID, shopCardPrice.CardID,
			shopCardPrice.CardTplPriceSettingID, shopCardPrice.RallyPrice, shopCardPrice.IsDel, shopCardPrice.CreatedTime, shopCardPrice.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

// Update updates the ShopCardPrice in the database.
func (scp *ShopCardPrice) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardPriceTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, card_id = ?, card_tpl_price_setting_id = ?, rally_price = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scp.BrandID, scp.ShopID, scp.CardID, scp.CardTplPriceSettingID, scp.RallyPrice, scp.IsDel, scp.CreatedTime, scp.UpdatedTime, scp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scp.BrandID, scp.ShopID, scp.CardID, scp.CardTplPriceSettingID, scp.RallyPrice, scp.IsDel, scp.CreatedTime, scp.UpdatedTime, scp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scp.BrandID, scp.ShopID, scp.CardID, scp.CardTplPriceSettingID, scp.RallyPrice, scp.IsDel, scp.CreatedTime, scp.UpdatedTime, scp.ID)
	}
	return err
}

// Save saves the ShopCardPrice to the database.
func (scp *ShopCardPrice) Save(ctx context.Context) error {
	if scp.Exists() {
		return scp.Update(ctx)
	}

	return scp.Insert(ctx)
}

// Delete deletes the ShopCardPrice from the database.
func (scp *ShopCardPrice) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardPriceTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scp.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	scp._deleted = true

	return nil
}

// ShopCardPriceByID retrieves a row from 'saas.shop_card_price' as a ShopCardPrice.
//
// Generated from index 'shop_card_price_id_pkey'.
func ShopCardPriceByID(ctx context.Context, id uint, key ...interface{}) (*ShopCardPrice, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopCardPriceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, card_id, card_tpl_price_setting_id, rally_price, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	scp := ShopCardPrice{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&scp.ID, &scp.BrandID, &scp.ShopID, &scp.CardID, &scp.CardTplPriceSettingID, &scp.RallyPrice, &scp.IsDel, &scp.CreatedTime, &scp.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&scp.ID, &scp.BrandID, &scp.ShopID, &scp.CardID, &scp.CardTplPriceSettingID, &scp.RallyPrice, &scp.IsDel, &scp.CreatedTime, &scp.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &scp, nil
}

func ShopCardPriceByCpsIds(ctx context.Context, shopId uint, cpsIds []uint, key ...interface{}) ([]*ShopCardPrice, error) {
	var err error
	var dbConn *sql.DB
	var list = make([]*ShopCardPrice, 0)
	var rows *sql.Rows

	tableName, err := GetShopCardPriceTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	sqlBuilder :=
		squirrel.Select(
			"id",
			"brand_id",
			"shop_id",
			"card_id",
			"card_tpl_price_setting_id",
			"rally_price",
			"is_del",
			"created_time",
			"updated_time",
		).
			From(tableName).
			Where(squirrel.Eq{"is_del": utils.Unavailable, "card_tpl_price_setting_id": cpsIds, "shop_id": shopId})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		price := ShopCardPrice{}
		err := rows.Scan(&price.ID,
			&price.BrandID,
			&price.ShopID,
			&price.CardID,
			&price.CardTplPriceSettingID,
			&price.RallyPrice,
			&price.IsDel,
			&price.CreatedTime,
			&price.UpdatedTime,
		)

		if err != nil {
			return nil, err
		}

		list = append(list, &price)
	}

	return list, nil
}

func GetShopCardPriceByShopIdAndCardId(ctx context.Context, cardId, shopId uint, key ...interface{}) ([]*ShopCardPrice, error) {
	var err error
	var dbConn *sql.DB
	var shelfCardPriceList = make([]*ShopCardPrice, 0)
	var rows *sql.Rows

	tableName, err := GetShopCardPriceTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	sqlBuilder :=
		squirrel.Select(
			"id",
			"brand_id",
			"shop_id",
			"card_id",
			"card_tpl_price_setting_id",
			"rally_price",
			"is_del",
			"created_time",
			"updated_time").
			From(tableName).
			Where(squirrel.Eq{"is_del": utils.Unavailable, "shop_id": shopId, "card_id": cardId})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		shelfCardPrice := ShopCardPrice{}
		err := rows.Scan(&shelfCardPrice.ID,
			&shelfCardPrice.BrandID,
			&shelfCardPrice.ShopID,
			&shelfCardPrice.CardID,
			&shelfCardPrice.CardTplPriceSettingID,
			&shelfCardPrice.RallyPrice,
			&shelfCardPrice.IsDel,
			&shelfCardPrice.CreatedTime,
			&shelfCardPrice.UpdatedTime,
		)
		if err != nil {
			return nil, err
		}

		shelfCardPriceList = append(shelfCardPriceList, &shelfCardPrice)
	}

	return shelfCardPriceList, nil
}

//批量删除开
func BatchDeleteCardPrice(ctx context.Context, setIds []uint, shopId, cardId uint, prices []uint, key ...interface{}) error {
	var dbConn *sql.DB

	tableName, err := GetShopCardPriceTableName(key...)
	if err != nil {
		return err
	}

	sqlstr, args, err := squirrel.Update(tableName).Set("is_del", utils.DELETED).Where(squirrel.Eq{"shop_id": shopId, "card_id": cardId, "rally_price": prices, "card_tpl_price_setting_id": setIds}).ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,batch_delete_open_type", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}
