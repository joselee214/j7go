// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"go.7yes.com/j7f/proto/product"
	"go.uber.org/zap"
	"time"
	"j7go/components"
	"j7go/models/shop"
	"j7go/utils"
)

// ShopShelfCard represents a row from 'saas.shop_shelf_card'.
type ShopShelfCard struct {
	ID              uint `json:"id"`               // id
	BrandID         uint `json:"brand_id"`         // brand_id
	ShopID          uint `json:"shop_id"`          // shop_id
	ProductID       uint `json:"product_id"`       // product_id
	CourseInterests int8 `json:"course_interests"` // course_interests
	ProductType     int8 `json:"product_type"`     // product_type
	ShelfStatus     int8 `json:"shelf_status"`     // shelf_status
	AdmissionStatus int8 `json:"admission_status"` // admission_status
	IsDel           int8 `json:"is_del"`           // is_del
	CreatedTime     uint `json:"created_time"`     // created_time
	UpdatedTime     uint `json:"updated_time"`     // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopShelfCard exists in the database.
func (ssc *ShopShelfCard) Exists() bool { //shop_shelf_card
	return ssc._exists
}

// Deleted provides information if the ShopShelfCard has been deleted from the database.
func (ssc *ShopShelfCard) Deleted() bool {
	return ssc._deleted
}

// Get table name
func GetShopShelfCardTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_shelf_card", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopShelfCard to the database.
func (ssc *ShopShelfCard) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ssc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, product_id, course_interests, product_type, shelf_status, admission_status, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ssc.BrandID, ssc.ShopID, ssc.ProductID, ssc.CourseInterests, ssc.ProductType, ssc.ShelfStatus, ssc.AdmissionStatus, ssc.IsDel, ssc.CreatedTime, ssc.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ssc.BrandID, ssc.ShopID, ssc.ProductID, ssc.CourseInterests, ssc.ProductType, ssc.ShelfStatus, ssc.AdmissionStatus, ssc.IsDel, ssc.CreatedTime, ssc.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, ssc.BrandID, ssc.ShopID, ssc.ProductID, ssc.CourseInterests, ssc.ProductType, ssc.ShelfStatus, ssc.AdmissionStatus, ssc.IsDel, ssc.CreatedTime, ssc.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ssc.ID = uint(id)
	ssc._exists = true

	return nil
}

// BatchInsert inserts the ShopShelfCard to the database.
func ShopShelfCardBatchInsert(ctx context.Context, shopShelfCardList []*ShopShelfCard, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "shop_id", "product_id", "course_interests", "product_type", "shelf_status", "admission_status",
			"is_del", "created_time", "updated_time")

	for _, shopShelfCard := range shopShelfCardList {
		sqlBuilder = sqlBuilder.Values(shopShelfCard.BrandID, shopShelfCard.ShopID, shopShelfCard.ProductID,
			shopShelfCard.CourseInterests, shopShelfCard.ProductType, shopShelfCard.ShelfStatus, shopShelfCard.AdmissionStatus,
			shopShelfCard.IsDel, shopShelfCard.CreatedTime, shopShelfCard.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

// Update updates the ShopShelfCard in the database.
func (ssc *ShopShelfCard) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ssc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, product_id = ?, course_interests = ?, product_type = ?, shelf_status = ?, admission_status = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ssc.BrandID, ssc.ShopID, ssc.ProductID, ssc.CourseInterests, ssc.ProductType, ssc.ShelfStatus, ssc.AdmissionStatus, ssc.IsDel, ssc.CreatedTime, ssc.UpdatedTime, ssc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ssc.BrandID, ssc.ShopID, ssc.ProductID, ssc.CourseInterests, ssc.ProductType, ssc.ShelfStatus, ssc.AdmissionStatus, ssc.IsDel, ssc.CreatedTime, ssc.UpdatedTime, ssc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ssc.BrandID, ssc.ShopID, ssc.ProductID, ssc.CourseInterests, ssc.ProductType, ssc.ShelfStatus, ssc.AdmissionStatus, ssc.IsDel, ssc.CreatedTime, ssc.UpdatedTime, ssc.ID)
	}
	return err
}

// Save saves the ShopShelfCard to the database.
func (ssc *ShopShelfCard) Save(ctx context.Context) error {
	if ssc.Exists() {
		return ssc.Update(ctx)
	}

	return ssc.Insert(ctx)
}

// Delete deletes the ShopShelfCard from the database.
func (ssc *ShopShelfCard) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ssc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ssc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ssc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ssc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ssc._deleted = true

	return nil
}

// ShopShelfCardByID retrieves a row from 'saas.shop_shelf_card' as a ShopShelfCard.
//
// Generated from index 'shop_shelf_card_id_pkey'.
func ShopShelfCardByID(ctx context.Context, id uint, key ...interface{}) (*ShopShelfCard, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, product_id, course_interests, product_type, shelf_status, admission_status, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ? AND is_del = 0 `

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ssc := ShopShelfCard{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ssc.ID, &ssc.BrandID, &ssc.ShopID, &ssc.ProductID, &ssc.CourseInterests, &ssc.ProductType, &ssc.ShelfStatus, &ssc.AdmissionStatus, &ssc.IsDel, &ssc.CreatedTime, &ssc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ssc.ID, &ssc.BrandID, &ssc.ShopID, &ssc.ProductID, &ssc.CourseInterests, &ssc.ProductType, &ssc.ShelfStatus, &ssc.AdmissionStatus, &ssc.IsDel, &ssc.CreatedTime, &ssc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &ssc, nil
}

//批量上下架会员卡
func ShopShelfCardBatchDown(ctx context.Context, productId uint, productType int8, shelfStatus int8, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return err
	}
	updateTime := uint(time.Now().Unix())

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`shelf_status = ?, updated_time = ?` +
		` WHERE product_id = ? AND product_type = ? AND is_del = 0`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shelfStatus, updateTime, productId, productType)))

	if tx != nil {
		_, err = tx.Exec(sqlstr, shelfStatus, updateTime, productId, productType)
	} else {
		_, err = dbConn.Exec(sqlstr, shelfStatus, updateTime, productId, productType)
	}
	return err
}

//上下架单个门店的储值卡
func ShopShelfCardDown(ctx context.Context, productId uint, productType int8, shopId uint, shelfStatus int8, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return err
	}

	updateTime := uint(time.Now().Unix())
	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`shelf_status = ?, updated_time = ?` +
		` WHERE product_id = ? AND product_type = ? AND shop_id = ? AND is_del = 0`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shelfStatus, updateTime, productId, productType, shopId)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, shelfStatus, updateTime, productId, productType, shopId)
	} else {
		_, err = dbConn.Exec(sqlstr, shelfStatus, updateTime, productId, productType, shopId)
	}
	return err
}

func ShopShelfCardByProductId(ctx context.Context, productId uint, productType int8, key ...interface{}) ([]*ShopShelfCard, error) {
	var err error
	var dbConn *sql.DB
	var rows *sql.Rows
	list := make([]*ShopShelfCard, 0)

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return nil, err
	}

	sqlStr, args, err := squirrel.Select(
		"id",
		"brand_id",
		"shop_id",
		"product_id",
		"course_interests",
		"product_type",
		"shelf_status",
		"admission_status",
		"is_del",
		"created_time",
		"updated_time",
	).From(tableName).
		Where(squirrel.Eq{"product_id": productId, "product_type": productType, "is_del": utils.Unavailable}).
		ToSql()

	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, args)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	if tx != nil {
		rows, err = tx.Query(sqlStr, args...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, args...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		shopShelfCard := ShopShelfCard{}
		err := rows.Scan(&shopShelfCard.ID,
			&shopShelfCard.BrandID,
			&shopShelfCard.ShopID,
			&shopShelfCard.ProductID,
			&shopShelfCard.CourseInterests,
			&shopShelfCard.ProductType,
			&shopShelfCard.ShelfStatus,
			&shopShelfCard.AdmissionStatus,
			&shopShelfCard.IsDel,
			&shopShelfCard.CreatedTime,
			&shopShelfCard.UpdatedTime)
		if err != nil {
			return nil, err
		}
		list = append(list, &shopShelfCard)
	}

	return list, nil
}

//批量下架
//func BatchDownShelfCards(ctx context.Context,shopIds []uint,cardIds []uint,  key ...interface{}) error {
//	var dbConn *sql.DB
//
//	tableName, err := GetShopShelfCardTableName(key...)
//	if err != nil {
//		return err
//	}
//	args := map[string]int{
//		"is_del": utils.DELETED,
//		"update_time": int(time.Now().Unix()),
//	}
//	sqlstr, args, err := squirrel.Update(tableName).Set(args).Where(squirrel.Eq{"card_id": cardIds,"shop_id":shopIds}).ToSql()
//
//	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,batchDownShelfCards", fmt.Sprint(sqlstr)), zap.Any("args", args))
//
//	tx, err := components.M.GetConnFromCtx(ctx)
//	if err != nil {
//		dbConn, err = components.M.GetSlaveConn()
//		if err != nil {
//			return err
//		}
//	}
//
//	if tx != nil {
//		_, err := tx.Exec(sqlstr, args...)
//		if err != nil {
//			return err
//		}
//	} else {
//		_, err := dbConn.Exec(sqlstr, args...)
//		if err != nil {
//			return err
//		}
//	}
//
//	return nil
//}

func GetShopShelfCardByShopIdAndCardId(ctx context.Context, cardId, shopId uint, key ...interface{}) (*ShopShelfCard, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, product_id,course_interests,product_type,shelf_status,admission_status, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE shop_id = ? and product_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, shopId, cardId)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ssr := ShopShelfCard{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, shopId, cardId).Scan(&ssr.ID, &ssr.BrandID, &ssr.ShopID, &ssr.ProductID, &ssr.CourseInterests, &ssr.ProductType, &ssr.ShelfStatus, &ssr.AdmissionStatus, &ssr.IsDel, &ssr.CreatedTime, &ssr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, shopId, cardId).Scan(&ssr.ID, &ssr.BrandID, &ssr.ShopID, &ssr.ProductID, &ssr.CourseInterests, &ssr.ProductType, &ssr.ShelfStatus, &ssr.AdmissionStatus, &ssr.IsDel, &ssr.CreatedTime, &ssr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &ssr, nil
}

//获取商品上下架门店
func ProductOnLineShopByProductId(ctx context.Context, productId uint, productType int8, key ...interface{}) ([]*shopModel.Shop, error) {
	var err error
	var dbConn *sql.DB
	var shopList = make([]*shopModel.Shop, 0)
	var rows *sql.Rows

	shopTableName, err := shopModel.GetShopTableName(key...)
	if err != nil {
		return nil, err
	}

	shopShelfCardTableName, err := GetShopShelfCardTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	sqlBuilder :=
		squirrel.Select(
			"s.id",
			"s.brand_id",
			"s.shop_name",
			"s.address",
			"s.province_id",
			"s.city_id",
			"s.district_id",
			"s.province_name",
			"s.city_name",
			"s.district_name").
			From(shopTableName + " s").
			Join(shopShelfCardTableName + " ss on s.id = ss.shop_id").
			Where(squirrel.Eq{"ss.product_type": productType, "ss.shelf_status": product.ShelfStatus_SHELFSTATUS_UP,
				"ss.is_del": utils.NOT_DELETED, "ss.product_id": productId, "s.is_del": utils.NOT_DELETED})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		shopInfo := shopModel.Shop{}
		err := rows.Scan(&shopInfo.ID,
			&shopInfo.BrandID,
			&shopInfo.ShopName,
			&shopInfo.Address,
			&shopInfo.ProvinceID,
			&shopInfo.CityID,
			&shopInfo.DistrictID,
			&shopInfo.ProvinceName,
			&shopInfo.CityName,
			&shopInfo.DistrictName,
		)
		if err != nil {
			return nil, err
		}

		shopList = append(shopList, &shopInfo)
	}

	return shopList, nil
}
