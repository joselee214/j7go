// Package test contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// CourseCoachRelation represents a row from 'saas.course_coach_relation'.
type CourseCoachRelation struct {
	ID          uint `json:"id"`           // id
	BrandID     uint `json:"brand_id"`     // brand_id
	CourseType  int8 `json:"course_type"`  // course_type
	CourseID    uint `json:"course_id"`    // course_id
	CoachID     uint `json:"coach_id"`     // coach_id
	IsDel       int8 `json:"is_del"`       // is_del
	CreatedTime uint `json:"created_time"` // created_time
	UpdatedTime uint `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CourseCoachRelation exists in the database.
func (ccr *CourseCoachRelation) Exists() bool { //course_coach_relation
	return ccr._exists
}

// Deleted provides information if the CourseCoachRelation has been deleted from the database.
func (ccr *CourseCoachRelation) Deleted() bool {
	return ccr._deleted
}

// Get table name
func GetCourseCoachRelationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "course_coach_relation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CourseCoachRelation to the database.
func (ccr *CourseCoachRelation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if ccr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseCoachRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, course_type, course_id, coach_id, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ccr.BrandID, ccr.CourseType, ccr.CourseID, ccr.CoachID, ccr.IsDel, ccr.CreatedTime, ccr.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, ccr.BrandID, ccr.CourseType, ccr.CourseID, ccr.CoachID, ccr.IsDel, ccr.CreatedTime, ccr.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, ccr.BrandID, ccr.CourseType, ccr.CourseID, ccr.CoachID, ccr.IsDel, ccr.CreatedTime, ccr.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ccr.ID = uint(id)
	ccr._exists = true

	return nil
}

// Update updates the CourseCoachRelation in the database.
func (ccr *CourseCoachRelation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ccr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseCoachRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, course_type = ?, course_id = ?, coach_id = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ccr.BrandID, ccr.CourseType, ccr.CourseID, ccr.CoachID, ccr.IsDel, ccr.CreatedTime, ccr.UpdatedTime, ccr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ccr.BrandID, ccr.CourseType, ccr.CourseID, ccr.CoachID, ccr.IsDel, ccr.CreatedTime, ccr.UpdatedTime, ccr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ccr.BrandID, ccr.CourseType, ccr.CourseID, ccr.CoachID, ccr.IsDel, ccr.CreatedTime, ccr.UpdatedTime, ccr.ID)
	}
	return err
}

// Save saves the CourseCoachRelation to the database.
func (ccr *CourseCoachRelation) Save(ctx context.Context) error {
	if ccr.Exists() {
		return ccr.Update(ctx)
	}

	return ccr.Insert(ctx)
}

// Delete deletes the CourseCoachRelation from the database.
func (ccr *CourseCoachRelation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if ccr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseCoachRelationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, ccr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, ccr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, ccr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	ccr._deleted = true

	return nil
}

// CourseCoachRelationByID retrieves a row from 'saas.course_coach_relation' as a CourseCoachRelation.
//
// Generated from index 'course_coach_relation_id_pkey'.
func CourseCoachRelationByID(ctx context.Context, id uint, key ...interface{}) (*CourseCoachRelation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCourseCoachRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, course_type, course_id, coach_id, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	ccr := CourseCoachRelation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&ccr.ID, &ccr.BrandID, &ccr.CourseType, &ccr.CourseID, &ccr.CoachID, &ccr.IsDel, &ccr.CreatedTime, &ccr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&ccr.ID, &ccr.BrandID, &ccr.CourseType, &ccr.CourseID, &ccr.CoachID, &ccr.IsDel, &ccr.CreatedTime, &ccr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &ccr, nil
}

//根据课程ID获取所有支持教练
func CourseCoachRelationByCourseID(ctx context.Context, courseId uint, key ...interface{}) ([]*CourseCoachRelation, error) {
	var err error
	var dbConn *sql.DB
	relations := make([]*CourseCoachRelation,0)
	var rows *sql.Rows

	tableName, err := GetCourseCoachRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	sqlBuilder := squirrel.Select("id","brand_id","course_type","course_id",
		"coach_id","is_del","created_time", "updated_time").
		From(tableName).
		Where(squirrel.Eq{"course_id":courseId,"course_type":COURSE_PERSONAL,"is_del":utils.NOT_DELETED})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}
	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()
	for rows.Next() {
		courseCoachRelation := CourseCoachRelation{}
		err := rows.Scan(&courseCoachRelation.ID,&courseCoachRelation.BrandID,
			&courseCoachRelation.CourseType,&courseCoachRelation.CourseID,&courseCoachRelation.CoachID,
			&courseCoachRelation.IsDel,&courseCoachRelation.CreatedTime,&courseCoachRelation.UpdatedTime)
		if err != nil {
			return nil,err
		}
		relations = append(relations,&courseCoachRelation)
	}

	return relations, nil
}


// 批量插入课程支持教练关联关系
func CourseCoachRelationBatchInsert(ctx context.Context, coachList []*CourseCoachRelation, key ...interface{}) error {
	if utils.IntZero == len(coachList) {
		return nil
	}
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseCoachRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "course_id", "course_type", "coach_id","is_del", "created_time", "updated_time")

	for _, coach := range coachList {
		sqlBuilder = sqlBuilder.Values(coach.BrandID, coach.CourseID, coach.CourseType,
			coach.CoachID, coach.IsDel, coach.CreatedTime, coach.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

// 批量删除课程支持教练关联关系
func CourseCoachRelationBatchDelete(ctx context.Context, courseId uint, courseType int8, coachIds []uint, key ...interface{}) error {
	if utils.IntZero == len(coachIds) {
		return nil
	}
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseCoachRelationTableName(key...)
	if err != nil {
		return err
	}

	sqlBuilder := squirrel.
		Update(tableName).
		Set("is_del", utils.DELETED).
		Where(squirrel.Eq{"course_id": courseId, "course_type": courseType, "coach_id": coachIds, "is_del": utils.NOT_DELETED})

	sqlStr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlStr, args)
	} else {
		_, err = dbConn.Exec(sqlStr, args)
	}

	if err != nil {
		return err
	}

	return nil
}
