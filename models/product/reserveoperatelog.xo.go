// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ReserveOperateLog represents a row from 'saas.reserve_operate_log'.
type ReserveOperateLog struct {
	ID           uint   `json:"id"`            // id
	TraceID      string `json:"trace_id"`      // trace_id
	ShopID       uint   `json:"shop_id"`       // shop_id
	BrandID      uint   `json:"brand_id"`      // brand_id
	ReserveID    uint   `json:"reserve_id"`    // reserve_id
	ReserveType  int8   `json:"reserve_type"`  // reserve_type
	OperatorID   uint   `json:"operator_id"`   // operator_id
	OperateTable int8   `json:"operate_table"` // operate_table
	OperatorType int8   `json:"operator_type"` // operator_type
	ContentOld   string `json:"content_old"`   // content_old
	ContentNew   string `json:"content_new"`   // content_new
	IsDel        int8   `json:"is_del"`        // is_del
	CreatedTime  uint   `json:"created_time"`  // created_time
	UpdatedTime  uint   `json:"updated_time"`  // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ReserveOperateLog exists in the database.
func (rol *ReserveOperateLog) Exists() bool { //reserve_operate_log
	return rol._exists
}

// Deleted provides information if the ReserveOperateLog has been deleted from the database.
func (rol *ReserveOperateLog) Deleted() bool {
	return rol._deleted
}

// Get table name
func getReserveOperateLogTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "reserve_operate_log", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ReserveOperateLog to the database.
func (rol *ReserveOperateLog) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if rol._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getReserveOperateLogTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`trace_id, shop_id, brand_id, reserve_id, reserve_type, operator_id, operate_table, operator_type, content_old, content_new, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rol.TraceID, rol.ShopID, rol.BrandID, rol.ReserveID, rol.ReserveType, rol.OperatorID, rol.OperateTable, rol.OperatorType, rol.ContentOld, rol.ContentNew, rol.IsDel, rol.CreatedTime, rol.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, rol.TraceID, rol.ShopID, rol.BrandID, rol.ReserveID, rol.ReserveType, rol.OperatorID, rol.OperateTable, rol.OperatorType, rol.ContentOld, rol.ContentNew, rol.IsDel, rol.CreatedTime, rol.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, rol.TraceID, rol.ShopID, rol.BrandID, rol.ReserveID, rol.ReserveType, rol.OperatorID, rol.OperateTable, rol.OperatorType, rol.ContentOld, rol.ContentNew, rol.IsDel, rol.CreatedTime, rol.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	rol.ID = uint(id)
	rol._exists = true

	return nil
}

// Update updates the ReserveOperateLog in the database.
func (rol *ReserveOperateLog) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rol._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getReserveOperateLogTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`trace_id = ?, shop_id = ?, brand_id = ?, reserve_id = ?, reserve_type = ?, operator_id = ?, operate_table = ?, operator_type = ?, content_old = ?, content_new = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rol.TraceID, rol.ShopID, rol.BrandID, rol.ReserveID, rol.ReserveType, rol.OperatorID, rol.OperateTable, rol.OperatorType, rol.ContentOld, rol.ContentNew, rol.IsDel, rol.CreatedTime, rol.UpdatedTime, rol.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rol.TraceID, rol.ShopID, rol.BrandID, rol.ReserveID, rol.ReserveType, rol.OperatorID, rol.OperateTable, rol.OperatorType, rol.ContentOld, rol.ContentNew, rol.IsDel, rol.CreatedTime, rol.UpdatedTime, rol.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rol.TraceID, rol.ShopID, rol.BrandID, rol.ReserveID, rol.ReserveType, rol.OperatorID, rol.OperateTable, rol.OperatorType, rol.ContentOld, rol.ContentNew, rol.IsDel, rol.CreatedTime, rol.UpdatedTime, rol.ID)
	}
	return err
}

// Save saves the ReserveOperateLog to the database.
func (rol *ReserveOperateLog) Save(ctx context.Context) error {
	if rol.Exists() {
		return rol.Update(ctx)
	}

	return rol.Insert(ctx)
}

// Delete deletes the ReserveOperateLog from the database.
func (rol *ReserveOperateLog) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if rol._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getReserveOperateLogTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, rol.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, rol.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, rol.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	rol._deleted = true

	return nil
}

// ReserveOperateLogByID retrieves a row from 'saas.reserve_operate_log' as a ReserveOperateLog.
//
// Generated from index 'reserve_operate_log_id_pkey'.
func ReserveOperateLogByID(ctx context.Context, id uint, key ...interface{}) (*ReserveOperateLog, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getReserveOperateLogTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, trace_id, shop_id, brand_id, reserve_id, reserve_type, operator_id, operate_table, operator_type, content_old, content_new, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	rol := ReserveOperateLog{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&rol.ID, &rol.TraceID, &rol.ShopID, &rol.BrandID, &rol.ReserveID, &rol.ReserveType, &rol.OperatorID, &rol.OperateTable, &rol.OperatorType, &rol.ContentOld, &rol.ContentNew, &rol.IsDel, &rol.CreatedTime, &rol.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&rol.ID, &rol.TraceID, &rol.ShopID, &rol.BrandID, &rol.ReserveID, &rol.ReserveType, &rol.OperatorID, &rol.OperateTable, &rol.OperatorType, &rol.ContentOld, &rol.ContentNew, &rol.IsDel, &rol.CreatedTime, &rol.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &rol, nil
}
