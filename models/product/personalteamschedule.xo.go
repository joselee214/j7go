// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// PersonalTeamSchedule represents a row from 'saas.personal_team_schedule'.
type PersonalTeamSchedule struct {
	ID            uint   `json:"id"`              // id
	BrandID       uint   `json:"brand_id"`        // brand_id
	ShopID        uint   `json:"shop_id"`         // shop_id
	StartDate     uint   `json:"start_date"`      // start_date
	StartTime     uint   `json:"start_time"`      // start_time
	EndTime       uint   `json:"end_time"`        // end_time
	CourseID      uint   `json:"course_id"`       // course_id
	CourseName    string `json:"course_name"`     // course_name
	CoachID       uint   `json:"coach_id"`        // coach_id
	CheckinNum    uint   `json:"checkin_num"`     // checkin_num
	ReservedNum   uint   `json:"reserved_num"`    // reserved_num
	CanReserveNum uint   `json:"can_reserve_num"` // can_reserve_num
	BackupNum     uint   `json:"backup_num"`      // backup_num
	CoachName     string `json:"coach_name"`      // coach_name
	LimitNum      uint   `json:"limit_num"`       // limit_num
	CourseFee     uint   `json:"course_fee"`      // course_fee
	IsDel         int8   `json:"is_del"`          // is_del
	CreatedTime   uint   `json:"created_time"`    // created_time
	UpdatedTime   uint   `json:"updated_time"`    // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PersonalTeamSchedule exists in the database.
func (pts *PersonalTeamSchedule) Exists() bool { //personal_team_schedule
	return pts._exists
}

// Deleted provides information if the PersonalTeamSchedule has been deleted from the database.
func (pts *PersonalTeamSchedule) Deleted() bool {
	return pts._deleted
}

// Get table name
func getPersonalTeamScheduleTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "personal_team_schedule", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the PersonalTeamSchedule to the database.
func (pts *PersonalTeamSchedule) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if pts._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalTeamScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, brand_id, shop_id, start_date, start_time, end_time, course_id, course_name, coach_id, checkin_num, reserved_num, can_reserve_num, backup_num, coach_name, limit_num, course_fee, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pts.ID, pts.BrandID, pts.ShopID, pts.StartDate, pts.StartTime, pts.EndTime, pts.CourseID, pts.CourseName, pts.CoachID, pts.CheckinNum, pts.ReservedNum, pts.CanReserveNum, pts.BackupNum, pts.CoachName, pts.LimitNum, pts.CourseFee, pts.IsDel, pts.CreatedTime, pts.UpdatedTime)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, pts.ID, pts.BrandID, pts.ShopID, pts.StartDate, pts.StartTime, pts.EndTime, pts.CourseID, pts.CourseName, pts.CoachID, pts.CheckinNum, pts.ReservedNum, pts.CanReserveNum, pts.BackupNum, pts.CoachName, pts.LimitNum, pts.CourseFee, pts.IsDel, pts.CreatedTime, pts.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, pts.ID, pts.BrandID, pts.ShopID, pts.StartDate, pts.StartTime, pts.EndTime, pts.CourseID, pts.CourseName, pts.CoachID, pts.CheckinNum, pts.ReservedNum, pts.CanReserveNum, pts.BackupNum, pts.CoachName, pts.LimitNum, pts.CourseFee, pts.IsDel, pts.CreatedTime, pts.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// set existence
	pts._exists = true

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pts.ID = uint(id)
	pts._exists = true

	return nil
}

// Update updates the PersonalTeamSchedule in the database.
func (pts *PersonalTeamSchedule) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pts._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalTeamScheduleTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, start_date = ?, start_time = ?, end_time = ?, course_id = ?, course_name = ?, coach_id = ?, checkin_num = ?, reserved_num = ?, can_reserve_num = ?, backup_num = ?, coach_name = ?, limit_num = ?, course_fee = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pts.BrandID, pts.ShopID, pts.StartDate, pts.StartTime, pts.EndTime, pts.CourseID, pts.CourseName, pts.CoachID, pts.CheckinNum, pts.ReservedNum, pts.CanReserveNum, pts.BackupNum, pts.CoachName, pts.LimitNum, pts.CourseFee, pts.IsDel, pts.CreatedTime, pts.UpdatedTime, pts.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pts.BrandID, pts.ShopID, pts.StartDate, pts.StartTime, pts.EndTime, pts.CourseID, pts.CourseName, pts.CoachID, pts.CheckinNum, pts.ReservedNum, pts.CanReserveNum, pts.BackupNum, pts.CoachName, pts.LimitNum, pts.CourseFee, pts.IsDel, pts.CreatedTime, pts.UpdatedTime, pts.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pts.BrandID, pts.ShopID, pts.StartDate, pts.StartTime, pts.EndTime, pts.CourseID, pts.CourseName, pts.CoachID, pts.CheckinNum, pts.ReservedNum, pts.CanReserveNum, pts.BackupNum, pts.CoachName, pts.LimitNum, pts.CourseFee, pts.IsDel, pts.CreatedTime, pts.UpdatedTime, pts.ID)
	}
	return err
}

// Save saves the PersonalTeamSchedule to the database.
func (pts *PersonalTeamSchedule) Save(ctx context.Context) error {
	if pts.Exists() {
		return pts.Update(ctx)
	}

	return pts.Insert(ctx)
}

// Delete deletes the PersonalTeamSchedule from the database.
func (pts *PersonalTeamSchedule) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pts._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalTeamScheduleTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pts.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pts.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pts.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	pts._deleted = true

	return nil
}

// PersonalTeamScheduleByID retrieves a row from 'saas.personal_team_schedule' as a PersonalTeamSchedule.
//
// Generated from index 'personal_team_schedule_id_pkey'.
func PersonalTeamScheduleByID(ctx context.Context, id uint, key ...interface{}) (*PersonalTeamSchedule, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getPersonalTeamScheduleTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, start_date, start_time, end_time, course_id, course_name, coach_id, checkin_num, reserved_num, can_reserve_num, backup_num, coach_name, limit_num, course_fee, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	pts := PersonalTeamSchedule{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&pts.ID, &pts.BrandID, &pts.ShopID, &pts.StartDate, &pts.StartTime, &pts.EndTime, &pts.CourseID, &pts.CourseName, &pts.CoachID, &pts.CheckinNum, &pts.ReservedNum, &pts.CanReserveNum, &pts.BackupNum, &pts.CoachName, &pts.LimitNum, &pts.CourseFee, &pts.IsDel, &pts.CreatedTime, &pts.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&pts.ID, &pts.BrandID, &pts.ShopID, &pts.StartDate, &pts.StartTime, &pts.EndTime, &pts.CourseID, &pts.CourseName, &pts.CoachID, &pts.CheckinNum, &pts.ReservedNum, &pts.CanReserveNum, &pts.BackupNum, &pts.CoachName, &pts.LimitNum, &pts.CourseFee, &pts.IsDel, &pts.CreatedTime, &pts.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &pts, nil
}
