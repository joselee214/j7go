// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"go.uber.org/zap"
	"j7go/components"
	"j7go/utils"
)

// DepositCardConsumer represents a row from 'saas.deposit_card_consumer'.
type DepositCardConsumer struct {
	ID           uint `json:"id"`            // id
	BrandID      uint `json:"brand_id"`      // brand_id
	CardID       uint `json:"card_id"`       // card_id
	ConsumerType int8 `json:"consumer_type"` // consumer_type
	IsDel        int8 `json:"is_del"`        // is_del
	CreatedTime  uint `json:"created_time"`  // created_time
	UpdatedTime  uint `json:"updated_time"`  // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DepositCardConsumer exists in the database.
func (dcc *DepositCardConsumer) Exists() bool { //deposit_card_consumer
	return dcc._exists
}

// Deleted provides information if the DepositCardConsumer has been deleted from the database.
func (dcc *DepositCardConsumer) Deleted() bool {
	return dcc._deleted
}

// Get table name
func getDepositCardConsumerTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "deposit_card_consumer", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the DepositCardConsumer to the database.
func (dcc *DepositCardConsumer) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if dcc._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getDepositCardConsumerTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, card_id, consumer_type, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dcc.BrandID, dcc.CardID, dcc.ConsumerType, dcc.IsDel, dcc.CreatedTime, dcc.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, dcc.BrandID, dcc.CardID, dcc.ConsumerType, dcc.IsDel, dcc.CreatedTime, dcc.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, dcc.BrandID, dcc.CardID, dcc.ConsumerType, dcc.IsDel, dcc.CreatedTime, dcc.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	dcc.ID = uint(id)
	dcc._exists = true

	return nil
}

// Update updates the DepositCardConsumer in the database.
func (dcc *DepositCardConsumer) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dcc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getDepositCardConsumerTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, card_id = ?, consumer_type = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dcc.BrandID, dcc.CardID, dcc.ConsumerType, dcc.IsDel, dcc.CreatedTime, dcc.UpdatedTime, dcc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dcc.BrandID, dcc.CardID, dcc.ConsumerType, dcc.IsDel, dcc.CreatedTime, dcc.UpdatedTime, dcc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dcc.BrandID, dcc.CardID, dcc.ConsumerType, dcc.IsDel, dcc.CreatedTime, dcc.UpdatedTime, dcc.ID)
	}
	return err
}

// Save saves the DepositCardConsumer to the database.
func (dcc *DepositCardConsumer) Save(ctx context.Context) error {
	if dcc.Exists() {
		return dcc.Update(ctx)
	}

	return dcc.Insert(ctx)
}

// Delete deletes the DepositCardConsumer from the database.
func (dcc *DepositCardConsumer) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if dcc._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getDepositCardConsumerTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, dcc.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, dcc.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, dcc.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	dcc._deleted = true

	return nil
}

// DepositCardConsumerByID retrieves a row from 'saas.deposit_card_consumer' as a DepositCardConsumer.
//
// Generated from index 'deposit_card_consumer_id_pkey'.
func DepositCardConsumerByID(ctx context.Context, id uint, key ...interface{}) (*DepositCardConsumer, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getDepositCardConsumerTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, card_id, consumer_type, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	dcc := DepositCardConsumer{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&dcc.ID, &dcc.BrandID, &dcc.CardID, &dcc.ConsumerType, &dcc.IsDel, &dcc.CreatedTime, &dcc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&dcc.ID, &dcc.BrandID, &dcc.CardID, &dcc.ConsumerType, &dcc.IsDel, &dcc.CreatedTime, &dcc.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &dcc, nil
}

func DepositCardConsumerBatchInsert(ctx context.Context, consumers []*DepositCardConsumer, key ...interface{}) error {

	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getDepositCardConsumerTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "card_id", "consumer_type", "is_del", "created_time", "updated_time")

	for _, comsumer := range consumers {
		sqlBuilder = sqlBuilder.Values(comsumer.BrandID, comsumer.CardID,
			comsumer.ConsumerType, comsumer.IsDel, comsumer.CreatedTime, comsumer.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

func DeportConsumerDeleteByCardId(ctx context.Context, cardId uint, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getDepositCardConsumerTableName(key...)
	if err != nil {
		return err
	}

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE card_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cardId)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cardId)
	} else {
		_, err = dbConn.Exec(sqlstr, cardId)
	}

	if err != nil {
		return err
	}

	return nil
}

func DepositCardConsumerByCardId(ctx context.Context, cardId uint, key ...interface{}) ([]*DepositCardConsumer, error) {
	var err error
	var dbConn *sql.DB
	var consumerList = make([]*DepositCardConsumer, 0)
	var rows *sql.Rows

	tableName, err := getDepositCardConsumerTableName(key...)
	if err != nil {
		return nil, err
	}

	sqlBuilder :=
		squirrel.Select(
			"id",
			"consumer_type").
			From(tableName).
			Where(squirrel.Eq{"card_id": cardId, "is_del": utils.NOT_DELETED})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		consumer := DepositCardConsumer{}
		err := rows.Scan(
			&consumer.ID,
			&consumer.ConsumerType,
		)
		if err != nil {
			return nil, err
		}

		consumerList = append(consumerList, &consumer)
	}

	return consumerList, nil
}
