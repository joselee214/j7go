// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// PersonalCoursePrice represents a row from 'saas.personal_course_price'.
type PersonalCoursePrice struct {
	ID            uint `json:"id"`              // id
	BrandID       uint `json:"brand_id"`        // brand_id
	ShopID        uint `json:"shop_id"`         // shop_id
	CourseID      uint `json:"course_id"`       // course_id
	CoachLevelID  uint `json:"coach_level_id"`  // coach_level_id
	SellStepStart uint `json:"sell_step_start"` // sell_step_start
	SellStepEnd   uint `json:"sell_step_end"`   // sell_step_end
	SellPrice     uint `json:"sell_price"`      // sell_price
	TransferType  int8 `json:"transfer_type"`   // transfer_type
	TransferNum   uint `json:"transfer_num"`    // transfer_num
	IsOnlineSale  int8 `json:"is_online_sale"`  // is_online_sale
	IsDel         int8 `json:"is_del"`          // is_del
	CreatedTime   uint `json:"created_time"`    // created_time
	UpdatedTime   uint `json:"updated_time"`    // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PersonalCoursePrice exists in the database.
func (pcp *PersonalCoursePrice) Exists() bool { //personal_course_price
	return pcp._exists
}

// Deleted provides information if the PersonalCoursePrice has been deleted from the database.
func (pcp *PersonalCoursePrice) Deleted() bool {
	return pcp._deleted
}

// Get table name
func getPersonalCoursePriceTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "personal_course_price", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the PersonalCoursePrice to the database.
func (pcp *PersonalCoursePrice) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if pcp._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCoursePriceTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, brand_id, shop_id, course_id, coach_level_id, sell_step_start, sell_step_end, sell_price, transfer_type, transfer_num, is_online_sale, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pcp.ID, pcp.BrandID, pcp.ShopID, pcp.CourseID, pcp.CoachLevelID, pcp.SellStepStart, pcp.SellStepEnd, pcp.SellPrice, pcp.TransferType, pcp.TransferNum, pcp.IsOnlineSale, pcp.IsDel, pcp.CreatedTime, pcp.UpdatedTime)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, pcp.ID, pcp.BrandID, pcp.ShopID, pcp.CourseID, pcp.CoachLevelID, pcp.SellStepStart, pcp.SellStepEnd, pcp.SellPrice, pcp.TransferType, pcp.TransferNum, pcp.IsOnlineSale, pcp.IsDel, pcp.CreatedTime, pcp.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, pcp.ID, pcp.BrandID, pcp.ShopID, pcp.CourseID, pcp.CoachLevelID, pcp.SellStepStart, pcp.SellStepEnd, pcp.SellPrice, pcp.TransferType, pcp.TransferNum, pcp.IsOnlineSale, pcp.IsDel, pcp.CreatedTime, pcp.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// set existence
	pcp._exists = true

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pcp.ID = uint(id)
	pcp._exists = true

	return nil
}

// Update updates the PersonalCoursePrice in the database.
func (pcp *PersonalCoursePrice) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pcp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCoursePriceTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, course_id = ?, coach_level_id = ?, sell_step_start = ?, sell_step_end = ?, sell_price = ?, transfer_type = ?, transfer_num = ?, is_online_sale = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pcp.BrandID, pcp.ShopID, pcp.CourseID, pcp.CoachLevelID, pcp.SellStepStart, pcp.SellStepEnd, pcp.SellPrice, pcp.TransferType, pcp.TransferNum, pcp.IsOnlineSale, pcp.IsDel, pcp.CreatedTime, pcp.UpdatedTime, pcp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pcp.BrandID, pcp.ShopID, pcp.CourseID, pcp.CoachLevelID, pcp.SellStepStart, pcp.SellStepEnd, pcp.SellPrice, pcp.TransferType, pcp.TransferNum, pcp.IsOnlineSale, pcp.IsDel, pcp.CreatedTime, pcp.UpdatedTime, pcp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pcp.BrandID, pcp.ShopID, pcp.CourseID, pcp.CoachLevelID, pcp.SellStepStart, pcp.SellStepEnd, pcp.SellPrice, pcp.TransferType, pcp.TransferNum, pcp.IsOnlineSale, pcp.IsDel, pcp.CreatedTime, pcp.UpdatedTime, pcp.ID)
	}
	return err
}

// Save saves the PersonalCoursePrice to the database.
func (pcp *PersonalCoursePrice) Save(ctx context.Context) error {
	if pcp.Exists() {
		return pcp.Update(ctx)
	}

	return pcp.Insert(ctx)
}

// Delete deletes the PersonalCoursePrice from the database.
func (pcp *PersonalCoursePrice) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pcp._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCoursePriceTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pcp.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pcp.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pcp.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	pcp._deleted = true

	return nil
}

// PersonalCoursePriceByID retrieves a row from 'saas.personal_course_price' as a PersonalCoursePrice.
//
// Generated from index 'personal_course_price_id_pkey'.
func PersonalCoursePriceByID(ctx context.Context, id uint, key ...interface{}) (*PersonalCoursePrice, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getPersonalCoursePriceTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, course_id, coach_level_id, sell_step_start, sell_step_end, sell_price, transfer_type, transfer_num, is_online_sale, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	pcp := PersonalCoursePrice{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&pcp.ID, &pcp.BrandID, &pcp.ShopID, &pcp.CourseID, &pcp.CoachLevelID, &pcp.SellStepStart, &pcp.SellStepEnd, &pcp.SellPrice, &pcp.TransferType, &pcp.TransferNum, &pcp.IsOnlineSale, &pcp.IsDel, &pcp.CreatedTime, &pcp.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&pcp.ID, &pcp.BrandID, &pcp.ShopID, &pcp.CourseID, &pcp.CoachLevelID, &pcp.SellStepStart, &pcp.SellStepEnd, &pcp.SellPrice, &pcp.TransferType, &pcp.TransferNum, &pcp.IsOnlineSale, &pcp.IsDel, &pcp.CreatedTime, &pcp.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &pcp, nil
}

//根据ID获取课程所有售价
func PersonalCoursePriceByCourseId(ctx context.Context, courseId uint, key ...interface{}) ([]*PersonalCoursePrice, error) {
	var err error
	var dbConn *sql.DB
	var rows *sql.Rows
	currentCoursePrices := make([]*PersonalCoursePrice,0)

	tableName, err := getPersonalCoursePriceTableName(key...)
	if err != nil {
		return nil, err
	}

	sqlBuilder :=
		squirrel.Select("id","brand_id","shop_id","course_id","coach_level_id",
			"sell_step_start","sell_step_end","sell_price","transfer_type","transfer_num",
			"is_online_sale","is_del","created_time","updated_time").
			From(tableName ).
			Where(squirrel.Eq{"course_id": courseId,"is_del": utils.NOT_DELETED})
	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr,arg)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil {
			return nil, err
		}
	}

	defer rows.Close()
	for rows.Next() {
		price := PersonalCoursePrice{_exists: true,}
		err := rows.Scan(&price.ID,&price.BrandID,&price.ShopID,&price.CourseID,
			&price.CoachLevelID,&price.SellStepStart,&price.SellStepEnd,&price.SellPrice,
			&price.TransferType,&price.TransferNum,&price.IsOnlineSale, &price.IsDel,
			&price.CreatedTime,&price.UpdatedTime)
		if err != nil {
			return nil,err
		}

		currentCoursePrices = append(currentCoursePrices,&price)
	}

	return currentCoursePrices, nil
}

//批量删除课程价格
func PersonalCoursePriceBatchDelete(ctx context.Context, deleteIds []uint, key ...interface{}) error {
	if utils.IntZero == len(deleteIds) {
		return nil
	}
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCoursePriceTableName(key...)
	if err != nil {
		return err
	}

	sqlBuilder := squirrel.
		Update(tableName).
		Set("is_del", utils.DELETED).
		Where(squirrel.Eq{"id": deleteIds, "is_del": utils.NOT_DELETED})

	sqlStr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlStr, args...)
	} else {
		_, err = dbConn.Exec(sqlStr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

//批量新增课程价格
func PersonalCoursePriceBatchInsert(ctx context.Context, prices []*PersonalCoursePrice, key ...interface{}) error {
	if utils.IntZero == len(prices) {
		return nil
	}
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCoursePriceTableName(key...)

	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("id","brand_id","shop_id","course_id","coach_level_id",
		"sell_step_start","sell_step_end","sell_price","transfer_type","transfer_num",
		"is_online_sale","is_del","created_time","updated_time")

	for _, price := range prices {
		sqlBuilder = sqlBuilder.Values(price.ID,price.BrandID,price.ShopID,price.CourseID,
			price.CoachLevelID,price.SellStepStart,price.SellStepEnd,price.SellPrice,
			price.TransferType,price.TransferNum,price.IsOnlineSale, price.IsDel,
			price.CreatedTime,price.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

//根据课程ID删除所有课程售价
func DeleteAllPriceByCourseId(ctx context.Context,courseId uint, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getPersonalCoursePriceTableName(key...)
	if err != nil {
		return err
	}

	sqlBuilder := squirrel.
		Update(tableName).
		Set("is_del", utils.DELETED).
		Where(squirrel.Eq{"course_id": courseId,  "is_del": utils.NOT_DELETED})

	sqlStr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlStr, args)
	} else {
		_, err = dbConn.Exec(sqlStr, args)
	}

	if err != nil {
		return err
	}

	return nil
}