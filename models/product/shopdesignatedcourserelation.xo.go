// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopDesignatedCourseRelation represents a row from 'saas.shop_designated_course_relation'.
type ShopDesignatedCourseRelation struct {
	ID          uint   `json:"id"`           // id
	BrandID     uint   `json:"brand_id"`     // brand_id
	ShopID      uint   `json:"shop_id"`      // shop_id
	CardID      uint   `json:"card_id"`      // card_id
	CourseID    uint   `json:"course_id"`    // course_id
	CourseType  int8   `json:"course_type"`  // course_type
	CourseName  string `json:"course_name"`  // course_name
	IsDel       int8   `json:"is_del"`       // is_del
	CreatedTime uint   `json:"created_time"` // created_time
	UpdatedTime uint   `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopDesignatedCourseRelation exists in the database.
func (sdcr *ShopDesignatedCourseRelation) Exists() bool { //shop_designated_course_relation
	return sdcr._exists
}

// Deleted provides information if the ShopDesignatedCourseRelation has been deleted from the database.
func (sdcr *ShopDesignatedCourseRelation) Deleted() bool {
	return sdcr._deleted
}

// Get table name
func getShopDesignatedCourseRelationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_designated_course_relation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopDesignatedCourseRelation to the database.
func (sdcr *ShopDesignatedCourseRelation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sdcr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopDesignatedCourseRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, card_id, course_id, course_type, course_name, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sdcr.BrandID, sdcr.ShopID, sdcr.CardID, sdcr.CourseID, sdcr.CourseType, sdcr.CourseName, sdcr.IsDel, sdcr.CreatedTime, sdcr.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sdcr.BrandID, sdcr.ShopID, sdcr.CardID, sdcr.CourseID, sdcr.CourseType, sdcr.CourseName, sdcr.IsDel, sdcr.CreatedTime, sdcr.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, sdcr.BrandID, sdcr.ShopID, sdcr.CardID, sdcr.CourseID, sdcr.CourseType, sdcr.CourseName, sdcr.IsDel, sdcr.CreatedTime, sdcr.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sdcr.ID = uint(id)
	sdcr._exists = true

	return nil
}

// Update updates the ShopDesignatedCourseRelation in the database.
func (sdcr *ShopDesignatedCourseRelation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sdcr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopDesignatedCourseRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, card_id = ?, course_id = ?, course_type = ?, course_name = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sdcr.BrandID, sdcr.ShopID, sdcr.CardID, sdcr.CourseID, sdcr.CourseType, sdcr.CourseName, sdcr.IsDel, sdcr.CreatedTime, sdcr.UpdatedTime, sdcr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sdcr.BrandID, sdcr.ShopID, sdcr.CardID, sdcr.CourseID, sdcr.CourseType, sdcr.CourseName, sdcr.IsDel, sdcr.CreatedTime, sdcr.UpdatedTime, sdcr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sdcr.BrandID, sdcr.ShopID, sdcr.CardID, sdcr.CourseID, sdcr.CourseType, sdcr.CourseName, sdcr.IsDel, sdcr.CreatedTime, sdcr.UpdatedTime, sdcr.ID)
	}
	return err
}

// Save saves the ShopDesignatedCourseRelation to the database.
func (sdcr *ShopDesignatedCourseRelation) Save(ctx context.Context) error {
	if sdcr.Exists() {
		return sdcr.Update(ctx)
	}

	return sdcr.Insert(ctx)
}

// Delete deletes the ShopDesignatedCourseRelation from the database.
func (sdcr *ShopDesignatedCourseRelation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sdcr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopDesignatedCourseRelationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sdcr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sdcr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sdcr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sdcr._deleted = true

	return nil
}

// ShopDesignatedCourseRelationByID retrieves a row from 'saas.shop_designated_course_relation' as a ShopDesignatedCourseRelation.
//
// Generated from index 'shop_designated_course_relation_id_pkey'.
func ShopDesignatedCourseRelationByID(ctx context.Context, id uint, key ...interface{}) (*ShopDesignatedCourseRelation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getShopDesignatedCourseRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, card_id, course_id, course_type, course_name, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sdcr := ShopDesignatedCourseRelation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sdcr.ID, &sdcr.BrandID, &sdcr.ShopID, &sdcr.CardID, &sdcr.CourseID, &sdcr.CourseType, &sdcr.CourseName, &sdcr.IsDel, &sdcr.CreatedTime, &sdcr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sdcr.ID, &sdcr.BrandID, &sdcr.ShopID, &sdcr.CardID, &sdcr.CourseID, &sdcr.CourseType, &sdcr.CourseName, &sdcr.IsDel, &sdcr.CreatedTime, &sdcr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &sdcr, nil
}
