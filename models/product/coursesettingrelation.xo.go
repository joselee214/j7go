// Package tmp contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
	"github.com/Masterminds/squirrel"
	"time"
)

// CourseSettingRelation represents a row from 'saas.course_setting_relation'.
type CourseSettingRelation struct {
	ID          uint `json:"id"`           // id
	SettingID   uint `json:"setting_id"`   // setting_id
	CourseID    uint `json:"course_id"`    // course_id
	CourseType  int8 `json:"course_type"`  // course_type
	IsDel       int8 `json:"is_del"`       // is_del
	CreatedTime uint `json:"created_time"` // created_time
	UpdatedTime uint `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CourseSettingRelation exists in the database.
func (csr *CourseSettingRelation) Exists() bool { //course_setting_relation
	return csr._exists
}

// Deleted provides information if the CourseSettingRelation has been deleted from the database.
func (csr *CourseSettingRelation) Deleted() bool {
	return csr._deleted
}

// Get table name
func GetCourseSettingRelationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "course_setting_relation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CourseSettingRelation to the database.
func (csr *CourseSettingRelation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if csr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseSettingRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`setting_id, course_id, course_type, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, csr.SettingID, csr.CourseID, csr.CourseType, csr.IsDel, csr.CreatedTime, csr.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, csr.SettingID, csr.CourseID, csr.CourseType, csr.IsDel, csr.CreatedTime, csr.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, csr.SettingID, csr.CourseID, csr.CourseType, csr.IsDel, csr.CreatedTime, csr.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	csr.ID = uint(id)
	csr._exists = true

	return nil
}

// Update updates the CourseSettingRelation in the database.
func (csr *CourseSettingRelation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if csr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseSettingRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`setting_id = ?, course_id = ?, course_type = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, csr.SettingID, csr.CourseID, csr.CourseType, csr.IsDel, csr.CreatedTime, csr.UpdatedTime, csr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, csr.SettingID, csr.CourseID, csr.CourseType, csr.IsDel, csr.CreatedTime, csr.UpdatedTime, csr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, csr.SettingID, csr.CourseID, csr.CourseType, csr.IsDel, csr.CreatedTime, csr.UpdatedTime, csr.ID)
	}
	return err
}

// Save saves the CourseSettingRelation to the database.
func (csr *CourseSettingRelation) Save(ctx context.Context) error {
	if csr.Exists() {
		return csr.Update(ctx)
	}

	return csr.Insert(ctx)
}

// Delete deletes the CourseSettingRelation from the database.
func (csr *CourseSettingRelation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if csr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseSettingRelationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, csr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, csr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, csr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	csr._deleted = true

	return nil
}

// CourseSettingRelationByID retrieves a row from 'saas.course_setting_relation' as a CourseSettingRelation.
//
// Generated from index 'course_setting_relation_id_pkey'.
func CourseSettingRelationByID(ctx context.Context, id uint, key ...interface{}) (*CourseSettingRelation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCourseSettingRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, setting_id, course_id, course_type, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	csr := CourseSettingRelation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&csr.ID, &csr.SettingID, &csr.CourseID, &csr.CourseType, &csr.IsDel, &csr.CreatedTime, &csr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&csr.ID, &csr.SettingID, &csr.CourseID, &csr.CourseType, &csr.IsDel, &csr.CreatedTime, &csr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &csr, nil
}

func GetCourseTrainAimsById(ctx context.Context, courseId uint, courseType int8, key ...interface{}) ([]*CourseSettingRelation, error) {
	var err error
	var dbConn *sql.DB
	var aims = make([]*CourseSettingRelation, 0)
	var rows *sql.Rows

	tableName, err := GetCourseSettingRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	sqlStr,args,err := squirrel.Select(
		"id",
		"setting_id",
		"course_id",
		"course_type",
		"is_del",
		"created_time",
		"updated_time",
	).From(tableName).Where(squirrel.Eq{
		"course_id": courseId,
		"course_type": courseType,
		"is_del": utils.NOT_DELETED,
	}).ToSql()

	if err != nil {
		return nil, err
	}

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, args)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, args...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, args...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		courseSetting := CourseSettingRelation{
			_exists:true,
		}
		err := rows.Scan(
			&courseSetting.ID,
			&courseSetting.SettingID,
			&courseSetting.CourseID,
			&courseSetting.CourseType,
			&courseSetting.IsDel,
			&courseSetting.CreatedTime,
			&courseSetting.UpdatedTime,
		)
		if err != nil {
			return nil, err
		}
		aims = append(aims, &courseSetting)
	}

	return aims, nil
}

//批量删除课程训练目标
func CourseSettingRelationBatchDelete(ctx context.Context, courseId uint, courseType int8, settingIds []uint, key ...interface{}) error {
	if utils.IntZero == len(settingIds) {
		return nil
	}
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseSettingRelationTableName(key...)
	if err != nil {
		return err
	}

	sqlStr, args, err := squirrel.Update(tableName).
		Set("is_del", utils.DELETED).
		Where(squirrel.Eq{
			"course_id": courseId,
			"course_type": courseType,
			"setting_id": settingIds,
	}).ToSql()

	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlStr, args...)
	} else {
		_, err = dbConn.Exec(sqlStr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

//批量新境课程训练目标
func CourseSettingRelationBatchInsert(ctx context.Context, courseId uint, courseType int8, settingIds []uint32, key ...interface{}) error {
	if utils.IntZero == len(settingIds) {
		return nil
	}
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCourseSettingRelationTableName(key...)
	if err != nil {
		return err
	}

	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("setting_id", "course_id", "course_type", "created_time", "updated_time")

	nowTime := time.Now().Unix()

	for _, settingId := range settingIds{
		sqlBuilder = sqlBuilder.Values(settingId, courseId, courseType, nowTime, nowTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr)), zap.Any("args", args))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}