// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopCardAdmissionTime represents a row from 'saas.shop_card_admission_time'.
type ShopCardAdmissionTime struct {
	ID          uint `json:"id"`           // id
	BrandID     uint `json:"brand_id"`     // brand_id
	ShopID      uint `json:"shop_id"`      // shop_id
	CardID      uint `json:"card_id"`      // self_card_id
	WeekDay     int8 `json:"week_day"`     // week_day
	StartTime   uint `json:"start_time"`   // start_time
	EndTime     uint `json:"end_time"`     // end_time
	IsDel       int8 `json:"is_del"`       // is_del
	CreatedTime uint `json:"created_time"` // created_time
	UpdatedTime uint `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopCardAdmissionTime exists in the database.
func (scat *ShopCardAdmissionTime) Exists() bool { //shop_card_admission_time
	return scat._exists
}

// Deleted provides information if the ShopCardAdmissionTime has been deleted from the database.
func (scat *ShopCardAdmissionTime) Deleted() bool {
	return scat._deleted
}

// Get table name
func GetShopCardAdmissionTimeTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_card_admission_time", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopCardAdmissionTime to the database.
func (scat *ShopCardAdmissionTime) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if scat._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardAdmissionTimeTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id,card_id, week_day, start_time, end_time, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scat.BrandID, scat.ShopID, scat.CardID, scat.WeekDay, scat.StartTime, scat.EndTime, scat.IsDel, scat.CreatedTime, scat.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, scat.BrandID, scat.ShopID, scat.CardID, scat.WeekDay, scat.StartTime, scat.EndTime, scat.IsDel, scat.CreatedTime, scat.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, scat.BrandID, scat.ShopID, scat.CardID, scat.WeekDay, scat.StartTime, scat.EndTime, scat.IsDel, scat.CreatedTime, scat.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	scat.ID = uint(id)
	scat._exists = true

	return nil
}

// BatchInsert inserts the ShopCardAdmissionTime to the database.
func ShopCardAdmissionTimeBatchInsert(ctx context.Context, shopCardAdmissionTimeList []*ShopCardAdmissionTime, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardAdmissionTimeTableName(key...)
	if err != nil {
		return err
	}
	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "shop_id", "card_id", "week_day", "start_time", "end_time", "is_del", "created_time", "updated_time")

	for _, shopCardAdmissionTime := range shopCardAdmissionTimeList {
		sqlBuilder = sqlBuilder.Values(shopCardAdmissionTime.BrandID, shopCardAdmissionTime.ShopID, shopCardAdmissionTime.CardID,
			shopCardAdmissionTime.WeekDay, shopCardAdmissionTime.StartTime, shopCardAdmissionTime.EndTime, shopCardAdmissionTime.IsDel, shopCardAdmissionTime.CreatedTime, shopCardAdmissionTime.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

// Update updates the ShopCardAdmissionTime in the database.
func (scat *ShopCardAdmissionTime) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scat._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardAdmissionTimeTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, card_id = ?, week_day = ?, start_time = ?, end_time = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scat.BrandID, scat.ShopID, scat.CardID, scat.WeekDay, scat.StartTime, scat.EndTime, scat.IsDel, scat.CreatedTime, scat.UpdatedTime, scat.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scat.BrandID, scat.ShopID, scat.CardID, scat.WeekDay, scat.StartTime, scat.EndTime, scat.IsDel, scat.CreatedTime, scat.UpdatedTime, scat.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scat.BrandID, scat.ShopID, scat.CardID, scat.WeekDay, scat.StartTime, scat.EndTime, scat.IsDel, scat.CreatedTime, scat.UpdatedTime, scat.ID)
	}
	return err
}

// Save saves the ShopCardAdmissionTime to the database.
func (scat *ShopCardAdmissionTime) Save(ctx context.Context) error {
	if scat.Exists() {
		return scat.Update(ctx)
	}

	return scat.Insert(ctx)
}

// Delete deletes the ShopCardAdmissionTime from the database.
func (scat *ShopCardAdmissionTime) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scat._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardAdmissionTimeTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scat.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scat.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scat.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	scat._deleted = true

	return nil
}

// ShopCardAdmissionTimeByID retrieves a row from 'saas.shop_card_admission_time' as a ShopCardAdmissionTime.
//
// Generated from index 'shop_card_admission_time_id_pkey'.
func ShopCardAdmissionTimeByID(ctx context.Context, id uint, key ...interface{}) (*ShopCardAdmissionTime, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopCardAdmissionTimeTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, self_card_id, week_day, start_time, end_time, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	scat := ShopCardAdmissionTime{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&scat.ID, &scat.BrandID, &scat.ShopID, &scat.CardID, &scat.WeekDay, &scat.StartTime, &scat.EndTime, &scat.IsDel, &scat.CreatedTime, &scat.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&scat.ID, &scat.BrandID, &scat.ShopID, &scat.CardID, &scat.WeekDay, &scat.StartTime, &scat.EndTime, &scat.IsDel, &scat.CreatedTime, &scat.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &scat, nil
}

func GetShopCardAdmissionTimeByShopIdAndCardId(ctx context.Context, cardId uint, shopId uint, key ...interface{}) ([]*ShopCardAdmissionTime, error) {
	var err error
	var dbConn *sql.DB
	var admissionTimeList = make([]*ShopCardAdmissionTime, 0)
	var rows *sql.Rows

	tableName, err := GetShopCardAdmissionTimeTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	sqlBuilder :=
		squirrel.Select(
			"id",
			"brand_id",
			"shop_id",
			"card_id",
			"week_day",
			"start_time",
			"end_time",
			"is_del",
			"created_time",
			"updated_time").
			From(tableName).
			Where(squirrel.Eq{"is_del": utils.Unavailable, "shop_id": shopId, "card_id": cardId})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		admissionTime := ShopCardAdmissionTime{}
		err := rows.Scan(&admissionTime.ID,
			&admissionTime.BrandID,
			&admissionTime.ShopID,
			&admissionTime.CardID,
			&admissionTime.WeekDay,
			&admissionTime.StartTime,
			&admissionTime.EndTime,
			&admissionTime.IsDel,
			&admissionTime.CreatedTime,
			&admissionTime.UpdatedTime,
		)
		if err != nil {
			return nil, err
		}

		admissionTimeList = append(admissionTimeList, &admissionTime)
	}

	return admissionTimeList, nil
}
