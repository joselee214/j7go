// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// TeamCourseReserve represents a row from 'saas.team_course_reserve'.
type TeamCourseReserve struct {
	ID                    uint   `json:"id"`                      // id
	BrandID               uint   `json:"brand_id"`                // brand_id
	ShopID                uint   `json:"shop_id"`                 // shop_id
	CoachID               uint   `json:"coach_id"`                // coach_id
	CoachName             string `json:"coach_name"`              // coach_name
	ScheduleID            uint   `json:"schedule_id"`             // schedule_id
	CourseID              uint   `json:"course_id"`               // course_id
	MemberID              uint   `json:"member_id"`               // member_id
	CardID                uint   `json:"card_id"`                 // card_id
	CardType              int8   `json:"card_type"`               // card_type
	CoursePackageID       uint   `json:"course_package_id"`       // course_package_id
	CourseName            string `json:"course_name"`             // course_name
	ConsumeName           string `json:"consume_name"`            // consume_name
	CourtID               uint   `json:"court_id"`                // court_id
	CourtName             string `json:"court_name"`              // court_name
	CourtSiteID           uint   `json:"court_site_id"`           // court_site_id
	CourtSiteName         string `json:"court_site_name"`         // court_site_name
	LimitNum              uint   `json:"limit_num"`               // limit_num
	ConsumeUnit           uint   `json:"consume_unit"`            // consume_unit
	ConsumeUnitNum        uint   `json:"consume_unit_num"`        // consume_unit_num
	CurrentReservationNum uint   `json:"current_reservation_num"` // current_reservation_num
	IsGroupBuy            int8   `json:"is_group_buy"`            // is_group_buy
	IsWaiting             int8   `json:"is_waiting"`              // is_waiting
	ReserveStatus         int8   `json:"reserve_status"`          // reserve_status
	ReserveWay            int8   `json:"reserve_way"`             // reserve_way
	IsCheckin             int8   `json:"is_checkin"`              // is_checkin
	CheckinWay            int8   `json:"checkin_way"`             // checkin_way
	ReserveID             uint   `json:"reserve_id"`              // reserve_id
	CheckinID             uint   `json:"checkin_id"`              // checkin_id
	CheckinTime           uint   `json:"checkin_time"`            // checkin_time
	StartDate             uint   `json:"start_date"`              // start_date
	StartTime             uint   `json:"start_time"`              // start_time
	EndTime               uint   `json:"end_time"`                // end_time
	IsDel                 int8   `json:"is_del"`                  // is_del
	CreatedTime           uint   `json:"created_time"`            // created_time
	UpdatedTime           uint   `json:"updated_time"`            // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TeamCourseReserve exists in the database.
func (tcr *TeamCourseReserve) Exists() bool { //team_course_reserve
	return tcr._exists
}

// Deleted provides information if the TeamCourseReserve has been deleted from the database.
func (tcr *TeamCourseReserve) Deleted() bool {
	return tcr._deleted
}

// Get table name
func getTeamCourseReserveTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "team_course_reserve", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the TeamCourseReserve to the database.
func (tcr *TeamCourseReserve) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if tcr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getTeamCourseReserveTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`id, brand_id, shop_id, coach_id, coach_name, schedule_id, course_id, member_id, card_id, card_type, course_package_id, course_name, consume_name, court_id, court_name, court_site_id, court_site_name, limit_num, consume_unit, consume_unit_num, current_reservation_num, is_group_buy, is_waiting, reserve_status, reserve_way, is_checkin, checkin_way, reserve_id, checkin_id, checkin_time, start_date, start_time, end_time, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tcr.ID, tcr.BrandID, tcr.ShopID, tcr.CoachID, tcr.CoachName, tcr.ScheduleID, tcr.CourseID, tcr.MemberID, tcr.CardID, tcr.CardType, tcr.CoursePackageID, tcr.CourseName, tcr.ConsumeName, tcr.CourtID, tcr.CourtName, tcr.CourtSiteID, tcr.CourtSiteName, tcr.LimitNum, tcr.ConsumeUnit, tcr.ConsumeUnitNum, tcr.CurrentReservationNum, tcr.IsGroupBuy, tcr.IsWaiting, tcr.ReserveStatus, tcr.ReserveWay, tcr.IsCheckin, tcr.CheckinWay, tcr.ReserveID, tcr.CheckinID, tcr.CheckinTime, tcr.StartDate, tcr.StartTime, tcr.EndTime, tcr.IsDel, tcr.CreatedTime, tcr.UpdatedTime)))
	if tx != nil {
		res, err = tx.Exec(sqlstr, tcr.ID, tcr.BrandID, tcr.ShopID, tcr.CoachID, tcr.CoachName, tcr.ScheduleID, tcr.CourseID, tcr.MemberID, tcr.CardID, tcr.CardType, tcr.CoursePackageID, tcr.CourseName, tcr.ConsumeName, tcr.CourtID, tcr.CourtName, tcr.CourtSiteID, tcr.CourtSiteName, tcr.LimitNum, tcr.ConsumeUnit, tcr.ConsumeUnitNum, tcr.CurrentReservationNum, tcr.IsGroupBuy, tcr.IsWaiting, tcr.ReserveStatus, tcr.ReserveWay, tcr.IsCheckin, tcr.CheckinWay, tcr.ReserveID, tcr.CheckinID, tcr.CheckinTime, tcr.StartDate, tcr.StartTime, tcr.EndTime, tcr.IsDel, tcr.CreatedTime, tcr.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, tcr.ID, tcr.BrandID, tcr.ShopID, tcr.CoachID, tcr.CoachName, tcr.ScheduleID, tcr.CourseID, tcr.MemberID, tcr.CardID, tcr.CardType, tcr.CoursePackageID, tcr.CourseName, tcr.ConsumeName, tcr.CourtID, tcr.CourtName, tcr.CourtSiteID, tcr.CourtSiteName, tcr.LimitNum, tcr.ConsumeUnit, tcr.ConsumeUnitNum, tcr.CurrentReservationNum, tcr.IsGroupBuy, tcr.IsWaiting, tcr.ReserveStatus, tcr.ReserveWay, tcr.IsCheckin, tcr.CheckinWay, tcr.ReserveID, tcr.CheckinID, tcr.CheckinTime, tcr.StartDate, tcr.StartTime, tcr.EndTime, tcr.IsDel, tcr.CreatedTime, tcr.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// set existence
	tcr._exists = true

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tcr.ID = uint(id)
	tcr._exists = true

	return nil
}

// Update updates the TeamCourseReserve in the database.
func (tcr *TeamCourseReserve) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if tcr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getTeamCourseReserveTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, coach_id = ?, coach_name = ?, schedule_id = ?, course_id = ?, member_id = ?, card_id = ?, card_type = ?, course_package_id = ?, course_name = ?, consume_name = ?, court_id = ?, court_name = ?, court_site_id = ?, court_site_name = ?, limit_num = ?, consume_unit = ?, consume_unit_num = ?, current_reservation_num = ?, is_group_buy = ?, is_waiting = ?, reserve_status = ?, reserve_way = ?, is_checkin = ?, checkin_way = ?, reserve_id = ?, checkin_id = ?, checkin_time = ?, start_date = ?, start_time = ?, end_time = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tcr.BrandID, tcr.ShopID, tcr.CoachID, tcr.CoachName, tcr.ScheduleID, tcr.CourseID, tcr.MemberID, tcr.CardID, tcr.CardType, tcr.CoursePackageID, tcr.CourseName, tcr.ConsumeName, tcr.CourtID, tcr.CourtName, tcr.CourtSiteID, tcr.CourtSiteName, tcr.LimitNum, tcr.ConsumeUnit, tcr.ConsumeUnitNum, tcr.CurrentReservationNum, tcr.IsGroupBuy, tcr.IsWaiting, tcr.ReserveStatus, tcr.ReserveWay, tcr.IsCheckin, tcr.CheckinWay, tcr.ReserveID, tcr.CheckinID, tcr.CheckinTime, tcr.StartDate, tcr.StartTime, tcr.EndTime, tcr.IsDel, tcr.CreatedTime, tcr.UpdatedTime, tcr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, tcr.BrandID, tcr.ShopID, tcr.CoachID, tcr.CoachName, tcr.ScheduleID, tcr.CourseID, tcr.MemberID, tcr.CardID, tcr.CardType, tcr.CoursePackageID, tcr.CourseName, tcr.ConsumeName, tcr.CourtID, tcr.CourtName, tcr.CourtSiteID, tcr.CourtSiteName, tcr.LimitNum, tcr.ConsumeUnit, tcr.ConsumeUnitNum, tcr.CurrentReservationNum, tcr.IsGroupBuy, tcr.IsWaiting, tcr.ReserveStatus, tcr.ReserveWay, tcr.IsCheckin, tcr.CheckinWay, tcr.ReserveID, tcr.CheckinID, tcr.CheckinTime, tcr.StartDate, tcr.StartTime, tcr.EndTime, tcr.IsDel, tcr.CreatedTime, tcr.UpdatedTime, tcr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, tcr.BrandID, tcr.ShopID, tcr.CoachID, tcr.CoachName, tcr.ScheduleID, tcr.CourseID, tcr.MemberID, tcr.CardID, tcr.CardType, tcr.CoursePackageID, tcr.CourseName, tcr.ConsumeName, tcr.CourtID, tcr.CourtName, tcr.CourtSiteID, tcr.CourtSiteName, tcr.LimitNum, tcr.ConsumeUnit, tcr.ConsumeUnitNum, tcr.CurrentReservationNum, tcr.IsGroupBuy, tcr.IsWaiting, tcr.ReserveStatus, tcr.ReserveWay, tcr.IsCheckin, tcr.CheckinWay, tcr.ReserveID, tcr.CheckinID, tcr.CheckinTime, tcr.StartDate, tcr.StartTime, tcr.EndTime, tcr.IsDel, tcr.CreatedTime, tcr.UpdatedTime, tcr.ID)
	}
	return err
}

// Save saves the TeamCourseReserve to the database.
func (tcr *TeamCourseReserve) Save(ctx context.Context) error {
	if tcr.Exists() {
		return tcr.Update(ctx)
	}

	return tcr.Insert(ctx)
}

// Delete deletes the TeamCourseReserve from the database.
func (tcr *TeamCourseReserve) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if tcr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getTeamCourseReserveTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, tcr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, tcr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, tcr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	tcr._deleted = true

	return nil
}

// TeamCourseReserveByID retrieves a row from 'saas.team_course_reserve' as a TeamCourseReserve.
//
// Generated from index 'team_course_reserve_id_pkey'.
func TeamCourseReserveByID(ctx context.Context, id uint, key ...interface{}) (*TeamCourseReserve, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getTeamCourseReserveTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, coach_id, coach_name, schedule_id, course_id, member_id, card_id, card_type, course_package_id, course_name, consume_name, court_id, court_name, court_site_id, court_site_name, limit_num, consume_unit, consume_unit_num, current_reservation_num, is_group_buy, is_waiting, reserve_status, reserve_way, is_checkin, checkin_way, reserve_id, checkin_id, checkin_time, start_date, start_time, end_time, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	tcr := TeamCourseReserve{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&tcr.ID, &tcr.BrandID, &tcr.ShopID, &tcr.CoachID, &tcr.CoachName, &tcr.ScheduleID, &tcr.CourseID, &tcr.MemberID, &tcr.CardID, &tcr.CardType, &tcr.CoursePackageID, &tcr.CourseName, &tcr.ConsumeName, &tcr.CourtID, &tcr.CourtName, &tcr.CourtSiteID, &tcr.CourtSiteName, &tcr.LimitNum, &tcr.ConsumeUnit, &tcr.ConsumeUnitNum, &tcr.CurrentReservationNum, &tcr.IsGroupBuy, &tcr.IsWaiting, &tcr.ReserveStatus, &tcr.ReserveWay, &tcr.IsCheckin, &tcr.CheckinWay, &tcr.ReserveID, &tcr.CheckinID, &tcr.CheckinTime, &tcr.StartDate, &tcr.StartTime, &tcr.EndTime, &tcr.IsDel, &tcr.CreatedTime, &tcr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&tcr.ID, &tcr.BrandID, &tcr.ShopID, &tcr.CoachID, &tcr.CoachName, &tcr.ScheduleID, &tcr.CourseID, &tcr.MemberID, &tcr.CardID, &tcr.CardType, &tcr.CoursePackageID, &tcr.CourseName, &tcr.ConsumeName, &tcr.CourtID, &tcr.CourtName, &tcr.CourtSiteID, &tcr.CourtSiteName, &tcr.LimitNum, &tcr.ConsumeUnit, &tcr.ConsumeUnitNum, &tcr.CurrentReservationNum, &tcr.IsGroupBuy, &tcr.IsWaiting, &tcr.ReserveStatus, &tcr.ReserveWay, &tcr.IsCheckin, &tcr.CheckinWay, &tcr.ReserveID, &tcr.CheckinID, &tcr.CheckinTime, &tcr.StartDate, &tcr.StartTime, &tcr.EndTime, &tcr.IsDel, &tcr.CreatedTime, &tcr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &tcr, nil
}
