// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopProductRulesRelation represents a row from 'saas.shop_product_rules_relation'.
type ShopProductRulesRelation struct {
	ID          uint `json:"id"`           // id
	BrandID     uint `json:"brand_id"`     // brand_id
	ShopID      uint `json:"shop_id"`      // shop_id
	ProductID   uint `json:"product_id"`   // product_id
	RuleID      uint `json:"rule_id"`      // rule_id
	ProductType int8 `json:"product_type"` // product_type
	IsDel       int8 `json:"is_del"`       // is_del
	CreatedTime uint `json:"created_time"` // created_time
	UpdatedTime uint `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopProductRulesRelation exists in the database.
func (sprr *ShopProductRulesRelation) Exists() bool { //shop_product_rules_relation
	return sprr._exists
}

// Deleted provides information if the ShopProductRulesRelation has been deleted from the database.
func (sprr *ShopProductRulesRelation) Deleted() bool {
	return sprr._deleted
}

// Get table name
func getShopProductRulesRelationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_product_rules_relation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopProductRulesRelation to the database.
func (sprr *ShopProductRulesRelation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if sprr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopProductRulesRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, product_id, rule_id, product_type, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sprr.BrandID, sprr.ShopID, sprr.ProductID, sprr.RuleID, sprr.ProductType, sprr.IsDel, sprr.CreatedTime, sprr.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, sprr.BrandID, sprr.ShopID, sprr.ProductID, sprr.RuleID, sprr.ProductType, sprr.IsDel, sprr.CreatedTime, sprr.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, sprr.BrandID, sprr.ShopID, sprr.ProductID, sprr.RuleID, sprr.ProductType, sprr.IsDel, sprr.CreatedTime, sprr.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sprr.ID = uint(id)
	sprr._exists = true

	return nil
}

// Update updates the ShopProductRulesRelation in the database.
func (sprr *ShopProductRulesRelation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sprr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopProductRulesRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, product_id = ?, rule_id = ?, product_type = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sprr.BrandID, sprr.ShopID, sprr.ProductID, sprr.RuleID, sprr.ProductType, sprr.IsDel, sprr.CreatedTime, sprr.UpdatedTime, sprr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sprr.BrandID, sprr.ShopID, sprr.ProductID, sprr.RuleID, sprr.ProductType, sprr.IsDel, sprr.CreatedTime, sprr.UpdatedTime, sprr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sprr.BrandID, sprr.ShopID, sprr.ProductID, sprr.RuleID, sprr.ProductType, sprr.IsDel, sprr.CreatedTime, sprr.UpdatedTime, sprr.ID)
	}
	return err
}

// Save saves the ShopProductRulesRelation to the database.
func (sprr *ShopProductRulesRelation) Save(ctx context.Context) error {
	if sprr.Exists() {
		return sprr.Update(ctx)
	}

	return sprr.Insert(ctx)
}

// Delete deletes the ShopProductRulesRelation from the database.
func (sprr *ShopProductRulesRelation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if sprr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopProductRulesRelationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, sprr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, sprr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, sprr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	sprr._deleted = true

	return nil
}

// ShopProductRulesRelationByID retrieves a row from 'saas.shop_product_rules_relation' as a ShopProductRulesRelation.
//
// Generated from index 'shop_product_rules_relation_id_pkey'.
func ShopProductRulesRelationByID(ctx context.Context, id uint, key ...interface{}) (*ShopProductRulesRelation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getShopProductRulesRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, product_id, rule_id, product_type, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	sprr := ShopProductRulesRelation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&sprr.ID, &sprr.BrandID, &sprr.ShopID, &sprr.ProductID, &sprr.RuleID, &sprr.ProductType, &sprr.IsDel, &sprr.CreatedTime, &sprr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&sprr.ID, &sprr.BrandID, &sprr.ShopID, &sprr.ProductID, &sprr.RuleID, &sprr.ProductType, &sprr.IsDel, &sprr.CreatedTime, &sprr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &sprr, nil
}
