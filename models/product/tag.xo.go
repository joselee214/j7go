// Package test contains the types for schema 'product'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// Tag represents a row from 'saas.tags'.
type Tag struct {
	ID          uint   `json:"id"`           // id
	BrandID     uint   `json:"brand_id"`     // brand_id
	ShopID      uint   `json:"shop_id"`      // shop_id
	TagName     string `json:"tag_name"`     // tag_name
	TagType     int8   `json:"tag_type"`     // tag_type
	IsDel       int8   `json:"is_del"`       // is_del
	CreatedTime uint   `json:"created_time"` // created_time
	UpdatedTime uint   `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tag exists in the database.
func (t *Tag) Exists() bool { //tags
	return t._exists
}

// Deleted provides information if the Tag has been deleted from the database.
func (t *Tag) Deleted() bool {
	return t._deleted
}

// Get table name
func GetTagTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "tags", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the Tag to the database.
func (t *Tag) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTagTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, tag_name, tag_type, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, t.BrandID, t.ShopID, t.TagName, t.TagType, t.IsDel, t.CreatedTime, t.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, t.BrandID, t.ShopID, t.TagName, t.TagType, t.IsDel, t.CreatedTime, t.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, t.BrandID, t.ShopID, t.TagName, t.TagType, t.IsDel, t.CreatedTime, t.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.ID = uint(id)
	t._exists = true

	return nil
}

// Update updates the Tag in the database.
func (t *Tag) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTagTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, tag_name = ?, tag_type = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, t.BrandID, t.ShopID, t.TagName, t.TagType, t.IsDel, t.CreatedTime, t.UpdatedTime, t.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, t.BrandID, t.ShopID, t.TagName, t.TagType, t.IsDel, t.CreatedTime, t.UpdatedTime, t.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, t.BrandID, t.ShopID, t.TagName, t.TagType, t.IsDel, t.CreatedTime, t.UpdatedTime, t.ID)
	}
	return err
}

// Save saves the Tag to the database.
func (t *Tag) Save(ctx context.Context) error {
	if t.Exists() {
		return t.Update(ctx)
	}

	return t.Insert(ctx)
}

// Delete deletes the Tag from the database.
func (t *Tag) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if t._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetTagTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, t.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, t.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, t.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TagByID retrieves a row from 'saas.tags' as a Tag.
//
// Generated from index 'tags_id_pkey'.
func TagByID(ctx context.Context, id uint, key ...interface{}) (*Tag, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetTagTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, tag_name, tag_type, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	t := Tag{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&t.ID, &t.BrandID, &t.ShopID, &t.TagName, &t.TagType, &t.IsDel, &t.CreatedTime, &t.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&t.ID, &t.BrandID, &t.ShopID, &t.TagName, &t.TagType, &t.IsDel, &t.CreatedTime, &t.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &t, nil
}

func TagByIDs(ctx context.Context, ids []uint, key ...interface{}) ([]*Tag, error) {
	var err error
	var dbConn *sql.DB
	var list = make([]*Tag, 0)
	var rows *sql.Rows

	tableName, err := GetTagTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	// sql query
	sqlBuilder :=
		squirrel.Select(
			"id",
			"brand_id",
			"shop_id",
			"tag_name",
			"tag_type",
			"is_del",
			"created_time",
			"updated_time").
			From(tableName).
			Where(squirrel.Eq{"is_del": utils.NOT_DELETED, "id": ids})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		tag := Tag{}
		err = rows.Scan(&tag.ID,
			&tag.BrandID,
			&tag.ShopID,
			&tag.TagName,
			&tag.TagType,
			&tag.IsDel,
			&tag.CreatedTime,
			&tag.UpdatedTime)

		if err != nil {
			return nil, err
		}

		list = append(list, &tag)
	}

	return list, nil

}
