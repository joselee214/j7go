// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopVipRegionRelation represents a row from 'saas.shop_vip_region_relation'.
type ShopVipRegionRelation struct {
	ID           uint `json:"id"`             // id
	BrandID      uint `json:"brand_id"`       // brand_id
	ShopID       uint `json:"shop_id"`        // shop_id
	ProductID    uint `json:"product_id"`     // product_id
	ShopRegionID uint `json:"shop_region_id"` // shop_region_id
	ProductType  int8 `json:"product_type"`   // product_type
	IsDel        int8 `json:"is_del"`         // is_del
	CreatedTime  uint `json:"created_time"`   // created_time
	UpdatedTime  uint `json:"updated_time"`   // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopVipRegionRelation exists in the database.
func (svrr *ShopVipRegionRelation) Exists() bool { //shop_vip_region_relation
	return svrr._exists
}

// Deleted provides information if the ShopVipRegionRelation has been deleted from the database.
func (svrr *ShopVipRegionRelation) Deleted() bool {
	return svrr._deleted
}

// Get table name
func getShopVipRegionRelationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_vip_region_relation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopVipRegionRelation to the database.
func (svrr *ShopVipRegionRelation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if svrr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopVipRegionRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, product_id, shop_region_id, product_type, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, svrr.BrandID, svrr.ShopID, svrr.ProductID, svrr.ShopRegionID, svrr.ProductType, svrr.IsDel, svrr.CreatedTime, svrr.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, svrr.BrandID, svrr.ShopID, svrr.ProductID, svrr.ShopRegionID, svrr.ProductType, svrr.IsDel, svrr.CreatedTime, svrr.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, svrr.BrandID, svrr.ShopID, svrr.ProductID, svrr.ShopRegionID, svrr.ProductType, svrr.IsDel, svrr.CreatedTime, svrr.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	svrr.ID = uint(id)
	svrr._exists = true

	return nil
}

// Update updates the ShopVipRegionRelation in the database.
func (svrr *ShopVipRegionRelation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if svrr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopVipRegionRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, product_id = ?, shop_region_id = ?, product_type = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, svrr.BrandID, svrr.ShopID, svrr.ProductID, svrr.ShopRegionID, svrr.ProductType, svrr.IsDel, svrr.CreatedTime, svrr.UpdatedTime, svrr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, svrr.BrandID, svrr.ShopID, svrr.ProductID, svrr.ShopRegionID, svrr.ProductType, svrr.IsDel, svrr.CreatedTime, svrr.UpdatedTime, svrr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, svrr.BrandID, svrr.ShopID, svrr.ProductID, svrr.ShopRegionID, svrr.ProductType, svrr.IsDel, svrr.CreatedTime, svrr.UpdatedTime, svrr.ID)
	}
	return err
}

// Save saves the ShopVipRegionRelation to the database.
func (svrr *ShopVipRegionRelation) Save(ctx context.Context) error {
	if svrr.Exists() {
		return svrr.Update(ctx)
	}

	return svrr.Insert(ctx)
}

// Delete deletes the ShopVipRegionRelation from the database.
func (svrr *ShopVipRegionRelation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if svrr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopVipRegionRelationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, svrr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, svrr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, svrr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	svrr._deleted = true

	return nil
}

// ShopVipRegionRelationByID retrieves a row from 'saas.shop_vip_region_relation' as a ShopVipRegionRelation.
//
// Generated from index 'shop_vip_region_relation_id_pkey'.
func ShopVipRegionRelationByID(ctx context.Context, id uint, key ...interface{}) (*ShopVipRegionRelation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getShopVipRegionRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, product_id, shop_region_id, product_type, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	svrr := ShopVipRegionRelation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&svrr.ID, &svrr.BrandID, &svrr.ShopID, &svrr.ProductID, &svrr.ShopRegionID, &svrr.ProductType, &svrr.IsDel, &svrr.CreatedTime, &svrr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&svrr.ID, &svrr.BrandID, &svrr.ShopID, &svrr.ProductID, &svrr.ShopRegionID, &svrr.ProductType, &svrr.IsDel, &svrr.CreatedTime, &svrr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &svrr, nil
}

// BatchInsert inserts the ShopCardPrice to the database.
func BatchAddShopVipRegionRelation(ctx context.Context, shopVipRegionRelationList []*ShopVipRegionRelation, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getShopVipRegionRelationTableName(key...)
	if err != nil {
		return err
	}
	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "shop_id", "product_id", "shop_region_id", "product_type", "is_del", "created_time", "updated_time")

	for _, shopVipRegionRelation := range shopVipRegionRelationList {
		sqlBuilder = sqlBuilder.Values(shopVipRegionRelation.BrandID, shopVipRegionRelation.ShopID, shopVipRegionRelation.ProductID, shopVipRegionRelation.ShopRegionID,
			shopVipRegionRelation.ProductType, shopVipRegionRelation.IsDel, shopVipRegionRelation.CreatedTime, shopVipRegionRelation.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

func GetShopVipRegionRelationByShopIdAndCardId(ctx context.Context, cardId, shopId uint, key ...interface{}) ([]*ShopVipRegionRelation, error) {
	var err error
	var dbConn *sql.DB
	var shopVipRegionRelationList = make([]*ShopVipRegionRelation, 0)
	var rows *sql.Rows

	tableName, err := getShopVipRegionRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	sqlBuilder :=
		squirrel.Select(
			"id",
			"brand_id",
			"shop_id",
			"product_id",
			"shop_region_id",
			"product_type",
			"is_del",
			"created_time",
			"updated_time").
			From(tableName).
			Where(squirrel.Eq{"is_del": utils.Unavailable, "shop_id": shopId, "product_id": cardId})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		shopVipRegionRelation := ShopVipRegionRelation{}
		err := rows.Scan(&shopVipRegionRelation.ID,
			&shopVipRegionRelation.BrandID,
			&shopVipRegionRelation.ShopID,
			&shopVipRegionRelation.ProductID,
			&shopVipRegionRelation.ShopRegionID,
			&shopVipRegionRelation.ProductType,
			&shopVipRegionRelation.IsDel,
			&shopVipRegionRelation.CreatedTime,
			&shopVipRegionRelation.UpdatedTime,
		)
		if err != nil {
			return nil, err
		}

		shopVipRegionRelationList = append(shopVipRegionRelationList, &shopVipRegionRelation)
	}

	return shopVipRegionRelationList, nil
}

//批量删除vip场地
func BatchDelVipRegion(ctx context.Context, shopId, cardId uint, regionList []uint, key ...interface{}) error {
	var dbConn *sql.DB

	tableName, err := getShopVipRegionRelationTableName(key...)
	if err != nil {
		return err
	}

	sqlstr, args, err := squirrel.Update(tableName).Set("is_del", utils.DELETED).Where(squirrel.Eq{"shop_id": shopId, "product_id": cardId, "shop_region_id": regionList, "product_type": PRODUCT_MEMBER_CARD}).ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,batch_del_region", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}
