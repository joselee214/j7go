// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"go.uber.org/zap"
	"j7go/components"
	"j7go/utils"
)

// MemberCardTemplate represents a row from 'saas.member_card_template'.
type MemberCardTemplate struct {
	ID               uint   `json:"id"`                // id
	BrandID          uint   `json:"brand_id"`          // brand_id
	ShopID           uint   `json:"shop_id"`           // shop_id
	CardName         string `json:"card_name"`         // card_name
	CardType         int8   `json:"card_type"`         // card_type
	PublishChannel   int8   `json:"publish_channel"`   // publish_channel
	AdmissionRange   int8   `json:"admission_range"`   // admission_range
	PriceSetting     int8   `json:"price_setting"`     // price_setting
	SupportSales     int8   `json:"support_sales"`     // support_sales
	SellStatus       int8   `json:"sell_status"`       // sell_status
	IsTransfer       int8   `json:"is_transfer"`       // is_transfer
	Unit             int8   `json:"unit"`              // unit
	Num              uint   `json:"num"`               // num
	SellType         int8   `json:"sell_type"`         // sell_type
	CardContents     string `json:"card_contents"`     // card_contents
	CardIntroduction string `json:"card_introduction"` // card_introduction
	AlbumID          int    `json:"album_id"`          // album_id
	StartTime        uint   `json:"start_time"`        // start_time
	EndTime          uint   `json:"end_time"`          // end_time
	OperatorID       uint   `json:"operator_id"`       // operator_id
	IsDel            int8   `json:"is_del"`            // is_del
	CreatedTime      uint   `json:"created_time"`      // created_time
	UpdatedTime      uint   `json:"updated_time"`      // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MemberCardTemplate exists in the database.
func (mct *MemberCardTemplate) Exists() bool { //member_card_template
	return mct._exists
}

// Deleted provides information if the MemberCardTemplate has been deleted from the database.
func (mct *MemberCardTemplate) Deleted() bool {
	return mct._deleted
}

// Get table name
func getMemberCardTemplateTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "member_card_template", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the MemberCardTemplate to the database.
func (mct *MemberCardTemplate) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if mct._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getMemberCardTemplateTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, card_name, card_type, publish_channel, admission_range, price_setting, support_sales, sell_status, is_transfer, unit, num, sell_type, card_contents, card_introduction, album_id, start_time, end_time, operator_id, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mct.BrandID, mct.ShopID, mct.CardName, mct.CardType, mct.PublishChannel, mct.AdmissionRange, mct.PriceSetting, mct.SupportSales, mct.SellStatus, mct.IsTransfer, mct.Unit, mct.Num, mct.SellType, mct.CardContents, mct.CardIntroduction, mct.AlbumID, mct.StartTime, mct.EndTime, mct.OperatorID, mct.IsDel, mct.CreatedTime, mct.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, mct.BrandID, mct.ShopID, mct.CardName, mct.CardType, mct.PublishChannel, mct.AdmissionRange, mct.PriceSetting, mct.SupportSales, mct.SellStatus, mct.IsTransfer, mct.Unit, mct.Num, mct.SellType, mct.CardContents, mct.CardIntroduction, mct.AlbumID, mct.StartTime, mct.EndTime, mct.OperatorID, mct.IsDel, mct.CreatedTime, mct.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, mct.BrandID, mct.ShopID, mct.CardName, mct.CardType, mct.PublishChannel, mct.AdmissionRange, mct.PriceSetting, mct.SupportSales, mct.SellStatus, mct.IsTransfer, mct.Unit, mct.Num, mct.SellType, mct.CardContents, mct.CardIntroduction, mct.AlbumID, mct.StartTime, mct.EndTime, mct.OperatorID, mct.IsDel, mct.CreatedTime, mct.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mct.ID = uint(id)
	mct._exists = true

	return nil
}

// Update updates the MemberCardTemplate in the database.
func (mct *MemberCardTemplate) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mct._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getMemberCardTemplateTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, card_name = ?, card_type = ?, publish_channel = ?, admission_range = ?, price_setting = ?, support_sales = ?, sell_status = ?, is_transfer = ?, unit = ?, num = ?, sell_type = ?, card_contents = ?, card_introduction = ?, album_id = ?, start_time = ?, end_time = ?, operator_id = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mct.BrandID, mct.ShopID, mct.CardName, mct.CardType, mct.PublishChannel, mct.AdmissionRange, mct.PriceSetting, mct.SupportSales, mct.SellStatus, mct.IsTransfer, mct.Unit, mct.Num, mct.SellType, mct.CardContents, mct.CardIntroduction, mct.AlbumID, mct.StartTime, mct.EndTime, mct.OperatorID, mct.IsDel, mct.CreatedTime, mct.UpdatedTime, mct.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mct.BrandID, mct.ShopID, mct.CardName, mct.CardType, mct.PublishChannel, mct.AdmissionRange, mct.PriceSetting, mct.SupportSales, mct.SellStatus, mct.IsTransfer, mct.Unit, mct.Num, mct.SellType, mct.CardContents, mct.CardIntroduction, mct.AlbumID, mct.StartTime, mct.EndTime, mct.OperatorID, mct.IsDel, mct.CreatedTime, mct.UpdatedTime, mct.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mct.BrandID, mct.ShopID, mct.CardName, mct.CardType, mct.PublishChannel, mct.AdmissionRange, mct.PriceSetting, mct.SupportSales, mct.SellStatus, mct.IsTransfer, mct.Unit, mct.Num, mct.SellType, mct.CardContents, mct.CardIntroduction, mct.AlbumID, mct.StartTime, mct.EndTime, mct.OperatorID, mct.IsDel, mct.CreatedTime, mct.UpdatedTime, mct.ID)
	}
	return err
}

// Save saves the MemberCardTemplate to the database.
func (mct *MemberCardTemplate) Save(ctx context.Context) error {
	if mct.Exists() {
		return mct.Update(ctx)
	}

	return mct.Insert(ctx)
}

// Delete deletes the MemberCardTemplate from the database.
func (mct *MemberCardTemplate) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if mct._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := getMemberCardTemplateTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, mct.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, mct.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, mct.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	mct._deleted = true

	return nil
}

// MemberCardTemplateByID retrieves a row from 'saas.member_card_template' as a MemberCardTemplate.
//
// Generated from index 'member_card_template_id_pkey'.
func MemberCardTemplateByID(ctx context.Context, id uint, key ...interface{}) (*MemberCardTemplate, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := getMemberCardTemplateTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, card_name, card_type, publish_channel, admission_range, price_setting, support_sales, sell_status, is_transfer, unit, num, sell_type, card_contents, card_introduction, album_id, start_time, end_time, operator_id, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ? AND is_del = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id, utils.Unavailable)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	mct := MemberCardTemplate{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id, utils.Unavailable).Scan(&mct.ID, &mct.BrandID, &mct.ShopID, &mct.CardName, &mct.CardType, &mct.PublishChannel, &mct.AdmissionRange, &mct.PriceSetting, &mct.SupportSales, &mct.SellStatus, &mct.IsTransfer, &mct.Unit, &mct.Num, &mct.SellType, &mct.CardContents, &mct.CardIntroduction, &mct.AlbumID, &mct.StartTime, &mct.EndTime, &mct.OperatorID, &mct.IsDel, &mct.CreatedTime, &mct.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id, utils.Unavailable).Scan(&mct.ID, &mct.BrandID, &mct.ShopID, &mct.CardName, &mct.CardType, &mct.PublishChannel, &mct.AdmissionRange, &mct.PriceSetting, &mct.SupportSales, &mct.SellStatus, &mct.IsTransfer, &mct.Unit, &mct.Num, &mct.SellType, &mct.CardContents, &mct.CardIntroduction, &mct.AlbumID, &mct.StartTime, &mct.EndTime, &mct.OperatorID, &mct.IsDel, &mct.CreatedTime, &mct.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &mct, nil
}
