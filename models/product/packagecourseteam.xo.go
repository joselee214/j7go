// Package models contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// PackageCourseTeam represents a row from 'saas.package_course_team'.
type PackageCourseTeam struct {
	ID              uint `json:"id"`                // id
	BrandID         uint `json:"brand_id"`          // brand_id
	ShopID          uint `json:"shop_id"`           // shop_id
	CoursePackageID uint `json:"course_package_id"` // course_package_id
	CourseID        uint `json:"course_id"`         // course_id
	IsDel           int8 `json:"is_del"`            // is_del
	CreatedTime     uint `json:"created_time"`      // created_time
	UpdatedTime     uint `json:"updated_time"`      // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PackageCourseTeam exists in the database.
func (pct *PackageCourseTeam) Exists() bool { //package_course_team
	return pct._exists
}

// Deleted provides information if the PackageCourseTeam has been deleted from the database.
func (pct *PackageCourseTeam) Deleted() bool {
	return pct._deleted
}

// Get table name
func GetPackageCourseTeamTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "package_course_team", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the PackageCourseTeam to the database.
func (pct *PackageCourseTeam) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if pct._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPackageCourseTeamTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, course_package_id, course_id, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pct.BrandID, pct.ShopID, pct.CoursePackageID, pct.CourseID, pct.IsDel, pct.CreatedTime, pct.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, pct.BrandID, pct.ShopID, pct.CoursePackageID, pct.CourseID, pct.IsDel, pct.CreatedTime, pct.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, pct.BrandID, pct.ShopID, pct.CoursePackageID, pct.CourseID, pct.IsDel, pct.CreatedTime, pct.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pct.ID = uint(id)
	pct._exists = true

	return nil
}

// Update updates the PackageCourseTeam in the database.
func (pct *PackageCourseTeam) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pct._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPackageCourseTeamTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, course_package_id = ?, course_id = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pct.BrandID, pct.ShopID, pct.CoursePackageID, pct.CourseID, pct.IsDel, pct.CreatedTime, pct.UpdatedTime, pct.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pct.BrandID, pct.ShopID, pct.CoursePackageID, pct.CourseID, pct.IsDel, pct.CreatedTime, pct.UpdatedTime, pct.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pct.BrandID, pct.ShopID, pct.CoursePackageID, pct.CourseID, pct.IsDel, pct.CreatedTime, pct.UpdatedTime, pct.ID)
	}
	return err
}

// Save saves the PackageCourseTeam to the database.
func (pct *PackageCourseTeam) Save(ctx context.Context) error {
	if pct.Exists() {
		return pct.Update(ctx)
	}

	return pct.Insert(ctx)
}

// Delete deletes the PackageCourseTeam from the database.
func (pct *PackageCourseTeam) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if pct._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPackageCourseTeamTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, pct.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, pct.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, pct.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	pct._deleted = true

	return nil
}

// PackageCourseTeamByID retrieves a row from 'saas.package_course_team' as a PackageCourseTeam.
//
// Generated from index 'package_course_team_id_pkey'.
func PackageCourseTeamByID(ctx context.Context, id uint, key ...interface{}) (*PackageCourseTeam, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetPackageCourseTeamTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, course_package_id, course_id, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	pct := PackageCourseTeam{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&pct.ID, &pct.BrandID, &pct.ShopID, &pct.CoursePackageID, &pct.CourseID, &pct.IsDel, &pct.CreatedTime, &pct.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&pct.ID, &pct.BrandID, &pct.ShopID, &pct.CoursePackageID, &pct.CourseID, &pct.IsDel, &pct.CreatedTime, &pct.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &pct, nil
}

//更据课程包id批量获取课程包团体课记录
func PackageCourseTeamByPackageCourseIDs(ctx context.Context, packageCourseId uint, key ...interface{}) ([]*PackageCourseTeam, error) {
	var err error
	var dbConn *sql.DB
	var rows *sql.Rows

	tableName, err := GetPackageCourseTeamTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr, args, err := squirrel.Select("id",
		"brand_id",
		"shop_id",
		"course_package_id",
		"course_id",
		"is_del",
		"created_time",
		"updated_time").
		From(tableName).
		Where(squirrel.Eq{"course_package_id": packageCourseId, "is_del": utils.NOT_DELETED}).
		ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	if tx != nil {
		rows, err = tx.Query(sqlstr, args...)
		if err != nil {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlstr, args...)
		if err != nil {
			return nil, err
		}
	}
	defer rows.Close()

	pcts := make([]*PackageCourseTeam, 0)

	for rows.Next() {
		pct := &PackageCourseTeam{}
		err = rows.Scan(&pct.ID, &pct.BrandID, &pct.ShopID, &pct.CoursePackageID, &pct.CourseID, &pct.IsDel, &pct.CreatedTime, &pct.UpdatedTime)
		if err != nil {
			return nil, err
		}
		pct._exists = true
		pcts = append(pcts, pct)
	}

	return pcts, nil
}

//根据课程包id以及课程id删除课程包内的课程
func DelPackageCourseTeamByPackageCourseIDAndCourseId (ctx context.Context, packageCourseId uint, courseIds []uint, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetPackageCourseTeamTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr, args, err := squirrel.Update(tableName).
		Set("is_del", utils.DELETED).
		Where(squirrel.Eq{"course_package_id": packageCourseId, "course_id": courseIds}).
		ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}