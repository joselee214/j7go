// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"go.uber.org/zap"
	"j7go/components"
	"j7go/utils"
)

// CardPriceSetting represents a row from 'saas.card_price_setting'.
type CardPriceSetting struct {
	ID          uint `json:"id"`           // id
	CardID      uint `json:"card_id"`      // card_id
	Unit        int8 `json:"unit"`         // unit
	Num         uint `json:"num"`          // num
	RallyPrice  uint `json:"rally_price"`  // rally_price
	MinPrice    uint `json:"min_price"`    // min_price
	MaxPrice    uint `json:"max_price"`    // max_price
	FrozenDay   uint `json:"frozen_day"`   // frozen_day
	GiftUnit    uint `json:"gift_unit"`    // gift_unit
	IsDel       int8 `json:"is_del"`       // is_del
	CreatedTime uint `json:"created_time"` // created_time
	UpdatedTime uint `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CardPriceSetting exists in the database.
func (cps *CardPriceSetting) Exists() bool { //card_price_setting
	return cps._exists
}

// Deleted provides information if the CardPriceSetting has been deleted from the database.
func (cps *CardPriceSetting) Deleted() bool {
	return cps._deleted
}

// Get table name
func GetCardPriceSettingTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "card_price_setting", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the CardPriceSetting to the database.
func (cps *CardPriceSetting) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if cps._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCardPriceSettingTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`card_id, unit, num, rally_price, min_price, max_price, frozen_day, gift_unit, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cps.CardID, cps.Unit, cps.Num, cps.RallyPrice, cps.MinPrice, cps.MaxPrice, cps.FrozenDay, cps.GiftUnit, cps.IsDel, cps.CreatedTime, cps.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, cps.CardID, cps.Unit, cps.Num, cps.RallyPrice, cps.MinPrice, cps.MaxPrice, cps.FrozenDay, cps.GiftUnit, cps.IsDel, cps.CreatedTime, cps.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, cps.CardID, cps.Unit, cps.Num, cps.RallyPrice, cps.MinPrice, cps.MaxPrice, cps.FrozenDay, cps.GiftUnit, cps.IsDel, cps.CreatedTime, cps.UpdatedTime)
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cps.ID = uint(id)
	cps._exists = true

	return nil
}

// BatchInsert inserts the CardPriceSetting to the database.
func CardPriceSettingBatchInsert(ctx context.Context, priceSettingList []*CardPriceSetting, key ...interface{}) error {
	if utils.IntZero == len(priceSettingList) {
		return nil
	}
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCardPriceSettingTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("card_id", "unit", "num", "rally_price", "min_price", "max_price", "frozen_day",
			"gift_unit", "is_del", "created_time", "updated_time")

	for _, priceSetting := range priceSettingList {
		sqlBuilder = sqlBuilder.Values(priceSetting.CardID, priceSetting.Unit, priceSetting.Num,
			priceSetting.RallyPrice, priceSetting.MinPrice, priceSetting.MaxPrice, priceSetting.FrozenDay,
			priceSetting.GiftUnit, priceSetting.IsDel, priceSetting.CreatedTime, priceSetting.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

// Update updates the CardPriceSetting in the database.
func (cps *CardPriceSetting) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cps._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCardPriceSettingTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`card_id = ?, unit = ?, num = ?, rally_price = ?, min_price = ?, max_price = ?, frozen_day = ?, gift_unit = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cps.CardID, cps.Unit, cps.Num, cps.RallyPrice, cps.MinPrice, cps.MaxPrice, cps.FrozenDay, cps.GiftUnit, cps.IsDel, cps.CreatedTime, cps.UpdatedTime, cps.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cps.CardID, cps.Unit, cps.Num, cps.RallyPrice, cps.MinPrice, cps.MaxPrice, cps.FrozenDay, cps.GiftUnit, cps.IsDel, cps.CreatedTime, cps.UpdatedTime, cps.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cps.CardID, cps.Unit, cps.Num, cps.RallyPrice, cps.MinPrice, cps.MaxPrice, cps.FrozenDay, cps.GiftUnit, cps.IsDel, cps.CreatedTime, cps.UpdatedTime, cps.ID)
	}
	return err
}

// Save saves the CardPriceSetting to the database.
func (cps *CardPriceSetting) Save(ctx context.Context) error {
	if cps.Exists() {
		return cps.Update(ctx)
	}

	return cps.Insert(ctx)
}

// Delete deletes the CardPriceSetting from the database.
func (cps *CardPriceSetting) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if cps._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCardPriceSettingTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cps.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cps.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, cps.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	cps._deleted = true

	return nil
}

// CardPriceSettingByID retrieves a row from 'saas.card_price_setting' as a CardPriceSetting.
//
// Generated from index 'card_price_setting_id_pkey'.
func CardPriceSettingByID(ctx context.Context, id uint, key ...interface{}) (*CardPriceSetting, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetCardPriceSettingTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, card_id, unit, num, rally_price, min_price, max_price, frozen_day, gift_unit, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	cps := CardPriceSetting{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&cps.ID, &cps.CardID, &cps.Unit, &cps.Num, &cps.RallyPrice, &cps.MinPrice, &cps.MaxPrice, &cps.FrozenDay, &cps.GiftUnit, &cps.IsDel, &cps.CreatedTime, &cps.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&cps.ID, &cps.CardID, &cps.Unit, &cps.Num, &cps.RallyPrice, &cps.MinPrice, &cps.MaxPrice, &cps.FrozenDay, &cps.GiftUnit, &cps.IsDel, &cps.CreatedTime, &cps.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &cps, nil
}

func CardPriceSettingByCardId(ctx context.Context, cardId uint, key ...interface{}) ([]*CardPriceSetting, error) {
	var err error
	var dbConn *sql.DB
	var list = make([]*CardPriceSetting, 0)
	var rows *sql.Rows

	tableName, err := GetCardPriceSettingTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	sqlBuilder :=
		squirrel.Select(
			"id",
			"card_id",
			"unit",
			"num",
			"rally_price",
			"min_price",
			"max_price",
			"frozen_day",
			"gift_unit",
		).
			From(tableName).
			Where(squirrel.Eq{"is_del": utils.Unavailable, "card_id": cardId})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		price := CardPriceSetting{}
		err := rows.Scan(&price.ID,
			&price.CardID,
			&price.Unit,
			&price.Num,
			&price.RallyPrice,
			&price.MinPrice,
			&price.MaxPrice,
			&price.FrozenDay,
			&price.GiftUnit,
		)

		if err != nil {
			return nil, err
		}

		list = append(list, &price)
	}

	return list, nil
}

func CardPricesettingDeleteByCardId(ctx context.Context, cardId uint, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetCardPriceSettingTableName(key...)
	if err != nil {
		return err
	}

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE card_id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, cardId)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, cardId)
	} else {
		_, err = dbConn.Exec(sqlstr, cardId)
	}

	if err != nil {
		return err
	}

	return nil
}
