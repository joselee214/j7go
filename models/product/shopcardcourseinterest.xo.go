// Package product contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopCardCourseInterest represents a row from 'saas.shop_card_course_interests'.
type ShopCardCourseInterest struct {
	ID          uint   `json:"id"`           // id
	BrandID     uint   `json:"brand_id"`     // brand_id
	ShopID      uint   `json:"shop_id"`      // shop_id
	CardID      uint   `json:"card_id"`      // card_id
	CourseID    uint   `json:"course_id"`    // course_id
	CourseType  int8   `json:"course_type"`  // course_type
	CourseName  string `json:"course_name"`  // course_name
	IsDel       int8   `json:"is_del"`       // is_del
	CreatedTime uint   `json:"created_time"` // created_time
	UpdatedTime uint   `json:"updated_time"` // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopCardCourseInterest exists in the database.
func (scci *ShopCardCourseInterest) Exists() bool { //shop_card_course_interests
	return scci._exists
}

// Deleted provides information if the ShopCardCourseInterest has been deleted from the database.
func (scci *ShopCardCourseInterest) Deleted() bool {
	return scci._deleted
}

// Get table name
func GetShopCardCourseInterestTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_card_course_interests", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopCardCourseInterest to the database.
func (scci *ShopCardCourseInterest) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if scci._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardCourseInterestTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`brand_id, shop_id, card_id, course_id, course_type, course_name, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scci.BrandID, scci.ShopID, scci.CardID, scci.CourseID, scci.CourseType, scci.CourseName, scci.IsDel, scci.CreatedTime, scci.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, scci.BrandID, scci.ShopID, scci.CardID, scci.CourseID, scci.CourseType, scci.CourseName, scci.IsDel, scci.CreatedTime, scci.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, scci.BrandID, scci.ShopID, scci.CardID, scci.CourseID, scci.CourseType, scci.CourseName, scci.IsDel, scci.CreatedTime, scci.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	scci.ID = uint(id)
	scci._exists = true

	return nil
}

// BatchInsert inserts the ShopCardCourseInterest to the database.
func ShopCardCourseInterestBatchInsert(ctx context.Context, shopCardCourseinterestList []*ShopCardCourseInterest, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardCourseInterestTableName(key...)
	if err != nil {
		return err
	}
	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("brand_id", "shop_id", "card_id", "course_id", "course_type", "course_name", "is_del", "created_time", "updated_time")

	for _, shopCardCourseInterest := range shopCardCourseinterestList {
		sqlBuilder = sqlBuilder.Values(shopCardCourseInterest.BrandID, shopCardCourseInterest.ShopID, shopCardCourseInterest.CardID,
			shopCardCourseInterest.CourseID, shopCardCourseInterest.CourseType, shopCardCourseInterest.CourseName, shopCardCourseInterest.IsDel, shopCardCourseInterest.CreatedTime, shopCardCourseInterest.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

// Update updates the ShopCardCourseInterest in the database.
func (scci *ShopCardCourseInterest) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scci._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardCourseInterestTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`brand_id = ?, shop_id = ?, card_id = ?, course_id = ?, course_type = ?, course_name = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scci.BrandID, scci.ShopID, scci.CardID, scci.CourseID, scci.CourseType, scci.CourseName, scci.IsDel, scci.CreatedTime, scci.UpdatedTime, scci.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scci.BrandID, scci.ShopID, scci.CardID, scci.CourseID, scci.CourseType, scci.CourseName, scci.IsDel, scci.CreatedTime, scci.UpdatedTime, scci.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scci.BrandID, scci.ShopID, scci.CardID, scci.CourseID, scci.CourseType, scci.CourseName, scci.IsDel, scci.CreatedTime, scci.UpdatedTime, scci.ID)
	}
	return err
}

// Save saves the ShopCardCourseInterest to the database.
func (scci *ShopCardCourseInterest) Save(ctx context.Context) error {
	if scci.Exists() {
		return scci.Update(ctx)
	}

	return scci.Insert(ctx)
}

// Delete deletes the ShopCardCourseInterest from the database.
func (scci *ShopCardCourseInterest) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scci._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardCourseInterestTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scci.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scci.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scci.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	scci._deleted = true

	return nil
}

// ShopCardCourseInterestByID retrieves a row from 'saas.shop_card_course_interests' as a ShopCardCourseInterest.
//
// Generated from index 'shop_card_course_interests_id_pkey'.
func ShopCardCourseInterestByID(ctx context.Context, id uint, key ...interface{}) (*ShopCardCourseInterest, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopCardCourseInterestTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, brand_id, shop_id, card_id, course_id, course_type, course_name, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	scci := ShopCardCourseInterest{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&scci.ID, &scci.BrandID, &scci.ShopID, &scci.CardID, &scci.CourseID, &scci.CourseType, &scci.CourseName, &scci.IsDel, &scci.CreatedTime, &scci.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&scci.ID, &scci.BrandID, &scci.ShopID, &scci.CardID, &scci.CourseID, &scci.CourseType, &scci.CourseName, &scci.IsDel, &scci.CreatedTime, &scci.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &scci, nil
}

func ShopCourseByCardId(ctx context.Context, cardId uint, shopId uint, key ...interface{}) ([]*ShopCardCourseInterest, error) {
	var err error
	var dbConn *sql.DB
	var courseList = make([]*ShopCardCourseInterest, 0)
	var rows *sql.Rows

	tableName, err := GetShopCardCourseInterestTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	sqlBuilder :=
		squirrel.Select(
			"id",
			"brand_id",
			"shop_id",
			"card_id",
			"course_id",
			"course_type",
			"course_name",
			"is_del",
			"created_time",
			"updated_time").
			From(tableName).
			Where(squirrel.Eq{"is_del": utils.Unavailable, "shop_id": shopId, "card_id": cardId})

	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		course := ShopCardCourseInterest{}
		err := rows.Scan(&course.ID,
			&course.BrandID,
			&course.ShopID,
			&course.CardID,
			&course.CourseID,
			&course.CourseType,
			&course.CourseName,
			&course.IsDel,
			&course.CreatedTime,
			&course.UpdatedTime,
		)
		if err != nil {
			return nil, err
		}

		courseList = append(courseList, &course)
	}

	return courseList, nil
}

//批量删除指定课程
func BatchDeletecourseList(ctx context.Context, courseIds, courseTypes []uint, shopId, cardId uint, key ...interface{}) error {
	var dbConn *sql.DB

	tableName, err := GetShopCardCourseInterestTableName(key...)
	if err != nil {
		return err
	}

	sqlstr, args, err := squirrel.Update(tableName).Set("is_del", utils.DELETED).Where(squirrel.Eq{"shop_id": shopId, "card_id": cardId, "course_id": courseIds, "course_type": courseTypes}).ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,batch_delete_course_list", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}
