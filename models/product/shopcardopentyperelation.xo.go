// Package models contains the types for schema 'saas'.
package product

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/Masterminds/squirrel"
	"j7go/components"
	"j7go/utils"

	"go.uber.org/zap"
)

// ShopCardOpenTypeRelation represents a row from 'saas.shop_card_open_type_relation'.
type ShopCardOpenTypeRelation struct {
	ID           uint `json:"id"`            // id
	CardID       uint `json:"card_id"`       // card_id
	ShopID       uint `json:"shop_id"`       // shop_id
	AutomaticNum uint `json:"automatic_num"` // automatic_num
	OpenType     int8 `json:"open_type"`     // open_type
	IsDel        int8 `json:"is_del"`        // is_del
	CreatedTime  uint `json:"created_time"`  // created_time
	UpdatedTime  uint `json:"updated_time"`  // updated_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ShopCardOpenTypeRelation exists in the database.
func (scotr *ShopCardOpenTypeRelation) Exists() bool { //shop_card_open_type_relation
	return scotr._exists
}

// Deleted provides information if the ShopCardOpenTypeRelation has been deleted from the database.
func (scotr *ShopCardOpenTypeRelation) Deleted() bool {
	return scotr._deleted
}

// Get table name
func GetShopCardOpenTypeRelationTableName(key ...interface{}) (string, error) {
	tableName, err := components.M.GetTable("saas", "shop_card_open_type_relation", key...)
	if err != nil {
		return "", err
	}
	return tableName, nil
}

// Insert inserts the ShopCardOpenTypeRelation to the database.
func (scotr *ShopCardOpenTypeRelation) Insert(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB
	var res sql.Result
	// if already exist, bail
	if scotr._exists {
		return errors.New("insert failed: already exists")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardOpenTypeRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql insert query, primary key provided by autoincrement
	sqlstr := `INSERT INTO ` + tableName +
		` (` +
		`card_id, shop_id, automatic_num, open_type, is_del, created_time, updated_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scotr.CardID, scotr.ShopID, scotr.AutomaticNum, scotr.OpenType, scotr.IsDel, scotr.CreatedTime, scotr.UpdatedTime)))
	if err != nil {
		return err
	}
	if tx != nil {
		res, err = tx.Exec(sqlstr, scotr.CardID, scotr.ShopID, scotr.AutomaticNum, scotr.OpenType, scotr.IsDel, scotr.CreatedTime, scotr.UpdatedTime)
	} else {
		res, err = dbConn.Exec(sqlstr, scotr.CardID, scotr.ShopID, scotr.AutomaticNum, scotr.OpenType, scotr.IsDel, scotr.CreatedTime, scotr.UpdatedTime)
	}

	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	scotr.ID = uint(id)
	scotr._exists = true

	return nil
}

// BatchInsert inserts the shopCardOpenTypeRelation to the database.
func ShopCardOpenTypeRelationBatchInsert(ctx context.Context, shopOpenTypeRelationList []*ShopCardOpenTypeRelation, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardOpenTypeRelationTableName(key...)
	if err != nil {
		return err
	}
	// sql insert query, primary key must be provided
	sqlBuilder := squirrel.
		Insert(tableName).
		Columns("shop_id", "card_id", "automatic_num", "open_type", "is_del", "created_time", "updated_time")

	for _, shopCardOpenTypeRelation := range shopOpenTypeRelationList {
		sqlBuilder = sqlBuilder.Values(shopCardOpenTypeRelation.ShopID, shopCardOpenTypeRelation.CardID, shopCardOpenTypeRelation.AutomaticNum, shopCardOpenTypeRelation.OpenType,
			shopCardOpenTypeRelation.IsDel, shopCardOpenTypeRelation.CreatedTime, shopCardOpenTypeRelation.UpdatedTime)
	}

	sqlstr, args, err := sqlBuilder.ToSql()
	if err != nil {
		return err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, args)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, args...)
	} else {
		_, err = dbConn.Exec(sqlstr, args...)
	}

	if err != nil {
		return err
	}

	return nil
}

// Update updates the ShopCardOpenTypeRelation in the database.
func (scotr *ShopCardOpenTypeRelation) Update(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scotr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardOpenTypeRelationTableName(key...)
	if err != nil {
		return err
	}

	// sql query
	sqlstr := `UPDATE ` + tableName + ` SET ` +
		`card_id = ?, shop_id = ?, automatic_num = ?, open_type = ?, is_del = ?, created_time = ?, updated_time = ?` +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scotr.CardID, scotr.ShopID, scotr.AutomaticNum, scotr.OpenType, scotr.IsDel, scotr.CreatedTime, scotr.UpdatedTime, scotr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scotr.CardID, scotr.ShopID, scotr.AutomaticNum, scotr.OpenType, scotr.IsDel, scotr.CreatedTime, scotr.UpdatedTime, scotr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scotr.CardID, scotr.ShopID, scotr.AutomaticNum, scotr.OpenType, scotr.IsDel, scotr.CreatedTime, scotr.UpdatedTime, scotr.ID)
	}
	return err
}

// Save saves the ShopCardOpenTypeRelation to the database.
func (scotr *ShopCardOpenTypeRelation) Save(ctx context.Context) error {
	if scotr.Exists() {
		return scotr.Update(ctx)
	}

	return scotr.Insert(ctx)
}

// Delete deletes the ShopCardOpenTypeRelation from the database.
func (scotr *ShopCardOpenTypeRelation) Delete(ctx context.Context, key ...interface{}) error {
	var err error
	var dbConn *sql.DB

	// if deleted, bail
	if scotr._deleted {
		return nil
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	tableName, err := GetShopCardOpenTypeRelationTableName(key...)
	if err != nil {
		return err
	}
	//1

	// sql query with composite primary key
	sqlstr := `UPDATE ` + tableName + ` SET is_del = 1 WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, scotr.ID)))
	if tx != nil {
		_, err = tx.Exec(sqlstr, scotr.ID)
	} else {
		_, err = dbConn.Exec(sqlstr, scotr.ID)
	}

	if err != nil {
		return err
	}

	// set deleted
	scotr._deleted = true

	return nil
}

// ShopCardOpenTypeRelationByID retrieves a row from 'saas.shop_card_open_type_relation' as a ShopCardOpenTypeRelation.
//
// Generated from index 'shop_card_open_type_relation_id_pkey'.
func ShopCardOpenTypeRelationByID(ctx context.Context, id uint, key ...interface{}) (*ShopCardOpenTypeRelation, error) {
	var err error
	var dbConn *sql.DB

	tableName, err := GetShopCardOpenTypeRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	// sql query
	sqlstr := `SELECT ` +
		`id, card_id, shop_id, automatic_num, open_type, is_del, created_time, updated_time ` +
		`FROM ` + tableName +
		` WHERE id = ?`

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlstr, id)))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}
	scotr := ShopCardOpenTypeRelation{
		_exists: true,
	}

	if tx != nil {
		err = tx.QueryRow(sqlstr, id).Scan(&scotr.ID, &scotr.CardID, &scotr.ShopID, &scotr.AutomaticNum, &scotr.OpenType, &scotr.IsDel, &scotr.CreatedTime, &scotr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	} else {
		err = dbConn.QueryRow(sqlstr, id).Scan(&scotr.ID, &scotr.CardID, &scotr.ShopID, &scotr.AutomaticNum, &scotr.OpenType, &scotr.IsDel, &scotr.CreatedTime, &scotr.UpdatedTime)
		if err != nil {
			return nil, err
		}
	}

	return &scotr, nil
}
func GetShopCardOpenTypeRelationByShopIdAndCardId(ctx context.Context, cardId, shopId uint, key ...interface{}) ([]*ShopCardOpenTypeRelation, error) {
	var err error
	var dbConn *sql.DB
	var openTypeList = make([]*ShopCardOpenTypeRelation, 0)
	var rows *sql.Rows

	tableName, err := GetShopCardOpenTypeRelationTableName(key...)
	if err != nil {
		return nil, err
	}

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetSlaveConn()
		if err != nil {
			return nil, err
		}
	}

	// sql query
	sqlBuilder :=
		squirrel.Select("id", "card_id", "shop_id", "automatic_num",
			"open_type", "is_del", "created_time",
			"updated_time").
			From(tableName).
			Where(squirrel.Eq{"is_del": utils.Unavailable, "shop_id": shopId, "card_id": cardId})

	// run query
	sqlStr, arg, err := sqlBuilder.ToSql()
	if err != nil {
		return nil, err
	}

	// run query
	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL", fmt.Sprint(sqlStr, arg)))
	if tx != nil {
		rows, err = tx.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	} else {
		rows, err = dbConn.Query(sqlStr, arg...)
		if err != nil && err != sql.ErrNoRows {
			return nil, err
		}
	}

	defer rows.Close()

	for rows.Next() {
		openType := ShopCardOpenTypeRelation{}
		err := rows.Scan(&openType.ID,
			&openType.CardID,
			&openType.ShopID,
			&openType.AutomaticNum,
			&openType.OpenType,
			&openType.IsDel,
			&openType.CreatedTime,
			&openType.UpdatedTime,
		)
		if err != nil {
			return nil, err
		}

		openTypeList = append(openTypeList, &openType)
	}

	return openTypeList, nil
}

//批量删除开卡方式
func BatchDeleteOpenType(ctx context.Context, automaticNums []uint, shopId, cardId uint, openTypeList []uint, key ...interface{}) error {
	var dbConn *sql.DB

	tableName, err := GetShopCardOpenTypeRelationTableName(key...)
	if err != nil {
		return err
	}

	sqlstr, args, err := squirrel.Update(tableName).Set("is_del", utils.DELETED).Where(squirrel.Eq{"shop_id": shopId, "card_id": cardId, "open_type": openTypeList, "automatic_num": automaticNums}).ToSql()

	utils.GetTraceLog(ctx).Debug("DB", zap.String("SQL,batch_delete_open_type", fmt.Sprint(sqlstr)), zap.Any("args", args))

	tx, err := components.M.GetConnFromCtx(ctx)
	if err != nil {
		dbConn, err = components.M.GetMasterConn()
		if err != nil {
			return err
		}
	}

	if tx != nil {
		_, err := tx.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	} else {
		_, err := dbConn.Exec(sqlstr, args...)
		if err != nil {
			return err
		}
	}

	return nil
}
