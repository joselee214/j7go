// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product_errors.proto

package business_errors

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProductError int32

const (
	// 初始值, 无意义
	ProductError_INIT ProductError = 0
	// 新增会员卡模版失败
	ProductError_INSERT_CARD_TPL_ERROR ProductError = 50000
	// 更新会员卡模版失败
	ProductError_UPDATE_CARD_TPL_ERROR ProductError = 50001
	// 删除会员卡模版失败
	ProductError_DELETE_CARD_TPL_ERROR ProductError = 50002
	// 获取会员卡模版详情失败
	ProductError_GET_CARD_TPL_INFO_ERROR ProductError = 50003
	// 停售会员卡失败
	ProductError_STOP_SALE_CARD_ERROR ProductError = 50004
	// 恢复售卖会员卡失败
	ProductError_RECOVER_SALE_CARD_ERROR ProductError = 50005
	// 获取上架会员卡详情
	ProductError_GET_SHELF_CARD_INFO_ERROR ProductError = 50006
	// 新增储蓄卡失败
	ProductError_SAVE_DEPOSIT_CARD_TPL_ERROR ProductError = 50050
	// 编辑储蓄卡失败
	ProductError_UPDATE_DEPOSIT_CARD_TPL_ERROR ProductError = 50051
	// 获取储值卡详情失败
	ProductError_GET_DEPOSIT_TPL_INFO_ERROR ProductError = 50052
	// 停售储值卡失败
	ProductError_STOP_SALE_DEPOSIT_CARD_ERROR ProductError = 50053
	// 恢复储值卡失败
	ProductError_RECOVER_SALE_DEPOSIT_CARD_ERROR ProductError = 50054
	// 会员卡上架失败
	ProductError_UP_SHELF_CARD_ERROR ProductError = 50055
	// 会员卡下架失败
	ProductError_DOWN_SHELF_CARD_ERROR ProductError = 50056
	// -------------------------
	// Warning：50060~50199为课程包相关业务异常定义
	// 新增课程包失败
	ProductError_ADD_PACKAGE_COURSE_ERROR ProductError = 50060
	// 编辑课程包失败
	ProductError_EDIT_PACKAGE_COURSE_ERROR ProductError = 50061
	// -------------------------
	// Warning：50200~50500为私教课相关业务异常定义
	// 各位大佬不要过界啊！
	// -------------------------
	// 新增私教课失败
	ProductError_ADD_PERSONAL_COURSE_ERROR ProductError = 50200
	// 更新私教课失败
	ProductError_UPDATE_PERSONAL_COURSE_ERROR ProductError = 50201
	// 设置训练目的失败
	ProductError_SET_TRAIN_AIM_ERROR ProductError = 50202
	// 设置售卖价格失败
	ProductError_SET_SALE_PRICE_ERROR ProductError = 50203
	// 设置课程门店失败
	ProductError_SET_COURSE_SHOPS_ERROR ProductError = 50204
	// 设置课程教练失败
	ProductError_SET_COURSE_COACH_ERROR ProductError = 50205
	// 更新私教课失败
	ProductError_DELETE_PERSONAL_COURSE_ERROR ProductError = 50206
	// -------------------------
	// 50500～50500为团体课相关业务异常定义
	// -------------------------
	// 新增团体课失败
	ProductError_ADD_TEAM_COURSE_ERROR ProductError = 50500
	// 编辑团体课失败
	ProductError_EDIT_TEAM_COURSE_ERROR ProductError = 50501
	// 获取团体课详情失败
	ProductError_GET_TEAM_COURSE_INFO_ERROR ProductError = 50502
	// 设置团体课支持门店失败
	ProductError_SET_TEAM_COURSE_SHOPS_ERROR ProductError = 50503
	// 转入品牌团体课失败
	ProductError_INTO_BRAND_COURSE_ERROR ProductError = 50504
	// 删除团体课失败
	ProductError_DEL_TEAM_COURSE_ERROR ProductError = 50505
	// 将团体课置为无效失败
	ProductError_SET_TEAM_COURSE_INVALID ProductError = 50506
	// 将团体课置为有效失败
	ProductError_SET_TEAM_COURSE_VALID ProductError = 50507
)

var ProductError_name = map[int32]string{
	0:     "INIT",
	50000: "INSERT_CARD_TPL_ERROR",
	50001: "UPDATE_CARD_TPL_ERROR",
	50002: "DELETE_CARD_TPL_ERROR",
	50003: "GET_CARD_TPL_INFO_ERROR",
	50004: "STOP_SALE_CARD_ERROR",
	50005: "RECOVER_SALE_CARD_ERROR",
	50006: "GET_SHELF_CARD_INFO_ERROR",
	50050: "SAVE_DEPOSIT_CARD_TPL_ERROR",
	50051: "UPDATE_DEPOSIT_CARD_TPL_ERROR",
	50052: "GET_DEPOSIT_TPL_INFO_ERROR",
	50053: "STOP_SALE_DEPOSIT_CARD_ERROR",
	50054: "RECOVER_SALE_DEPOSIT_CARD_ERROR",
	50055: "UP_SHELF_CARD_ERROR",
	50056: "DOWN_SHELF_CARD_ERROR",
	50060: "ADD_PACKAGE_COURSE_ERROR",
	50061: "EDIT_PACKAGE_COURSE_ERROR",
	50200: "ADD_PERSONAL_COURSE_ERROR",
	50201: "UPDATE_PERSONAL_COURSE_ERROR",
	50202: "SET_TRAIN_AIM_ERROR",
	50203: "SET_SALE_PRICE_ERROR",
	50204: "SET_COURSE_SHOPS_ERROR",
	50205: "SET_COURSE_COACH_ERROR",
	50206: "DELETE_PERSONAL_COURSE_ERROR",
	50500: "ADD_TEAM_COURSE_ERROR",
	50501: "EDIT_TEAM_COURSE_ERROR",
	50502: "GET_TEAM_COURSE_INFO_ERROR",
	50503: "SET_TEAM_COURSE_SHOPS_ERROR",
	50504: "INTO_BRAND_COURSE_ERROR",
	50505: "DEL_TEAM_COURSE_ERROR",
	50506: "SET_TEAM_COURSE_INVALID",
	50507: "SET_TEAM_COURSE_VALID",
}
var ProductError_value = map[string]int32{
	"INIT":                            0,
	"INSERT_CARD_TPL_ERROR":           50000,
	"UPDATE_CARD_TPL_ERROR":           50001,
	"DELETE_CARD_TPL_ERROR":           50002,
	"GET_CARD_TPL_INFO_ERROR":         50003,
	"STOP_SALE_CARD_ERROR":            50004,
	"RECOVER_SALE_CARD_ERROR":         50005,
	"GET_SHELF_CARD_INFO_ERROR":       50006,
	"SAVE_DEPOSIT_CARD_TPL_ERROR":     50050,
	"UPDATE_DEPOSIT_CARD_TPL_ERROR":   50051,
	"GET_DEPOSIT_TPL_INFO_ERROR":      50052,
	"STOP_SALE_DEPOSIT_CARD_ERROR":    50053,
	"RECOVER_SALE_DEPOSIT_CARD_ERROR": 50054,
	"UP_SHELF_CARD_ERROR":             50055,
	"DOWN_SHELF_CARD_ERROR":           50056,
	"ADD_PACKAGE_COURSE_ERROR":        50060,
	"EDIT_PACKAGE_COURSE_ERROR":       50061,
	"ADD_PERSONAL_COURSE_ERROR":       50200,
	"UPDATE_PERSONAL_COURSE_ERROR":    50201,
	"SET_TRAIN_AIM_ERROR":             50202,
	"SET_SALE_PRICE_ERROR":            50203,
	"SET_COURSE_SHOPS_ERROR":          50204,
	"SET_COURSE_COACH_ERROR":          50205,
	"DELETE_PERSONAL_COURSE_ERROR":    50206,
	"ADD_TEAM_COURSE_ERROR":           50500,
	"EDIT_TEAM_COURSE_ERROR":          50501,
	"GET_TEAM_COURSE_INFO_ERROR":      50502,
	"SET_TEAM_COURSE_SHOPS_ERROR":     50503,
	"INTO_BRAND_COURSE_ERROR":         50504,
	"DEL_TEAM_COURSE_ERROR":           50505,
	"SET_TEAM_COURSE_INVALID":         50506,
	"SET_TEAM_COURSE_VALID":           50507,
}

func (x ProductError) String() string {
	return proto.EnumName(ProductError_name, int32(x))
}
func (ProductError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_product_errors_3d12376f920360da, []int{0}
}

func init() {
	proto.RegisterEnum("product.ProductError", ProductError_name, ProductError_value)
}

func init() {
	proto.RegisterFile("product_errors.proto", fileDescriptor_product_errors_3d12376f920360da)
}

var fileDescriptor_product_errors_3d12376f920360da = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0x11, 0x46, 0x14, 0x59, 0x48, 0x8c, 0x4c, 0x0b, 0xf4, 0x46, 0xb9, 0x88, 0x05, 0x2c,
	0xd8, 0xf0, 0x04, 0x6e, 0x72, 0xda, 0xb1, 0x48, 0xe3, 0xc8, 0xf6, 0x0c, 0x12, 0x42, 0xb2, 0xd4,
	0x32, 0x8b, 0x6e, 0x9a, 0x51, 0x32, 0x95, 0x58, 0x73, 0x49, 0xa2, 0x08, 0xf6, 0xdc, 0x9f, 0x86,
	0xeb, 0xb0, 0xe1, 0xfe, 0x14, 0x3c, 0x04, 0x8a, 0xed, 0x81, 0x64, 0x92, 0xee, 0x46, 0xf3, 0xfd,
	0xe7, 0xf7, 0xf9, 0xcf, 0x71, 0x8c, 0x17, 0xc7, 0x49, 0x7c, 0xff, 0x70, 0x6f, 0xa2, 0x47, 0x49,
	0x12, 0x27, 0xe9, 0xcd, 0x71, 0x12, 0x4f, 0x62, 0xb2, 0xe0, 0xfe, 0xbd, 0xf1, 0x67, 0x01, 0x9f,
	0x8e, 0xec, 0x6f, 0xa8, 0x04, 0xe4, 0x14, 0x3e, 0xc1, 0x42, 0xa6, 0x7a, 0xc7, 0xc8, 0x2a, 0x5e,
	0x62, 0xa1, 0x04, 0xa1, 0xb4, 0x47, 0x85, 0xaf, 0x55, 0x14, 0x68, 0x10, 0x82, 0x8b, 0xde, 0xd7,
	0x0c, 0x55, 0x70, 0x10, 0xf9, 0x54, 0xc1, 0x3c, 0xfc, 0x66, 0xa1, 0x0f, 0x01, 0xb4, 0xe1, 0xf7,
	0x0c, 0x91, 0x75, 0x7c, 0x7e, 0x1b, 0x6a, 0x9e, 0x2c, 0xdc, 0xe2, 0x0e, 0xff, 0xc8, 0x10, 0x59,
	0xc1, 0x8b, 0x52, 0xf1, 0x48, 0x4b, 0x1a, 0xb8, 0x72, 0xcb, 0x7e, 0xda, 0x52, 0x01, 0x1e, 0x1f,
	0x82, 0x68, 0xe1, 0x5f, 0x19, 0x22, 0x1b, 0x78, 0xb9, 0x72, 0x96, 0x7d, 0x08, 0xb6, 0x2c, 0xab,
	0x79, 0xff, 0xce, 0x10, 0xb9, 0x8c, 0x57, 0x25, 0x1d, 0x82, 0xf6, 0x21, 0xe2, 0x92, 0xb5, 0x72,
	0x3d, 0xcc, 0x11, 0xb9, 0x8a, 0xd7, 0x5d, 0xae, 0x23, 0x44, 0x8f, 0x72, 0x44, 0x2e, 0xe1, 0x95,
	0xea, 0xa0, 0x99, 0x62, 0x2e, 0xc5, 0xe3, 0x1c, 0x91, 0x2b, 0x78, 0xed, 0x7f, 0x8a, 0x86, 0x93,
	0xd5, 0x3c, 0xc9, 0x11, 0xb9, 0x86, 0x37, 0x1a, 0x69, 0x3a, 0x64, 0x59, 0x8e, 0xc8, 0x32, 0x3e,
	0x3b, 0x88, 0xea, 0xa1, 0x2c, 0xca, 0x73, 0x3b, 0x67, 0x7e, 0x27, 0x6c, 0xc3, 0x22, 0x47, 0xe4,
	0x22, 0xbe, 0x40, 0x7d, 0x5f, 0x47, 0xd4, 0xbb, 0x4d, 0xb7, 0x41, 0x7b, 0x7c, 0x20, 0x24, 0x38,
	0xfe, 0x34, 0x37, 0xd3, 0x02, 0x9f, 0xa9, 0x6e, 0xc1, 0x33, 0x2b, 0x30, 0x06, 0x20, 0x24, 0x0f,
	0x69, 0xd0, 0x14, 0x3c, 0x2f, 0x4c, 0x48, 0x37, 0xab, 0x6e, 0xcd, 0x8b, 0xc2, 0x74, 0x2f, 0x41,
	0x69, 0x25, 0x28, 0x0b, 0x35, 0x65, 0x3b, 0x0e, 0xbd, 0x2c, 0xec, 0xa6, 0xab, 0x75, 0x55, 0xd9,
	0x23, 0xc1, 0xbc, 0x59, 0xd9, 0xab, 0x02, 0x91, 0x35, 0x7c, 0xae, 0x62, 0xce, 0x4e, 0xf6, 0x79,
	0x24, 0x1d, 0x7d, 0xdd, 0xa2, 0x1e, 0xa7, 0x5e, 0xdf, 0xd1, 0x37, 0xb6, 0x2d, 0x77, 0xfb, 0xba,
	0xdb, 0x7a, 0x5b, 0x98, 0xc9, 0x55, 0xd9, 0x14, 0xd0, 0x9d, 0x26, 0x7c, 0x57, 0x1a, 0x7b, 0x33,
	0x99, 0x36, 0x7d, 0x5f, 0xfe, 0x5b, 0x7e, 0x1d, 0xd6, 0x96, 0xff, 0xa1, 0xb4, 0xd7, 0x6c, 0x4e,
	0x51, 0x4f, 0xf0, 0xb1, 0x34, 0x37, 0x99, 0x85, 0x8a, 0xeb, 0x4d, 0x41, 0x43, 0xbf, 0x79, 0xc6,
	0xa7, 0x72, 0xf6, 0x01, 0x75, 0x34, 0xf0, 0xd9, 0xd6, 0xca, 0x56, 0x03, 0x43, 0x1a, 0x30, 0xbf,
	0x37, 0xb5, 0xb5, 0xf3, 0xd8, 0xc2, 0x2f, 0x25, 0xda, 0xbc, 0x7e, 0xf7, 0xcc, 0xee, 0x61, 0xba,
	0x7f, 0x30, 0x4a, 0x53, 0xf7, 0x20, 0x4c, 0x8f, 0x2f, 0x0d, 0x26, 0x31, 0x3c, 0xd8, 0x1b, 0x8d,
	0x27, 0xfb, 0xf1, 0x41, 0x7a, 0xcf, 0xbd, 0x06, 0xbb, 0x27, 0xcd, 0x4b, 0x71, 0xeb, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x96, 0x60, 0x03, 0xde, 0x41, 0x04, 0x00, 0x00,
}
